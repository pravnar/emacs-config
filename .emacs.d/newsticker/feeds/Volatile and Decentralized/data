;; -*- coding: utf-8 -*-
(("Volatile and Decentralized" "The Internet has nowhere to hide" nil (21317 60048 287727 627000) feed 0 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144") (updated nil "2014-04-08T10:57:23.219-07:00") (title ((type . "text")) "Volatile and Decentralized") (subtitle ((type . "html")) "The Internet has nowhere to hide") (link ((rel . "http://schemas.google.com/g/2005#feed") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/posts/default"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/"))) (link ((rel . "hub") (href . "http://pubsubhubbub.appspot.com/"))) (link ((rel . "next") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default?start-index=26&max-results=25"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/04255792550910131960") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/_7QnO4jtox-U/SWvGVnpp-vI/AAAAAAAABqE/iECXif9AHL4/S220/mdw-office-small.jpg")))) (generator ((version . "7.00") (uri . "http://www.blogger.com")) "Blogger") (openSearch:totalResults nil "149") (openSearch:startIndex nil "1") (openSearch:itemsPerPage nil "25") (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1893907743149089553") (published nil "2014-02-28T13:20:00.002-08:00") (updated nil "2014-02-28T13:20:54.896-08:00") (title ((type . "text")) "Taking the \"Hot\" out of \"Hot Topics\" workshops") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I just got back from <a href=\"http://www.hotmobile.org/2014\">HotMobile 2014</a> (for which I was the general chair). HotMobile is the mobile systems community's \"hot topics\" workshop, held annually as a forum for (according to the <a href=\"http://www.hotmobile.org/2014/index.php?id=calls\">Call for Papers</a>) \"position papers containing highly original ideas\" and which \"propose new directions of research\" or \"advocate non-traditional approaches\". It's a small workshop (we had about 95 people this year) and the paper submissions are short -- 6 pages, rather than the regular 14.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s1600/ps_5985562024104183778.jpeg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s1600/ps_5985562024104183778.jpeg\" height=\"235\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">The HotMobile'14 poster and demo session.<br />Look how happy those mobile systems researchers are!</td></tr></tbody></table>Overall, the workshop was great -- lots of good discussions, good talks, interesting ideas. And yet, every time I attend one of these \"hot topics\" workshops, I end up feeling that the papers fall well short of this lofty goal. This is not limited to the mobile community -- the <a href=\"http://matt-welsh.blogspot.com/2013/05/what-i-wish-systems-researchers-would.html\">HotOS community has a similar problem</a>&nbsp;as well.<br /><br />This has bugged me for a long time, since it often feels as though there is no venue for doing \"out of the box\" work that is intended to look out five or ten years -- rather than just things that are incremental but not yet ready for publication in a major conference like SOSP or MobiSys. I also have fond memories of HotOS in the late 1990s in which it felt as though many of the papers were there to shake up the status quo and put forward a strong position.<br /><br />What I've now come to realize is that <b>there is a tremendous value in having a small workshop for preliminary (and often incremental) results</b>. The community obviously feels that such a venue is useful, despite its lack of \"hotness\" -- we had a record number of attendees this year, and (I believe) a near-record number of submissions.<br /><br />And after all, the main reasons to attend any workshop are the discussions and networking -- not the papers.<br /><br />The problem is that we insist on calling this a \"hot topics\" workshop and pretend that it's about far-out ideas that could not be published elsewhere. Instead, I think we should be honest that HotMobile (and HotOS, HotNets, etc.) are really for three kinds of papers:<br /><ol style=\"text-align: left;\"><li><b>Preliminary work on a new project</b> which is not yet ready for a major conference. Getting early feedback on a new project is often very useful to researchers, so they know if they are barking up the right trees.<br /><br />An example of this from this year is the <a href=\"http://www.hotmobile.org/2014/papers/hotmobile_final/hotmobile2014-final15.pdf\">CMU paper on QuiltView,</a> which proposes allowing users to pose real-time queries (\"How is the weather down at the beach in Santa Barbara?\") and get back real-time video snippets (from users wearing Google Glass!) in reply. This work is no where near mature enough for a full conference, and I hope the authors gained something from the paper reviews and discussion at the workshop to shape their future direction.<br /></li><li><b>An incremental, and possibly vestigial, step</b>, towards the next major conference paper on a topic. Many such papers are simply not big enough ideas for a full conference paper, but make a nice \"short paper\" for the sake of getting some idea out there.<br /><br />One example from this year is <a href=\"http://www.hotmobile.org/2014/papers/hotmobile_final/hotmobile2014-final42.pdf\">this paper on the dangers of public IPs for LTE devices</a>. This isn't something that's going to turn into a longer, more pithy paper later on, but is probably worth reporting.<br /></li><li>The <b>odd wacky paper</b> that falls under the \"hot topics\" rubric. These are increasingly rare. About the only example from this year is this <a href=\"http://synrg.csl.illinois.edu/papers/buzz.pdf\">Duke paper on adding smart capabilities to childrens' toys with smartphones</a> -- but the idea is not <i>that</i>&nbsp;radical.</li></ol>Last year at SOSP, there was a one-day workshop called <a href=\"http://sigops.org/sosp/sosp13/trios.html\">TRIOS</a> (\"Timely Results in Operating Systems\") which was an informal venue for preliminary work -- exactly to provide an outlet for papers in the first two categories above. At least TRIOS was honest about its intent, so nobody attending could be disappointed that the papers weren't \"hot\" enough.<br /><br />So, my humble proposal is to rename the workshop \"ColdMobile\" and, just to be cheeky, hold it at a ski resort in the winter.<br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1893907743149089553/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/02/taking-hot-out-of-hot-topics-workshops.html#comment-form") (title . "7 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1893907743149089553"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1893907743149089553"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/02/taking-hot-out-of-hot-topics-workshops.html") (title . "Taking the \"Hot\" out of \"Hot Topics\" workshops"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s72-c/ps_5985562024104183778.jpeg") (height . "72") (width . "72"))) (thr:total nil "7")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1690045831024210629") (published nil "2014-01-30T22:45:00.003-08:00") (updated nil "2014-01-30T22:50:16.984-08:00") (title ((type . "text")) "Getting a job at Google for PhD Students") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I happen to sit on one of the hiring committees at Google, which looks at interview packets and makes a recommendation about whether we should extend an offer or not. So I've read a lot of packets, and have seen some of the ways in which applicants succeed or fail to get an offer. Ph.D. students, in particular, tend to get tripped up by the Google interview process, so I thought I'd offer some advice.<br /><br />While I can't be certain, I imagine this same advice would apply to other companies which have a similar interview process that focuses on coding and algorithms.<br /><br />(Disclaimer: This is all my personal opinion, and nothing I'm saying here is sanctioned or recommended by Google in any way. In fact, it might be totally wrong. Take it with a grain of salt.)<br /><br /><b>Google's interview process</b><br /><b><br /></b>Google uses a fairly typical industry interview process: Candidates go through one or two phone screens (or possibly an on-campus interview), and if they do well they are brought on campus for a full interview loop. Each interview is an hour and consists largely of problem solving and coding on the whiteboard. Sometimes a laptop is used.<br /><br />This same process is used for <i>all</i>&nbsp;software engineering positions, regardless of level: undergrads, PhD students, and seasoned industry candidates all get the same style of interview. I had to go through this interview process upon joining Google as a professor. PhD-level candidates will generally spend one interview slot discussing their thesis work, and the questions may be more \"researchy\", but by and large it's the same for everyone.<br /><br /><b>The problem</b><br /><b><br /></b>Ph.D. students often tend to do <i>worse</i>&nbsp;on coding interviews than, say, bachelors' or masters' level candidates. Why? <b>Doing a Ph.D. simply does not train you in professional software development skills</b>, and that is (primarily) what a Google interview tests for. Undergrads, paradoxically, often do better because (a) they may have done internships at companies writing code, and (b) have practiced for this style of interview in the past.<br /><br />There is a widespread belief that doing a Ph.D. somehow elevates you above the need to demonstrate fundamental algorithms and coding skills. Having a Ph.D. from Berkeley is awesome, but you still gotta be able to write good, clean code.<br /><br />Also, part of the long process of doing a Ph.D. means you get hyper-specialized, so you get farther away from the \"basics\". Many of the Google interview questions touch on topics you probably first encountered (and mastered) as a sophomore or junior in college. I don't know about you, but I never dealt with binary search trees or graph connectivity problems directly during my Ph.D. and subsequent years as a faculty member. (Then again I'm just a systems guy, so the most sophisticated data structure I ever deal with is a hash table.)<br /><br /><b>Why the basics matter</b><br /><div><br /></div><div>Being at Google means writing production-quality software. We don't have \"research labs\" where people primarily build prototypes or write papers. I have <a href=\"http://matt-welsh.blogspot.com/2011/01/does-google-do-research.html\">written about Google's hybrid research model</a> elsewhere -- also see <a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">this CACM article</a> for more. While there are exceptions, by and large being at Google means being on a product team building and launching real products. That is even true of the more far-flung projects like self-driving cars and high-altitude Internet balloons. The quality and professionalism of the code you develop matters a great deal.</div><div><br /></div><div>Doing a Ph.D. generally trains you for building research prototypes. There is a vast difference between this and writing production-quality code. First of all, it's not good enough for the code to make sense -- or be maintainable -- only by you&nbsp;or a small number of collaborators. Adherence to good design, avoiding overcomplicated code, conforming to style guidelines, etc. are all super important. In addition, you have to really concern yourself with robustness, scalability, testability, and performance. Corner cases that aren't interesting for publishing your next paper can't be overlooked.</div><div><br /></div><div>Most of these skills can only be developed by working with a professional software development team. Research and class projects don't give you a chance to develop these skills. Undergrads gain these skills largely through internships. Unfortunately, most PhD students do internships at research labs, which may or may not provide much opportunity to build production-quality software.</div><div><br /></div><div><b>Advice for grad students</b></div><div><b><br /></b></div><div>If you're interviewing at Google, bone up on your basic algorithms and data structures. Go dust off that sophomore-level textbook and try to page it back in. I also <b>highly recommend</b>&nbsp;the book <a href=\"http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X\">Cracking the Coding Interview</a>, which gives the best description I have seen of Google-style interviews - it was written by a former Googler.</div><div><br /></div><div>Don't go in with the attitude that you're above all this. Roll up your sleeves and show them what you've got. I know it may feel silly being asked what seem like basic CS questions, but if you're really as good as you think you are, you should knock them out of the park. (Keep in mind that the questions get harder the better you are doing, so no matter what, you will probably feel like crap at the end of the day.)</div><div><br /></div><div>Every line of code you write on the whiteboard will get written up as part of the interview packet. Make it squeaky clean. Initialize variables. Use semicolons. Don't forget your constructors. Although writing sloppy pseudocode to get your meaning across might seem adequate (after all, we're all professionals here, aren't we?), attention to detail matters. Code in C++ or Java, which shows maturity. If you can only code in Python or bash shell, you're going to have trouble. If you make the slightest suggestion of wanting to code in Haskell or Lisp, the interviewer will push a hidden button which opens a trap door, dropping you into a bottomless pit. (Just kidding.)</div><div><br /></div><div>Never, <b>ever</b>&nbsp;suggest you are a \"C++ expert\", either on your resume or in person. You are not.</div><div><br /></div><div>Unfortunately, Google interviews tend to be a bit one-sided and you will not have as much opportunity to learn about Google (and what projects you might be working on) as you would like. If you do get an offer, you'll have more opportunities to come back and ask those questions. Google is notoriously secretive, so you have to trust me that there are plenty of cool things to work on.</div><div><br /></div><div>Finally: Remember that the content of the <i>interview</i> has nothing to do with the kind of <i>projects</i>&nbsp;you would work on here. You're not going to get hired by Google and be asked to implement depth-first-search or reverse a linked list -- trust me on that. I'm pretty sure we have library routines for those already.</div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1690045831024210629/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/getting-job-at-google-for-phd-students.html#comment-form") (title . "40 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1690045831024210629"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1690045831024210629"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/getting-job-at-google-for-phd-students.html") (title . "Getting a job at Google for PhD Students"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "40")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-4512692140579848845") (published nil "2014-01-21T22:39:00.001-08:00") (updated nil "2014-01-21T22:39:33.053-08:00") (title ((type . "text")) "Your Field Guide to Industrial Research Labs") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">There are a lot of different kinds of industrial research organizations out there. Identifying them can be tricky, so I've compiled this field guide to help you out.<br /><br /><b>The Patent Factory Research Lab</b><br /><b><br /></b>This is the classic model of research lab, and the main model that existed when I was a grad student in the late 1990s. Many of these labs no longer exist, or have transformed into one of the models below. Generally attached to a big company, this style of research lab primarily exists to bolster the parent company's patent portfolio. A secondary mission is to somehow inform the long-term product roadmap for the parent company, which may or may not be successful, depending on whether the research lab is located 50 miles or a mere 15 miles away from any buildings in which actual product teams work.<br /><br /><i>How you know you're visiting this style of lab: </i>The main decoration in researcher's offices are the little paperweights they get for every 20 patents they file.<br /><br /><b>The Academic Department inside of a Company Research Lab</b><br /><b><br /></b>This model is somewhat rare but it does exist, and a couple of companies have done a superb job building up a lab full of people who would really like to have been professors but who really don't like teaching or getting too close to undergraduates. This style of research lab focuses on cranking out paper after paper after paper and padding the ranks of every program committee in sight with its own members. Product impact is usually limited to demos, or the occasional lucky project which gets taken in by a product team and then ripped to shreds until it no longer resembles the original research in any way.<br /><br /><i>How you know you're visiting this style of lab:</i> It feels just like grad school, except everyone gets their own office, and there are a lot more Windows desktops than you would normally expect to see.<br /><br /><b>The Why Are We Still Here, Let's Hope The CEO Doesn't Notice Research Lab</b><br /><b><br /></b>This type of research lab exists only because the C-level executives have either misplaced it or forgotten it exists. Researchers here are experts in flying under the radar, steering clear of anything that might generate the slightest amount of media coverage lest they blow their cover. When asked what they are working on, they generally mumble something about \"the cloud\" which grants them another two-year reprieve until another VP-level review comes around, at which time everyone scrambles to put together demos and PowerPoint decks to look like they've been busy.<br /><br /><i>How you know you're visiting this style of lab: </i>Nobody has the slightest idea what's happening in the actual research community, and the project titles sound auto-generated.<br /><b><br /></b><b>The It's We-Could-Tell-You-But-We'd-Have-To-Kill-You Research Lab</b><br /><b><br /></b>This type of lab deals exclusively in classified defense contracts. These labs all have innocuous-sounding names which evoke the Cold War and bygone days when it was acceptable, and even encouraged, to smoke a pipe while working in the lab. Projects are done under contract from some branch of the military and generally involve satellites, nuclear warheads, lasers, or some combination of the above. On the plus side, this is the type of lab where you are most likely to encounter alien technology or invent time travel.<br /><br /><i>How you know you're visiting this style of lab: </i>All project names are comprised of inscrutable acronyms such as \"JBFM MAXCOMM\"; nobody seems to have a sense of humor.<br /><br /><b>The \"We Have a Research Lab Too\" Research Lab</b><br /><b><br /></b>This is the model exemplified by startup companies who are feeling jealous that they don't have enough Ph.D.'s working for them and feel the need to start \"Doge.com Research\" to make their mark on the world. &nbsp;This generally happens the first time such a company hires an ex-academic and makes the mistake of putting them in any kind of leadership role. Projects in this kind of lab aren't that different from regular work on the product teams, apart from the expectation that launching anything will take three times longer than a non-research team would be able to do.<br /><br /><i>How you know you're visiting this style of lab:</i>&nbsp;Hoodies with the word \"Research\" on them; free lunch.<br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/4512692140579848845/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/your-field-guide-to-industrial-research.html#comment-form") (title . "13 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4512692140579848845"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4512692140579848845"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/your-field-guide-to-industrial-research.html") (title . "Your Field Guide to Industrial Research Labs"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "13")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-250451166635664048") (published nil "2014-01-19T16:23:00.001-08:00") (updated nil "2014-01-19T16:23:20.034-08:00") (title ((type . "text")) "Google did not steal the smart contact lens from Microsoft") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Wired is carrying an article rather provocatively entitled, \"<a href=\"http://www.wired.com/business/2014/01/google-lens-microsoft/\">Google Stole Its Smart Contact Lens From Microsoft. And That’s a Good Thing</a>.\"&nbsp;While the article makes a few good points, the gist of the headline is dead wrong. I now work at Google, but I was previously an academic myself and received a significant amount of funding from Microsoft while I was at Harvard. (Standard disclaimer applies: This post represents my own opinion and not that of my employer.)<br /><div><br /></div><div>The Wired article gets it wrong when it claims that Google \"stole\" the smart contact lens project from Microsoft. It's true that Microsoft funded the original project being done by Babak Parviz when he was on the faculty at the University of Washington. Google then subsequently hired Babak (and Brian Otis, another UW faculty) to develop the project further, which was <a href=\"http://googleblog.blogspot.com/2014/01/introducing-our-smart-contact-lens.html\">recently announced on the Google Blog</a>. However, I don't think anyone would consider this \"stealing\". Suggesting that it does is a real problem, since it undercuts the open model used by many companies for funding university research.</div><div><br /></div><div>It would not surprise me if Microsoft hired former faculty to work on projects that were originally funded by Google's university research programs (which, like Microsoft, provides millions of dollars a year to university projects to undertake research). These kinds of industry research <i>gifts</i>&nbsp;generally have no strings attached. As the recipient of several Microsoft research awards, I could have used the money for anything -- pizza parties for my grad students, extravagant trips to the tropics -- without any repercussions, apart from gaining a poor reputation and probably excluding myself from consideration for future Microsoft awards. Likewise, the research output that these gifts funded had no intellectual property restrictions: the research was wholly owned by the university, and Microsoft received no IP rights whatsoever.</div><div><br /></div><div>This is a great model for industry research funding. It provides researchers with the maximal amount of flexibility, and does not preclude a researcher from funding one project from multiple sources (even multiple awards from competing companies).</div><div><br /></div><div>The Wired article does make a good point that Google seems to be doing a good job at taking these kinds of moonshot research ideas (like self-driving cars, Google Glass, and the smart contact lens project) to the next level, beyond the lab. But the implication that Google \"stole\" the research \"from\" Microsoft is disingenuous. I am sure most academics, and even Microsoft folks, would agree.</div><div><br /></div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/250451166635664048/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/google-did-not-steal-smart-contact-lens.html#comment-form") (title . "2 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/250451166635664048"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/250451166635664048"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/google-did-not-steal-smart-contact-lens.html") (title . "Google did not steal the smart contact lens from Microsoft"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "2")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1632247673613801456") (published nil "2013-08-18T16:09:00.002-07:00") (updated nil "2013-08-18T16:14:17.607-07:00") (title ((type . "text")) "Rewriting a large production system in Go") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">My team at Google is wrapping up an effort to rewrite a large production system (almost) entirely in <a href=\"http://golang.org/\">Go</a>. I say \"almost\" because one component of the system -- a library for transcoding between image formats -- works perfectly well in C++, so we decided to leave it as-is. But the rest of the system is 100% Go, not just wrappers to existing modules in C++ or another language. It's been a fun experience and I thought I'd share some lessons learned.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s1600/go-at-google-io-2011-videos_gopher.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s320/go-at-google-io-2011-videos_gopher.jpg\" width=\"240\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Plus, the Go language has a cute mascot ... awwww!</td></tr></tbody></table><b>Why rewrite?</b><br /><b><br /></b>The first question we must answer is why we considered a rewrite in the first place. When we started this project, we adopted an existing C++ based system, which had been developed over the course of a couple of years by two of our sister teams at Google. It's a good system and does its job remarkably well. However, it has been used in several different projects with vastly different goals, leading to a nontrivial accretion of cruft. Over time, it became apparent that for us to continue to innovate rapidly would be extremely challenging on this large, shared codebase. This is not a ding to the original developers -- it is just a fact that when certain design decisions become ossified, it becomes more difficult to rethink them, especially when multiple teams are sharing the code.<br /><br />Before doing the rewrite, we realized we needed only a small subset of the functionality of the original system -- perhaps 20% (or less) of what the other projects were doing with it. We were also looking at making some radical changes to its core logic, and wanted to experiment with new features in a way that would not impact the velocity of our team or the others using the code. Finally, the cognitive burden associated with making changes to any large, shared codebase is unbearable -- almost any change required touching lots of code that the developer did not fully understand, and updating test cases with unclear consequences for the other users of the code.<br /><br />So, we decided to fork off and do a from-scratch rewrite. The bet we made was that taking an initial productivity hit during the initial rewrite would pay off in droves when we were able to add more features over time. It has also given us an opportunity to rethink some of the core design decisions of our system, which has been extremely valuable for improving our own understanding of its workings.<br /><br /><b>Why Go?</b><br /><b><br /></b>I'll admit that at first I was highly skeptical of using Go. This production system sits directly on the serving path between users and their content, so it has to be fast. It also has to handle a large query volume, so CPU and memory efficiency are key. Go's reliance on garbage collection gave me pause (pun intended ... har har har), given how much pain Java developers go through to manage their memory footprint. Also, I was not sure how well Go would be supported for the kind of development we wanted to do inside of Google. Our system has lots of dependencies, and the last thing I wanted was to have to reinvent lots of libraries in Go that we already had in C++. Finally, there was also simply the fear of the unknown.<br /><br />My whole attitude changed when <a href=\"http://www.michaelpiatek.com/\">Michael Piatek</a> (one of the star engineers in the group) sent me an initial cut at the core system rewrite in Go, the result of less than a week's work. Unlike the original C++ based system, <b>I could actually read the code</b>, even though I didn't know Go (yet). The #1 benefit we get from Go is the lightweight concurrency provided by <a href=\"http://golang.org/doc/effective_go.html#goroutines\">goroutines</a>. Instead of a messy chain of dozens of asynchronous callbacks spread over tens of source files, the core logic of the system fits in a couple hundred lines of code, all in the same file. You just read it from top to bottom, and it makes sense.<br /><br />Michael also made the observation that <b>Go is a language designed for writing Web-based services.</b>&nbsp;Its standard libraries provide all of the machinery you need for serving HTTP, processing URLs, dealing with sockets, doing crypto, processing dates and timestamps, doing compression. Unlike, say, Python, Go is a compiled language and therefore very fast. Go's modular design makes for beautiful decomposition of code across modules, with clear explicit dependencies between them. Its incremental compilation approach makes builds lightning fast. Automatic memory management means you never have to worry about freeing memory (although the usual caveats with a GC-based language apply).<br /><br /><b>Being terse</b><br /><br />Syntactically, Go is very succinct. Indeed, the Go style guidelines encourage you to write code as tersely as possible. At first this drove me up the wall, since I was used to using long descriptive variable names and spreading expressions over as many lines as possible. But now I appreciate the terse coding approach, as it makes <i>reading and understanding</i>&nbsp;the code later much, much easier.<br /><br />Personally, I really like coding in Go. I can get to the point without having to write a bunch of boilerplate just to make the compiler happy. Unlike C++, I don't have to split the logic of my code across header files and .cc files. Unlike Java, you don't have to write anything that the compiler can infer, including the types of variables. Go feels a lot like coding in a lean scripting language, like Python, but you get type safety for free.<br /><br />Our Go-based rewrite is 121 Go source files totaling about 21K lines of code (including comments). Compare that to the original system, which was 1400 C++ source files with 460K lines of code. (Remember what I said about the new system implementing a small subset of the new system's functionality, though I do feel that the code size reduction is disproportionate to the functionality reduction.)<br /><br /><b>What about ramp-up time?</b><br /><b><br /></b>Learning Go is easy coming from a C-like language background. There are no real surprises in the language; it pretty much makes sense. The standard libraries are <a href=\"http://golang.org/pkg/\">very well documented</a>, and there are plenty of <a href=\"http://tour.golang.org/#1\">online tutorials</a>. None of the engineers on the team have taken very long at all to come up to speed in the language; heck, even one of our interns picked it up in a couple of days.<br /><br />Overall, the rewrite has taken about 5 months and is already running in production. We have also implemented 3 or 4 major new features that would have taken <b>much longer</b>&nbsp;to implement in the original C++ based system, for the reasons described above. I estimate that our team's productivity has been improved by at least a factor of ten by moving to the new codebase, and by using Go.<br /><br /><b>Why not Go?</b><br /><b><br /></b>There are a few things about Go that I'm not super happy about, and that tend to bite me from time to time.<br /><br />First, you need to \"know\" whether the variable you are dealing with is an interface or a struct. Structs can implement interfaces, of course, so in general you tend to treat these as the same thing. But when you're dealing with a struct, you might be passing by reference, in which the type is <span style=\"font-family: Courier New, Courier, monospace;\">*myStruct,</span> or you might be passing by value, in which the type is just <span style=\"font-family: Courier New, Courier, monospace;\">myStruct</span>. If, on the other hand, the thing you're dealing with is \"just\" an interface, you never have a pointer to it -- an interface <i>is</i>&nbsp;a pointer in some sense. It can get confusing when you're looking at code that is passing things around without the * to remember that it might actually \"be a pointer\" if it's an interface rather than a struct.<br /><br />Go's type inference makes for lean code, but requires you to dig a little to figure out what the type of a given variable is if it's not explicit. So given code like:<br /><blockquote class=\"tr_bq\"><span style=\"font-family: Courier New, Courier, monospace;\">foo, bar := someFunc(baz)&nbsp;</span></blockquote>You'd really like to know what <span style=\"font-family: Courier New, Courier, monospace;\">foo</span> and <span style=\"font-family: Courier New, Courier, monospace;\">bar</span> actually are, in case you want to add some new code to operate on them. If I could get out of the 1970s and use an editor other than vi, maybe I would get some help from an IDE in this regard, but I staunchly refuse to edit code with any tool that requires using a mouse.<br /><br />Finally, Go's liberal use of interfaces allows a struct to implement an interface \"by accident\". You never have to explicitly declare that a given struct implements a particular interface, although it's good coding style to mention this in the comments. The problem with this is that it can be difficult to tell when you are reading a given segment of code whether the developer intended for their struct to implement the interface that they appear to be projecting onto it. Also, if you want to refactor an interface, you have to go find all of its (undeclared) implementations more or less by hand.<br /><br />Most of all I find coding in Go <b>really, really fun</b>. This is a bad thing, since we all know that \"real\" programming is supposed to be a grueling, painful exercise of fighting with the compiler and tools. So programming in Go is making me soft. One day I'll find myself in the octagon ring with a bunch of sweaty, muscular C++ programmers bare-knuckling it out to the death, and I just know they're going to mop the floor with me. That's OK, until then I'll just keep on cuddling my stuffed gopher and running <span style=\"font-family: Courier New, Courier, monospace;\">gofmt</span> to auto-intent my code.<br /><br /><i>ObDisclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1632247673613801456/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/08/rewriting-large-production-system-in-go.html#comment-form") (title . "54 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1632247673613801456"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1632247673613801456"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/08/rewriting-large-production-system-in-go.html") (title . "Rewriting a large production system in Go"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s72-c/go-at-google-io-2011-videos_gopher.jpg") (height . "72") (width . "72"))) (thr:total nil "54")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3326598575258206267") (published nil "2013-07-11T22:20:00.004-07:00") (updated nil "2013-07-11T22:30:18.733-07:00") (title ((type . "text")) "Does the academic process slow innovation?") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I've been wondering recently whether the extended, baroque process of doing research in an academic setting (by which I mean either a university or an \"academic style\" research lab in industry) is doing more harm than good when it comes to the pace of innovation.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s1600/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"300\" src=\"http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s400/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">From&nbsp;http://academicnegativity.tumblr.com/</td></tr></tbody></table>Prior to moving to industry, I spent my whole career as an academic. It took me a while to get used to how <i>fast</i> things happen in industry. My team, which is part of Chrome, does a new major release&nbsp;<b>every six weeks.</b>&nbsp;This is head-spinningly fast compared to academic projects. Important decisions are made on the order of days, not months. Projects are started up and executed an order of magnitude faster than it would take a similarly-sized academic research group to get up to speed.<br /><br />This is not just about having plenty of funding (although that is part of it). It is also about what happens when you abandon the trappings of the academic process, for which the timelines are glacial:<br /><div style=\"text-align: left;\"></div><ul><li>A three month wait (typically) to get a decision on a conference submission, during which time you are not allowed to submit similar work elsewhere.</li><li>A six month wait on hearing back on a grant proposal submission.</li><li>A year or more wait for a journal publication, with a similar restriction on parallel submissions.</li><li>Five plus years to get a PhD.</li><li>Possibly one or two years as a postdoc.</li><li>Six to eight years to get tenure.</li><li>A lifetime of scarring as the result of the above. (Okay, I'm kidding. Sort of.)</li></ul>This is not a problem unique to computer science of course. In the medical field, the <a href=\"http://scientopia.org/blogs/drugmonkey/2012/02/14/updating-the-age-of-first-nih-r01-award-trends-flatlining/\">average age at which a PI receives their first NIH R01 grant is 44 years.</a>&nbsp;Think about that for a minute. That's 23-some-odd years <i>after graduation</i>&nbsp;before an investigator is considered an \"independent\" contributor to the research field. Is this good for innovation?<br /><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Overhead</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">Part of the problem is that the academic process is full of overheads. Take a typical conference program committee for example. Let's say the committee has 15 members, each of whom has 30 papers to review (this is pretty average, for good conferences at least). Each paper takes at least an hour to review (often more) - that's the equivalent of at least 4 work days (that is, assuming academics work only 8 hours a day ... ha ha!). Add on two more full days (minimum) for the program committee meeting and travel, and you're averaging about a full week of work for each PC member. Multiply by 15 -- double it for the two program co-chairs -- and you're talking about around 870 person-hours combined effort to decide on the 25 or so papers that will appear in the conference. <b>That's 34 person-hours of overhead per paper. </b>This doesn't count any of the overheads associated with actually organizing the conference -- making the budget, choosing the hotel, raising funds, setting up the website, publishing the proceedings, organizing the meals and poster sessions, renting the projectors ... you get my point.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>The question is, does all of this time and effort produce (a) better science or (b) lead to greater understanding or impact?</b> I want to posit that the answer is no. This process was developed decades ago in a pre-digital era where we had no other way to disseminate research results. (Hell, it's gotten much easier to run a program committee now that submissions are done via the web -- it used to be you had to print out 20 copies of your paper and mail them to the program chair who would mail out large packets to each of the committee members.)</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">But still, we cling to this process because it's the only way we know how to get PhD students hired as professors and get junior faculty tenured -- any attempt to buck the trend would no doubt jeopardize the career of some young academic. It's sad.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>How did we get here?</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">Why do we have these processes in the first place? The main reason is competition for scarce resources. Put simply, there are <b>too many academics</b>,&nbsp;and <b>not enough funding</b>&nbsp;and <b>not enough paper-slots in good conference venues</b>. Much has been said about the sad state of public funding for science research. Too many academics competing for the same pool of money means longer processes for proposal reviews and more time re-submitting proposals when they get rejected.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">As far as the limitation on conferences goes, you can't create more conferences out of thin air, because people wouldn't have time to sit on the program committees and travel to all of them (ironic, isn't it?). Whenever someone proposes a new conference venue there are groans of \"but how will we schedule it around SOSP and OSDI and NSDI and SIGCOMM?!?\" - so forget about that. Actually, I think the best model would be to adopt the practice of some research communities and have <b>one big mongo conference</b> every year that <i><b>everybody</b></i>&nbsp;goes to (ideally in Mexico) and have USENIX run it so the scientists can focus on doing science and leave the conference organization to the experts. But I digress.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">The industrial research labs don't have the same kind of funding problem, but they still compete for paper-slots. And I believe this inherently slows everything down because you can't do new research when you have to keep backtracking to get that paper you spent so many precious hours on finally published after the third round of rejections with \"a strong accept, two weak accepts, and a weak reject\" reviews. It sucks.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Innovative != Publishable</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">My inspiration for writing this post came from the amazing pace at which innovation is happening in industry these days. The most high-profile of these are crazy \"moon shot\" projects like&nbsp;<a href=\"http://www.spacex.com/\">SpaceX</a>,&nbsp;<a href=\"http://23andme.com/\">23andme</a>, and Google's&nbsp;<a href=\"http://www.google.com/loon/\">high-altitude balloons to deliver Internet access to entire cities</a>. But there are countless other, not-as-sexy innovations happening every day at companies big and small, just focused on changing the world, rather than writing papers about it.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">I want to claim that even with all of their resources, had these projects gone down the conventional academic route -- writing papers and the like -- they would have never happened. No doubt if a university had done the equivalent of, say, Google Glass and submitted a MobiSys paper on it, it would have been rejected as \"not novel enough\" since <a href=\"http://hci.stanford.edu/courses/cs547/Resources/Pictures/thad_starner.jpg\">Thad Starner has been wearing a computer on his head for 20 years</a>. And high-altitude Internet balloons? What's new about that? It's just a different form of WiFi, essentially. Nothing new there.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">We still need to publish research, though, which is important for driving innovation. But we should shift to an open, online publication model -- like <a href=\"http://arxiv.org/\">arXiv</a> -- where everything is \"accepted\" and papers are reviewed and scored informally after the fact. Work can get published much more rapidly and good work won't be stuck in the endless resubmission cycle. Scientists can stop wasting so much time and energy on program committees and conference organization. (We should still have one big conference every year so people still get to meet and drink and bounce ideas around.) &nbsp;This model is also much more amenable to publications from industry, who currently have little incentive to run the conference submission gauntlet, unless publishing papers is part of their job description. And academics can still use citation counts or \"paper ratings\" as the measure by which hiring and promotion decisions are made.</div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3326598575258206267/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/07/does-academic-process-slow-innovation.html#comment-form") (title . "37 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3326598575258206267"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3326598575258206267"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/07/does-academic-process-slow-innovation.html") (title . "Does the academic process slow innovation?"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s72-c/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg") (height . "72") (width . "72"))) (thr:total nil "37")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5665025180094963172") (published nil "2013-05-15T22:52:00.003-07:00") (updated nil "2013-05-15T22:52:46.145-07:00") (title ((type . "text")) "What I wish systems researchers would work on") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I just got back from <a href=\"https://www.usenix.org/conference/hotos13\">HotOS 2013</a> and, frankly, it was a little depressing. Mind you, the conference was really well-organized; there were lots of great people; an amazing venue; and fine work by the program committee and chair... but I could not help being left with the feeling that the operating systems community is somewhat stuck in a rut.<br /><br />It did not help that the <a href=\"https://www.usenix.org/conference/hotos13/tech-schedule/technical-sessions\">first session</a> was about how to make network and disk I/O faster, a topic that has been a recurring theme for as long as \"systems\" has existed as a field. HotOS is <i>supposed</i>&nbsp;to represent the \"hot topics\" in the area, but when we're still arguing about problems that are 25 years old, it starts to feel not-so-hot.<br /><br />Of the 27 papers presented at the workshop, only about 2 or 3 would qualify as bold, unconventional, or truly novel research directions. The rest were basically extended abstracts of conference submissions that are either already in preparation or will be submitted in the next year or so. This is a perennial problem for HotOS, and when I <a href=\"http://static.usenix.org/events/hotos11/index.html\">chaired it in 2011</a> we had the same problem. So I can't fault the program committee on this one -- they have to work with the submissions they get, and often the \"best\" and most polished submissions represent the most mature (and hence less speculative) work. (Still, this year there was no equivalent to <a href=\"http://static.usenix.org/events/hotos11/tech/final_files/Ackley.pdf\">Dave Ackley's paper in 2011</a> which challenged us to \"<i>pledge allegiance to the light cone.</i>\")<br /><br />This got me thinking about what research areas I wish the systems research community would spend more time on. I wrote a <a href=\"http://matt-welsh.blogspot.com/2013/01/my-mobile-systems-research-wish-list.html\">similar blog post after attending HotMobile 2013</a>, so it's only fair that I would subject the systems community to the same treatment. A few ideas...<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Obligatory diisclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /><b>An escape from configuration hell:</b>&nbsp;A lot of research effort is focused on better techniques for finding and mitigating software bugs. In my experience at Google, the vast majority of production failures arise not due to bugs in the software, but bugs in the (often vast and incredibly complex) <i>configuration settings</i> that control the software. A canonical example is when someone bungles an edit to a config file which gets rolled out to the fleet, and causes jobs to start behaving in new and often not-desirable ways. The software is working exactly as intended, but the bad configuration is leading it to do the wrong thing.<br /><br />This is a really hard problem. A typical Google-scale system involves many interacting jobs running very different software packages each with their own different mechanisms for runtime configuration: whether they be command-line flags, some kind of special-purpose configuration file (often in a totally custom ASCII format of some kind), or a fancy dynamically updated key-value store. The configurations are often operating at very different levels of abstraction --- everything from deciding where to route network packets, to Thai and Slovak translations of UI strings seen by users. \"Bad configurations\" are not just obvious things like syntax errors; they also include unexpected interactions between software components when a new (perfectly valid) configuration is used.<br /><br />There are of course tools for testing configurations, catching problems and rapidly rolling back bad changes, etc. but a tremendous amount of developer and operational energy goes into fixing problems arising due to bad configurations. This seems like a ripe area for research.<br /><br /><b>Understanding interactions in a large, production system:</b>&nbsp;The common definition of a \"distributed system\" assumes that the interactions between the individual components of the system are fairly well-defined, and dictated largely by whatever messaging protocol is used (cf., two phase commit, Paxos, etc.) &nbsp;In reality, the modes of interaction are vastly more complex and subtle than simply reasoning about state transitions and messages, in the abstract way that distributed systems researchers tend to cast things.<br /><br />Let me give a concrete example. Recently we encountered a problem where a bunch of jobs in one datacenter started crashing due to running out of file descriptors. Since this roughly coincided with a push of a new software version, we assumed that there must have been some leak in the new code, so we rolled back to the old version -- but the crash kept happening. We couldn't just take down the crashing jobs and let the traffic flow to another datacenter, since we were worried that the increased load would trigger the same bug elsewhere, leading to a cascading failure. The engineer on call spent many, many hours trying different things and trying to isolate the problem, without success. Eventually we learned that another team had changed the configuration of <i>their</i>&nbsp;system which was leading to many more socket connections being made to <i>our</i>&nbsp;system, which put the jobs over the default file descriptor limit (which had never been triggered before). The \"bug\" here was not a software bug, or even a bad configuration: it was the unexpected interaction between two very different (and independently-maintained) software systems leading to a new mode of resource exhaustion.<br /><br />Somehow there needs to be a way to perform offline analysis and testing of large, complex systems so that we can catch these kinds of problems before they crop up in production. Of course we have extensive testing infrastructure, but the \"hard\" problems always come up when running in a real production environment, with real traffic and real resource constraints. Even integration tests and canarying are a joke compared to how complex production-scale systems are. I wish I had a way to take a complete snapshot of a production system and run it in an isolated environment -- at scale! -- to determine the impact of a proposed change. Doing so on real hardware would be cost-prohibitive (even at Google), so how do you do this in a virtual or simulated setting?<br /><br />I'll admit that these are not easy problems for academics to work on. Unless you have access to a real production system, it's unlikely you'll encounter this problem in an academic setting. Doing internships at companies is a great way to get exposure to this kind of thing. Replicating this problem in an academic environment may be difficult.<br /><br /><b>Pushing the envelope on new computing platforms:</b>&nbsp;I also wish the systems community would come back to working on novel and unconventional computing platforms. The work on sensor networks in the 2000's really challenged our assumptions about the capabilities and constraints of a computer system, and forced us down some interesting paths in terms of OS, language, and network protocol design. In doing these kinds of explorations, we learn a lot about how \"conventional\" OS concepts map (or don't map) onto the new platform, and the new techniques can often find a home in a more traditional setting: witness how the ideas from <a href=\"http://www.read.cs.ucla.edu/click/click\">Click</a>&nbsp;have influenced all kinds of systems unrelated to its original goals.<br /><br />I think it is inevitable that in our lifetimes we will have a wearable computing platform that is \"truly embedded\": either with a neural interface, or with something almost as good (e.g. seamless speech input and visual output in a light and almost-invisible form factor). I wore my <a href=\"http://www.google.com/glass\">Google Glass</a> to HotOS, which stirred up a lot of discussions around privacy issues, what the \"killer apps\" are, what abstractions the OS should support, and so forth. I would call Google Glass an early example of the kind of wearable platform that may well replace smartphones, tablets, and laptops as the personal computing interface of choice in the future. If that is true, then now is the time for the academic systems community to start working out how we're going to support such a platform. There are vast issues around privacy, energy management, data storage, application design, algorithms for vision and speech recognition, and much more that come up in this setting.<br /><br />These are all juicy and perfectly valid research problems for the systems community -- if only it is bold enough to work on them.<br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5665025180094963172/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/05/what-i-wish-systems-researchers-would.html#comment-form") (title . "44 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5665025180094963172"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5665025180094963172"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/05/what-i-wish-systems-researchers-would.html") (title . "What I wish systems researchers would work on"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "44")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7101143301267252226") (published nil "2013-04-21T15:21:00.002-07:00") (updated nil "2013-04-21T15:28:10.593-07:00") (title ((type . "text")) "The other side of \"academic freedom\"") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">My <a href=\"http://matt-welsh.blogspot.com/2013/04/running-software-team-at-google.html\">various blog posts</a> about <a href=\"http://matt-welsh.blogspot.com/2010/11/why-im-leaving-harvard.html\">moving from academia to industry</a> have prompted a number of conversations with PhD students who are considering academic careers. The most oft-cited reason for wanting a faculty job is \"academic freedom,\" which is typically described as \"being able to work on anything you want.\" This is a nice theory, but I think it's important to understand the realities, especially for pre-tenure, junior faculty.<br /><div><br /></div><div>I don't believe that most professors (even tenured ones) can genuinely work on \"anything they want.\" In practice, as a professor you are constrained by at least four things:<br /><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li>What you can get funding to do;</li><li>What you can publish (good) papers about;</li><li>What you can get students to help you with;</li><li>What you can do better than anyone else in the field.</li></ul>These are important limitations to consider, and I want to take them one by one.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Funding doesn't come easy.</b>&nbsp;When I was a PhD student at Berkeley, I was fortunate to be a student of <a href=\"http://www.cs.berkeley.edu/~culler/\">David Culler</a>'s, who had what seemed like an endless supply of funding from big DARPA and NSF grants, among others. When I went to start my faculty career, he (and many others) told me I would have \"no problem\" getting plenty of funding. This turned out not to be true. Shortly after I started my faculty job, DARPA all but shut down their programs in computer science, and NSF grants became heavily constrained (and much more competitive). Being a freshly-minted faculty member meant I was essentially a nobody, but that didn't mean that NSF review panels took pity on me -- apart from special programs like the CAREER award, you're competing with the most senior, established people in your field for every grant. To make matters worse, I didn't have a lot of senior colleagues in my area at Harvard to write proposals with, so I mostly had to go it alone.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">Now, I will readily admit that I suck at writing grants, although according to my colleagues my hit rate for funding was about on par with other profs in my area. However, there were several projects that I simply <b>could not do</b>&nbsp;because I couldn't get funding for them. I tried for <b>four years</b> to get an NSF grant for our work on <a href=\"http://fiji.eecs.harvard.edu/Volcano\">monitoring volcanoes with sensor networks</a> -- which was arguably the thing I was most famous for as a professor. I failed. As a result we never did the large-scale, 100-node, multi-month study that we had hoped to do. It was a huge disappointment and taught me a valuable lesson that you can't work on something that you can't get funding for.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Who decides which problems are sexy (and therefore publishable)?</b>&nbsp;I'll tell you: it's the 30-some-odd people who serve on the program committees of the top conferences in your area year after year. It is very rare for a faculty member to buck the trend of which topics are \"hot\" in their area, since they would run a significant risk of not being able to publish in the top venues. This can be absolutely disastrous for junior faculty who need a strong publication record to get tenure. I know of several faculty who were denied tenure <i>specifically</i> because they chose to work on problems outside of the mainstream, and were not able to publish enough top papers as a result. So, sure, they could work on \"anything they wanted,\" but that ended up getting them fired.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">Now, there are some folks (David Culler being one of them) who are able to essentially start new fields and get the community to go along with them. I argue that most professors are not able to do this, even tenured ones. Most people have to go where the funding and the publication venues are.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>What can you get students to work on?</b>&nbsp;I don't mean this in a kind of grad-students-won't-write-unit-tests kind of way (although that is also true). What I mean is how likely is it that you will find grad students <i>in your field</i>&nbsp;who have the requisite skills to undertake a particular research agenda? In my case, I would have killed for some students who really knew how to design circuit boards. Or students who had some deep understanding of compiler optimization -- but still wanted to work on (and publish) in the area of operating systems. A bunch of times I felt that the problems I could tackle were circumscribed by my students' (and my own) technical skills. This has nothing to do with the \"quality\" of the students; it's just the fact that PhD students (by definition) have to be hyper-specialized. This means that grad students in a given area tend to have a fairly narrow set of skills, which can be a limitation at times.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Can you differentiate your research?</b>&nbsp;The final (and arguably most important) aspect of being successful as a faculty member is being able to solve new problems better than anyone else in your area. It is not usually enough to simply do a better job solving the same problem as someone else -- you need to have a new idea, a new spin, a new approach -- or work on a different problem. Hot areas tend to get overcrowded, making it difficult for individual faculty to differentiate themselves. For a while it felt like everyone was working on peer-to-peer networking. A bunch of \"me too\" research projects started up, most of which were forgettable. Being one of those \"me too\" researchers in a crowded area would be a very bad idea for a pre-tenure faculty member.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Do things get better after tenure?</b>&nbsp;I didn't stick around long enough to find out, so I don't know. I definitely know some tenured faculty who are coasting and care a lot less about where and how much they publish, or who tend to dabble rather than take a more focused research agenda post-tenure. Certainly you cannot get fired if you are not publishing or bringing in the research dollars anymore, but to me this sounds like an unsatisfying career. Others -- like David Culler -- are able to embark on ambitious, paradigm-shifting projects (like <a href=\"http://now.cs.berkeley.edu/\">NOW</a> and <a href=\"http://www.tinyos.net/\">TinyOS</a>) without much regard to which way the winds are blowing. I think most tenured faculty would agree that they are subject to the same sets of pressures to work on fundable, publishable research as pre-tenure faculty, if they care about having impact.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Okay, but how much freedom do you have in industry?</b>&nbsp;This is worth a separate post on its own, which I will write sometime soon. The short version is that it depends a lot on the kind of job you have and what kind of company you work for. My team at Google has a <a href=\"http://matt-welsh.blogspot.com/2011/05/what-im-working-on-at-google-making.html\">pretty broad mandate</a> which gives us a fair bit of freedom. But unlike academia, we aren't limited by funding (apart from headcount, which is substantial); technical skills (we can hire people with the skills we need); or the somewhat unpredictable whims of a research community or NSF panel. So, yes, there are limitations, but I think they are no more severe, and a lot more rational, than what you often experience as an academic.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /><div><div><br /></div></div></div></div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7101143301267252226/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/the-other-side-of-academic-freedom.html#comment-form") (title . "48 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7101143301267252226"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7101143301267252226"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/the-other-side-of-academic-freedom.html") (title . "The other side of \"academic freedom\""))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "48")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5322403964728588206") (published nil "2013-04-08T23:09:00.000-07:00") (updated nil "2013-04-08T23:09:23.401-07:00") (title ((type . "text")) "Running a software team at Google") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I'm often asked what my job is like at Google since I left academia. I guess going from tenured professor to software engineer sounds like a big step down. Job titles aside, I'm much happier and more productive in my new role than I was in the 8 years at Harvard, though there are actually a lot of similarities between being a professor and running a software team.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s1600/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"211\" src=\"http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s320/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">LIKE A BOSS.</td></tr></tbody></table>I lead a team at Google's Seattle office which is responsible for a range of projects in the mobile web performance area (for more background on my team's work see my <a href=\"http://matt-welsh.blogspot.com/2011/05/what-im-working-on-at-google-making.html\">earlier blog post on the topic</a>). One of our projects is the recently-announced <a href=\"https://developers.google.com/chrome/mobile/docs/data-compression\">data compression proxy support in Chrome Mobile</a>. We also work on the <a href=\"https://developers.google.com/speed/pagespeed/\">PageSpeed</a> suite of technologies, specifically focusing on mobile web optimization, as well as a bunch of other cool stuff that I can't talk about just yet.<br /><br /><div style=\"text-align: left;\"></div>My official job title is just \"software engineer,\" which is the most common (and coveted) role at Google. (I say \"coveted\" because engineers make most of the important decisions.) Unofficially, I'm what we call a&nbsp;\"Tech Lead Manager,\" which means I am responsible both for the technical direction of the team as well as doing the people management stuff. (Some people use the alternate term \"Über Tech Lead\" but this has one too many umlauts for me.) A TLM is not a very common role at Google: most teams have separate people doing the TL and M jobs. I do both in part because, being based out of Seattle, it doesn't make sense to have my team report to a \"regular\" manager who would likely be in Mountain View. Besides I'm really happy to do both jobs and enjoy the variety.<br /><br />There are four main aspects to my job: (1) Defining the technical agenda for the team and making sure we're successful; (2) Writing code of my own; (3) Acting as the main liaison between our team and other groups at Google, and (4) Doing the \"people management\" for the team in terms of hiring, performance reviews, promotion, and so forth.<br /><br />Academics will immediately recognize the parallels with being a professor. In an academic research group, the professor defines the technical scope of the group as well as mentors and guides the graduate students. The big difference here is that I don't consider the folks on my team to be my \"apprentices\" as a professor would with graduate students. Indeed, most people on my team are much better software engineers than I am, and I lean on them heavily to do the really hard work of building solid, reliable software. My job is to shield the engineers on my team from distractions, and support them so they can be successful.<br /><br />There are of course many differences with academic life. Unlike a professor, I don't have to constantly beg for funding to keep the projects going. I have very few distractions in terms of committees, travel, writing recommendation letters, pointless meetings. Of course, I also don't have to teach. (I loved teaching, but the amount of work it requires to do well is gargantuan.) Most importantly, my team's success is no longer defined through an&nbsp;<a href=\"http://matt-welsh.blogspot.com/2010/05/proposal-improving-nsf-review-process.html\">arbitrary and often broken peer review process</a>, which applies to&nbsp;pretty much everything&nbsp;that matters&nbsp;in the academic world. This is the best part. If we can execute well and deliver products that have impact, we win. It no longer comes down to making three grumpy program committee members happy with the&nbsp;<a href=\"http://matt-welsh.blogspot.com/2010/01/paper-formatting-gestapo.html\">font spacing in your paper submissions</a>. But I digress.<br /><br />I do spend about 50% of my time writing code. I really need to have a few solid hours each day hacking in order to stay sane. Since I don't have as many coding cycles (and service more interrupts) than other people on my team, I tend to take on the more mundane tasks such as writing MapReduce code to analyze service logs and generate reports on performance. I actually like this kind of work as it means dealing with a huge amount of data and slicing and dicing it in various interesting ways. I also don't need to show off my heroic coding skills in order to get promoted at this point, so I let the folks who are better hackers implement the sexy new features.<br /><br />I do exert a lot of influence over the direction that our team's software takes, in terms of overall design and architecture. Largely this is because I have more experience thinking about systems design than some of the folks on my team, although it does mean that I need to defer to the people writing the actual code when there are hairy details with which I am unfamiliar. A big part of my job is setting priorities and making the call when we are forced to choose between several unappealing options to solve a particular problem. (It also means I am the one who takes the heat if I make the wrong decision.)<br /><br />I reckon that the people management aspects of my job are pretty standard in industry: I do the periodic performance reviews for my direct reports, participate in compensation planning, work on hiring new people to the team (both internally and externally), and advocate for my team members when they go up for promotion. Of course I meet with each of my direct reports on a regular basis and help them with setting priorities, clearing obstacles, and career development.<br /><br />The most varied part of my job is acting as the representative for our team and working with other teams at Google to make amazing things happen. My team is part of the larger Chrome project, but we have connections with many other teams from all over the world doing work across Google's technology stack. I am also frequently called into meetings to figure out how to coordinate my team's work with other things going on around the company. So it never gets boring. Fortunately we are pretty efficient at meetings (half an hour suffices for almost everything) and even with all of this, my meeting load is about half of what it was as an academic. (Besides, these meetings are <i>almost</i>&nbsp;always productive; compared to academic meetings where only about 10% of them have any tangible outcome.)<br /><br />Despite the heavy load and lots of pokers in the fire, my work at Google is largely a 9-to-5 job. I rarely work on the evenings and weekends, unless there's something I'm really itching to do, and the volume of email I get drops to near-zero when it's outside of working hours. (Although I am on our team's pager rotation and recently spent a few hours in the middle of the night fixing a production bug.) This is a huge relief from the constant pressure to work, work, work that is endemic of professors. I also feel that I get much more done now, in less time, due to fewer distractions and being able to maintain a clear focus. The way I see it is this: If I'm being asked to do more than I can get done in a sane work week, we need to hire more people. Fortunately that is rarely a problem.<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5322403964728588206/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/running-software-team-at-google.html#comment-form") (title . "38 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5322403964728588206"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5322403964728588206"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/running-software-team-at-google.html") (title . "Running a software team at Google"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s72-c/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg") (height . "72") (width . "72"))) (thr:total nil "38")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5177872052049881551") (published nil "2013-03-21T21:58:00.002-07:00") (updated nil "2013-03-27T21:56:39.018-07:00") (title ((type . "text")) "Looking back on 1 million pageviews") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This blog just hit one million pageviews:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s1600/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"171\" src=\"http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s640/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png\" width=\"640\" /></a></div>Seems like a pretty cool milestone to me. I never imagined I'd get so much traffic.<br /><br />Just for fun, here are the top five most popular posts on this blog so far:<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/11/why-im-leaving-harvard.html\">Why I'm Leaving Harvard</a></b>&nbsp;(99263 pageviews), in which I announce my departure from Harvard to Google. I guess this post became a kind of touchstone for a bunch of people considering an academic career, or those who also made the decision to leave academia. I'm often asked whether I still think I made the right decision after nearly 3 years at Google. The answer is a resounding yes: I'm extremely happy and my team is doing amazing things - <a href=\"https://developers.google.com/chrome/mobile/docs/data-compression\">some of which you can read about here</a>.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/09/so-you-want-to-go-to-grad-school.html\">So, you want to go to grad school?</a></b>&nbsp;(43314 pageviews), in which I try to give an honest assessment of why someone should (or should not) do a PhD in Computer Science. The main thing I try to dispel is this myth that you should \"take a year off\" and work in industry before going to grad school. Way too many students tell me that they plan to do this, and I think it is a really bad idea if you are serious about doing a PhD.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/12/day-in-life-of-googler.html\">Day in the life of a Googler</a> </b>(33885 pageviews), which was intended as a tongue-in-cheek look at the difference between a day at Google and a day as a professor. Somehow this got taken seriously by people, and someone sent me a link to a Chinese translation that was getting a lot of hits and comments (in Chinese). My guess is that the intended humor was lost in translation.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2009/02/how-i-almost-killed-facebook.html\">How I almost killed Facebook</a></b>&nbsp;(28367 pageviews), an early post about the time I tried to talk Mark Zuckerberg out of dropping out of Harvard to do a startup. Thankfully he did not listen to me.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2011/09/programming-computer-science.html\">Programming != Computer Science</a> </b>(25794 pageviews), a little rant against grad students who seem to mix up writing software with doing research.<br /><br />Of course, not all of my posts have been widely read. Going back over them, it looks like the ones with the smallest number of hits focus on specific research topics, like my <b><a href=\"http://matt-welsh.blogspot.com/2009/11/sensys-2009-day-one.html\">trip report for SenSys 2009</a></b>&nbsp;(115 pageviews!) and an announcement for <b><a href=\"http://matt-welsh.blogspot.com/2009/08/postdoc-openings-on-robobees-project.html\">postdoc openings in my group</a></b>&nbsp;(a whopping 68 pageviews). I guess I should stick to blogging about Mark Zuckerberg instead.<br /><br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5177872052049881551/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/looking-back-on-1-million-pageviews.html#comment-form") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5177872052049881551"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5177872052049881551"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/looking-back-on-1-million-pageviews.html") (title . "Looking back on 1 million pageviews"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s72-c/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png") (height . "72") (width . "72"))) (thr:total nil "4")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5398246669487114845") (published nil "2013-03-19T23:13:00.000-07:00") (updated nil "2013-03-19T23:16:32.243-07:00") (title ((type . "text")) "Moving my life to the cloud") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s1600/2250488434_57b8fe59bf_o.jpg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s320/2250488434_57b8fe59bf_o.jpg\" width=\"262\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/clspeace/2250488434/\">http://www.flickr.com/photos/clspeace/2250488434/</a></td></tr></tbody></table>I'm in the process of moving my (computing) life entirely to the cloud -- no more laptop: just a phone, tablet (which I use rarely) and a <a href=\"http://www.google.com/intl/en/chrome/devices/chromebook-pixel/\">Chromebook Pixel</a>. My three-year-old MacBook Pro is about to croak, and it seems like now is the time to migrate everything to the cloud, so I can free myself from having to maintain a bunch of files, music, photos, applications, and backups locally. I'd really like to be in a place where I could throw my laptop out a moving vehicle and not care a bit about what happens to my data. Still, there are some challenges ahead.<br /><br />The Chromebook Pixel itself is a sweet piece of kit. The keyboard and trackpad are nearly as good as my Mac, and the screen resolution is simply unreal: you CANNOT see the pixels (ironic choice of product name; as if the next version of a Mac would be the \"MacBook Virus\"). It boots in 10 seconds. Hell, the other day I did a complete OS upgrade (switching from the beta to the dev channel), which took no more than 10 seconds -- including the reboot. The Pixel comes with 1 TB (!) of Google Drive storage, so at this point there's no excuse for not storing all my stuff in the cloud -- this is more space than any laptop I've ever owned.<br /><br /><b>But you only get to use Chrome!?!?&nbsp;</b>Working at Google, I spend about 70% of my time in Chrome already, so the environment is pretty much exactly what I need. The other 30% of my time is spent ssh'ing into a Linux machine to do software development. The <a href=\"https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?utm_source=chrome-ntp-launcher\">Secure Shell Chrome extension</a> provides a full-on terminal emulator within the browser. I pretty much only use the shell and vim when doing development, so this setup is fine for me.<br /><br />Since I left academia, I don't have much need for writing papers in LaTeX and doing fancy PowerPoint slides anymore. If those were still major uses of my time, I'd have to find another solution. Google Docs works perfectly well for the kind of writing and presentations I do these days; in fact, the sharing capabilities turn out to be more important than fancy formatting.<br /><br /><b>What about working offline!?!?!</b>&nbsp;Who the hell ever works offline anymore? I certainly don't. Even on airplanes, the majority of the time I have WiFi. I generally can't get any work done without an Internet connection, so optimizing for \"offline\" use seems silly to me. If I'm really offline, I'll read a book.<br /><br /><b>Music?&nbsp;</b>Google Play Music and the Amazon Cloud Player work great. I have a huge music library (some 1,200 albums) which I keep in both places.<br /><br /><b>Movies and TV shows?&nbsp;</b>It's true that iTunes has the best selection, but what's available on Google Play and Amazon Instant Video is pretty good. I mostly watch movies and TV on my actual TV (crazy, I know) but for \"on the road\" I think streaming content will work well enough. There's no real offline video playback on the Chromebook as far as I know; for that I can use my Android tablet though. Netflix apparently works fine on the Chromebook, although I unsubscribed from Netflix when they started screwing people over on their pricing.<br /><br />Of course, it's not all roses. A few pain points, so far:<br /><br /><b>Migrating my photo library</b>&nbsp;to the cloud was more painful than I had hoped. I have around 70 GB of pictures and videos taken over the years, and wanted to get it onto Google Drive so I'd have direct access to it from the Chromebook. This involved installing the Google Drive Mac app which allowed me to copy everything over, although the upload took a day or so, and it wasn't clear at first if everything was syncing correctly. (I also had to make sure not to sync the photo library on my other machines which had the Drive app installed.)<br /><br /><b>Managing photos</b>&nbsp;in the cloud still kind of sucks.&nbsp;I'm not happy with any of the cloud-based photo library management solutions that I've found. I have a Flickr Pro account which I use for sharing select pictures with family and friends, but I don't feel comfortable uploading all of my photos to Flickr. I could use Google+, however, it's more focused on sharing rather than large library management. I am not sure what is going on with Picasa these days. Dropbox is another option, which I use for general files, but its photo management is pretty rudimentary as well. For now I'm going to make do with the bare-bones photo support in Google Drive and think about a better way to manage this. What's cool is that I already take all of my photos on my phone which automatically syncs then to both Google Drive and Dropbox, so there's never a need to physically plug the phone in to anything.<br /><br /><b>Editing plain text files</b>&nbsp;is -- surprisingly -- kind of hard. About the only use I have for plain text files (apart from coding) anymore is writing paper reviews -- I read a PDF in one window; fill in the plain-ASCII review form for <a href=\"http://read.seas.harvard.edu/~kohler/hotcrp/\">HotCRP</a> in the other. There are a couple of Chrome extensions with bare-bones text editors, but it's a far cry from a full-fledged editor. I am experimenting with <a href=\"https://chrome.google.com/webstore/detail/neutron-drive/lanjfnanlbolmgmnchmhfnicfefjgnff?utm_source=chrome-ntp-launcher\">Neutron Drive</a>, which is a pretty cool editor/IDE Chrome Extension which uses Google Drive in the backend. Maybe I'll have to change my habits and just fill in my reviews in HotCRP directly (see above about not being able to get any work done offline).<br /><br /><b>Where to keep my really private stuff?</b>&nbsp;By which I mean porn, of course. Or tax returns. Or anything I don't want (or can't) store in any of the cloud services. <a href=\"http://venturebeat.com/2012/08/19/cloud-restrictions-porn-xxx/\">This article from VentureBeat</a> does a good job at summarizing the policies of the popular cloud storage providers, but the upshot is that all of them have some mechanism to either take down objectionable content or report it to law enforcement.<br /><br />What I'd really like is to set up a \"private cloud\", perhaps running a server at home which I could then access (securely) over the web. There are several solutions for private encrypted cloud storage out there (like <a href=\"http://www.haystacksoftware.com/arq/\">Arq</a> and <a href=\"http://www.duplicati.com/home\">Duplicati</a>), but most of them require some form of specialized client (which won't work on ChromeOS any time soon). I guess I could run a WebDAV server or something on a local box or even a machine in the cloud which I could access through the browser. Still, I'm not sure what to do about this yet. It seems insane to me that it's 2013 and we still don't know how to get file sync right.<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5398246669487114845/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/moving-my-life-to-cloud.html#comment-form") (title . "33 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5398246669487114845"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5398246669487114845"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/moving-my-life-to-cloud.html") (title . "Moving my life to the cloud"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s72-c/2250488434_57b8fe59bf_o.jpg") (height . "72") (width . "72"))) (thr:total nil "33")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7911286016598587903") (published nil "2013-02-27T06:37:00.003-08:00") (updated nil "2013-02-27T06:37:45.242-08:00") (title ((type . "text")) "Grad students: Learn how to give a talk") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I've been to roughly a hundred academic conferences and listened to thousands of talks, mostly by grad students. Over the years, the quality of the speaking and presentations has not gotten any better -- if anything, it's gotten worse. A typical grad student talk is so horribly bad, and it's surprising how little effort is put into working on presentation and speaking skills, especially given how important this skill is for academics.<br /><br />Grad students need to learn how to give good, clear, compelling presentations. Especially those who think they want to be professors one day.<br /><br />It is difficult to overstate how important presentation skills are for academics. This is about much more than \"being a good teacher\" (which is a nice trait to have, but not actually that important for an academic's career in the long run). There is a <b>huge</b>&nbsp;division between the professors who are influential leaders, and those who are also-rans. In almost all cases that I can think of, the professors who are very successful are also good speakers, and good communicators overall. They can give good, clear, funny talks. They can engage in meaningful conversations at a technical level and at a personal level. They have a strong command of English and can use the language effectively to communicate complex ideas. So I claim that there is a strong correlation between good communication skills and overall research impact.<br /><br />In some sense, a <b>professor's job is to communicate the research ideas being done in their group</b>. Although grad students often give the conference talks, professors give countless other talks at other universities, companies, workshops, and elsewhere. The professors write the grant proposals, and often the papers (or good chunks of them) as well. Once you're a professor, it matters a lot less how good of a hacker you are -- your job is to be the PR rep.<br /><br />So it's surprising that grad students generally receive no formal training in presentation skills. A typical grad student might get three or four opportunities to give conference talks during their Ph.D., but this is hardly enough practice to hone their skills. Acting as a TA or giving \"practice talks\" isn't much help either. I honestly don't know how to fix this problem, short of running a course specifically on giving good presentations, which sounds like a drag -- but might be necessary.<br /><br />The language barrier is a big part of the problem. Students who do not have English as their first language are almost invariably worse at giving talks than those who are native speakers, and students from Asia tend to be worse than those from Europe. (In academic Computer Science, English is the only language that matters.) But it's more than just command of the language -- it's about being expressive, funny, charismatic. The grad student who stands frozen in place and reads off their slides might speak English perfectly well, but that doesn't make them a good speaker.<br /><br />It's also true that grad students are often \"sized up\" at conferences based on their speaking skills. If you can give a good talk at a conference, you'll get the attention of the professors who will be looking at your faculty job application later. Likewise, if your talk sucks, it's going to leave a bad impression (or, at best, you'll be forgettable).<br /><br />So, please, grad students: If you're serious about pursuing an academic career, hone your presentation skills. This stuff matters more than you know.</div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7911286016598587903/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/02/grad-students-learn-how-to-give-talk.html#comment-form") (title . "15 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7911286016598587903"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7911286016598587903"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/02/grad-students-learn-how-to-give-talk.html") (title . "Grad students: Learn how to give a talk"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "15")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1172852699003339156") (published nil "2013-01-27T14:49:00.000-08:00") (updated nil "2013-01-27T15:44:20.216-08:00") (title ((type . "text")) "My mobile systems research wish list") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Working on mobile systems at Google gives me some insight into what the hard open problems are in this space. Sometimes I am asked by academic researchers what I think these problems are and what they should be working on. I've got a growing list of projects I'd really like to see the academic community try to tackle. This is not to say that Google isn't working on some of these things, but academics have fewer constraints and might be able to come up with some radically new ideas.<br /><i><br /></i><i>Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer, or anyone else. In particular, sending a grant proposal to Google on any of the following topics will by no means guarantee it will be funded!</i><br /><i><br /></i>First, a few words on what I think academics <b>shouldn't</b>&nbsp;be working on. I help review proposals for Google's&nbsp;<a href=\"http://research.google.com/university/relations/research_awards.html\">Faculty Research Awards</a>&nbsp;program, and (in my opinion) we get too many proposals for things that Google can do (or is already doing) already -- such as energy measurements on mobile phones, tweaks to Android or the Dalvik VM to improve performance or energy efficiency, or building a new mobile app to support some specific domain science goal (such as a medical or environmental study). These aren't very good research proposal topics, in my opinion -- they aren't far-reaching enough, and aren't going to yield a dramatic change five to ten years down the line.<br /><br />I also see too many academics doing goofy things that make no sense. A common example these days is dusting off the whole peer-to-peer networking area from the late 1990s and trying to apply it in some way to smartphones. Most of these papers start off with the flawed premise that using P2P would help reduce congestion in the cellular network. A similar flawed argument is made for some of the \"cloud offload\" proposals that I have seen recently. What this fails to take into account is where cellular bandwidth is going: About half is video streaming, and the other half things like Web browsing and photo sharing. None of the proposed applications for smartphone P2P and cloud offload are going to make a dent in this traffic.<br /><br />So I think it would help academics to understand what the real -- rather than imagined -- problems are in mobile systems. Some of the things on my own wish list are below.<br /><br /><b>Understanding the interaction between mobile apps and the cellular network</b>. It's well known that cellular networks weren't designed for things like TCP/IP, Web browsing, and YouTube video streaming. And of course most mobile apps have no understanding of how cellular networks operate. I feel that there is a lot of low-hanging fruit in the space of understanding these interactions and tuning protocols and apps to perform better on cellular networks. Ever noticed how a video playback might stall a few seconds in when streaming over 3G? Or that occasionally surfing to a new web page might take a maddening few extra seconds for no apparent reason? Well, there's a lot of complexity there and the dynamics are not well understood.<br /><br />3G and 4G networks have very different properties from wired networks, or even WiFi, in terms of latency, the impact of packet loss, energy consumption, and overheads for transitioning between different radio states. Transport-layer loss is actually rare in cellular networks, since there are many layers of redundancy and HARQ that attempt to mask loss in lower layers of the network stack. This of course throws TCP's congestion control algorithms for a loop since it typically relies on packet loss to signal congestion. Likewise, the channel bandwidth can vary dramatically over short time windows. (By the way, any study that tries to understand this using simple benchmarks such as bulk downloads is going to get it wrong -- bulk downloads don't look anything like real-world mobile traffic, even video streaming, which is paced above the TCP level.)<br /><br />The lifetime of a cellular network connection is also fairly complex. Negotiating a dedicated cellular channel can take several <i>seconds</i>, and there are many variables that affect how the cell network decides which state the device should be in (and yes, it's usually up to the network). These parameters are often chosen to balance battery lifetime on the device; signaling overhead in the cell network; user-perceived delays; and overall network capacity. You can't expect to fix this just by hacking the device firmware.<br /><br />To make things even more hairy, mobile carriers often use different network tuning parameters in different markets, based on what kind of equipment they have deployed and how much (and what kinds) of traffic they see there. So there is no one-size-fits-all solution; you can't just solve the problem for one network on one carrier and assume you're done.<br /><br /><b>Understanding the impact of mobile handoffs on application performance</b>. This is an extension to the above, but I haven't seen much academic work in this space. Handoffs are a complex beast in cellular networks and nobody really understands what their impact is on what a user experiences, at least for TCP/IP-based apps. (Handoff mechanisms are often more concerned with not dropping voice calls.) Also, with the increased availability of both WiFi and cellular networks, there's a lot to be done to tune when and how handoffs across network types occur. I hate it when I'm trying to get driving directions when leaving my house, only to find that my phone is trying in vain to hang onto a weak WiFi connection that is about to go away. Lots of interesting problems there.<br /><br /><b>Why doesn't my phone last all day?</b>&nbsp;This is a hot topic right now but I think the research community's approach tends to be to change the mobile app SDK, which feels like a non-starter to me. Unfortunately, the genie is out of the bottle with respect to mobile app development, in the sense that any proposal that suggests we should just get all of the apps to use a new API for saving energy is probably not going to fly. In the battle between providing more power and flexibility to app developers versus constraining the API to make apps more efficient, the developer wins every time. A lot of the problems with apps causing battery drainage are simply bugs -- but app developers are going to continue to have plenty of rope to hang themselves (or their users) with. There needs to be a more fundamental approach to solving the energy management issue in mobile. This can be solved at many layers -- the OS, the virtual machine, the compiler -- and understanding how apps interact with the network would go a long way towards fixing things.<br /><br /><b>Where is my data and who has access to it?</b>&nbsp;Let's be frank: Many apps turn smartphones into tracking devices, by collecting lots of data on their users: location, network activity, and so forth. Some mobile researchers even (unethically) <a href=\"http://matt-welsh.blogspot.com/2013/01/the-ethics-of-mobile-data-collection.html\">collect this data for their own research studies</a>. Once this data is \"in the cloud\", who knows where it's going and who has access to it. Buggy and malicious apps can easily leak sensitive data, and currently there's no good way to keep tabs on what information is being collected, by whom, for what purpose. There's been some great research on this (including the unfortunately-named <a href=\"http://appanalysis.org/\">TaintDroid</a>) but I think there's lots more to be done here -- although we are sadly in an arms race with developers who are always finding new and better ways to track users.<br /><br /><b>What should a mobile web platform look like 10 years from now?</b>&nbsp;I think that the research community fails to appreciate the degree of complexity and innovation that goes into building a really good, fast web browser. Unfortunately, the intersection between the research and web dev communities is pretty low, and most computer scientists think that JavaScript is a joke. But make no mistake: The browser is basically an operating system in its own right, and is rapidly getting features that will make it possible to do everything that native apps can do (and more). On the other hand, I find the web development community to be pretty short-sighted, and unlikely to come up with really compelling new architectures for the web itself. Hell, the biggest breakthroughs in the web community right now are a <a href=\"http://www.w3.org/TR/css3-flexbox/\">sane layout model for CSS</a>&nbsp;and <a href=\"http://www.webrtc.org/\">using sockets from JavaScript</a>.&nbsp;In the mobile space, we are stuck in the stone ages in terms of exploiting the web's potential. So I think there is a lot the research community can offer here.<br /><br />In ten years, the number of mobile web users will outstrip desktop web users by an order of magnitude. So the web is going to be primarily a mobile platform, which suggests a bunch of new trends: ubiquitous geolocation; users carrying (and interacting with) several devices at a time; voice input replacing typing; using the camera and sensors as first-class input methods; enough compute power in your pocket to do things like real-time speech translation and machine learning to predict what you will do next. I think we take a too-narrow view of what \"the web\" is, and we still talk about silly things like \"pages\" and \"links\" when in reality the web is a full application development platform with some amazing features. We should be thinking now about how it will evolve over the next decade.<br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1172852699003339156/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/my-mobile-systems-research-wish-list.html#comment-form") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1172852699003339156"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1172852699003339156"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/my-mobile-systems-research-wish-list.html") (title . "My mobile systems research wish list"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "5")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-8573558845084480835") (published nil "2013-01-22T21:56:00.001-08:00") (updated nil "2013-01-22T21:56:17.454-08:00") (title ((type . "text")) "The ethics of mobile data collection") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s1600/Screenshot_2013-01-22-21-50-22.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s320/Screenshot_2013-01-22-21-50-22.png\" width=\"192\" /></a></div>The mobile computing and networking research communities need to start paying closer attention to the data collection practices of researchers in our field. Now that it's easy to write mobile apps that collect data from real users, I'm going to argue that computer science publication venues should start requiring authors to <b>document whether they have IRB approval</b> for studies involving human subjects, and how the study participants were consented.&nbsp;This documentation requirement is standard in the medical and social science communities, and it makes sense for computer science conferences and journals to do the same. Otherwise I fear we run the risk of accepting papers that have collected data unethically, hence rewarding researchers for not adequately protecting the privacy of the study participants.<br /><br />I am often asked to review papers in which the authors have deployed a mobile phone app that collects data about the app's users. In some cases, these apps are <b>overtly used for data collection</b> and the users of the app are told how this data will be collected and used. But I have read a number of papers in which <b>data collection has been embedded into apps that have some other purpose</b> -- such as games or photo sharing. The goal, of course, is to get a lot of people to install the app, which is great for getting lots of \"real world\" data for a research paper. In some cases, I have downloaded the app in question and installed it, only to discover that the app never informs the user that it is collecting sensitive data in the background.<br /><br />The problem is, <b>such practices are unethical</b> (and possibly illegal) according to federal requirements for protecting the privacy for human subjects in a research study. Even if there is some fine print in the app the use of data for a research study, it's not clear to me that in all cases the researchers have actually gone through the federally-mandated Institutional Review Board approval process to collect this data.<br /><br />Unfortunately, not many computer scientists seem to be familiar with the IRB approval requirement for studies involving human subjects. Our field is pretty lax about this, but I think it's time we started taking human subjects approval more seriously.<br /><br />It is now dead simple to develop mobile apps that collect <b>all kinds of data about their users</b>. On the Android platform, an&nbsp;app can collect data such as the device's GPS location; which other apps are running and how much network traffic they use; what type of wireless network the device is using; the device manufacturer, model, and OS version; which cellular carrier the device uses; the device's battery level; and the current cell tower ID. Similar provisions exist on iOS and other mobile operating systems. With rooted devices, it's possible to collect even more information, such as a complete network packet trace and complete information on which websites and apps have been used.<br /><br />Put together, this data can yield a rich picture of the usage patterns, mobility, and network performance experienced by a mobile user. It is very tempting for researchers to exploit this capability, and it's easy to get thousands of people to install your app by releasing it on Google Play or the Apple App Store. However, I have very little confidence that most researchers are adhering to legal and ethical guidelines for collecting such data -- I bet the typical scenario is that the data ends up being logged to an unsecured computer under some grad student's desk.<br /><br />So,&nbsp;<b>what is an IRB?</b> In the US and many other countries, any institution that receives federal funding must ensure that research studies involving human subjects protect the rights and privacy of the participants in such studies. This is accomplished through Institutional Review Board review which much occur&nbsp;<b>prior to the study taking place</b>. The purpose of the IRB is to ensure that the study meets certain guidelines for protecting the privacy of the study participants. The <a href=\"http://humansubjects.stanford.edu/\">Stanford IRB Website</a> has some good background about the purpose of IRB approval and what the process is like. The principles underpinning IRB review were set forth in the <a href=\"http://www.wma.net/en/30publications/10policies/b3/\">Declaration of Helsinki</a>, which has been the basis for many countries' laws regarding protection of human subjects.<br /><br />Failing to get IRB approval for a research study is serious business. In the medical and social science communities, failing to get IRB approval is tantamount to faking data or plagiarism. The <a href=\"http://retractionwatch.wordpress.com/?s=irb\">Retraction Watch blog</a> has a long list of cases in which published articles have been retracted due to lack of IRB approval. In those fields, this kind of forced retraction can destroy an academic's career.<br /><br />Documenting IRB approval and informed consent for study participants is becoming standard practice in the medical and social science communities. For example, the submission guidelines to the <i>Annals of Internal Medicine</i> require an <a href=\"http://annals.org/public/authorsinfo.aspx#research-publication-ethics\">explicit statement from authors</a>&nbsp;regarding IRB approval:<br /><blockquote class=\"tr_bq\"><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">\"The authors must confirm review of the study by the appropriate institutional review board or affirm that the protocol is consistent with the principles of the Declaration of Helsinki (see&nbsp;</span><a href=\"http://annals.org/public/authorsinfo.aspx#worldmedicalassociation\" style=\"background-color: white; border: 0px; color: #006699; cursor: pointer; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; font: inherit; line-height: 17px; margin: 0px; padding: 0px; text-decoration: initial; vertical-align: baseline;\">World Medical Association</a><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">). If the authors did not obtain institutional review board approval before the start of the study, they should so state and explain the circumstances. If the study was exempt from review, the authors must state that such exemption complied with the policy of their local institutional review board. They should affirm that study participants gave their informed consent or state than an institutional review board approved conduct of the research without explicit consent from the participants. If patients are identifiable from illustrations, photographs, pedigrees, case reports, or other study data, the authors must submit the release form for each such individual (or copies of the figures with the appropriate release statement) giving permission for publication with the manuscript. Consult the Research section of the&nbsp;</span><a href=\"http://www.acponline.org/ethics/ethicman.htm\" style=\"background-color: white; border: 0px; color: #006699; cursor: pointer; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; font: inherit; line-height: 17px; margin: 0px; padding: 0px; text-decoration: initial; vertical-align: baseline;\">American College of Physicians Ethics Manual</a><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">&nbsp;for further information.\"</span></blockquote><br />But yet, in computer science, we tend not to take this process very seriously. I suspect most computer scientists have never heard of, or dealt with, their institution's IRB. I was surprised to see that CHI, the top conference in the area of human-computer interaction (in which user studies are commonplace), says nothing in its&nbsp;<a href=\"http://chi2013.acm.org/authors/call-for-participation/papers-notes/\">call for papers</a>&nbsp;about requiring IRB approval disclosure for human subjects studies -- perhaps the practice of obtaining IRB approval is already widespread in that community, though I doubt it.<br /><br />Why do I think we should require authors to document IRB approval? For two reasons. First, to <b>raise awareness</b> of this issue and ensure that authors are aware of their obligations before they submit a paper to such venues. Second, to <b>prevent paper reviewers from having to make a judgment call</b>&nbsp;when a paper is unclear on whether and how a study protects its participants. The whole point of an IRB is to front-load the approval process before the research study even begins, well before a paper gets submitted. The nature of a research project may well change depending on the IRB's requirements for protecting user privacy.<br /><br />To give an example of how this can be done properly, colleagues of mine at University of Michigan and University of Washington are developing a mobile app for collecting network performance data, called <a href=\"http://www.mobiperf.com/\">MobiPerf</a>. The PIs have IRB approval for this study and the app clearly informs the users that the data will be collected for a research study when the app first starts; clicking \"No thanks\" immediately exits the app. Furthermore, there is a <a href=\"http://www.mobiperf.com/privacy\">fairly detailed privacy statement</a>&nbsp;and EULA&nbsp;on the app's website, explaining exactly what data is collected. It's true that going through these steps required more effort on the part of the researchers, but it's not just a good idea -- it's the law.<br /><br /><i>This is my personal blog. The views expressed here are mine alone and not those of my employer.</i><br /><br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/8573558845084480835/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/the-ethics-of-mobile-data-collection.html#comment-form") (title . "13 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/8573558845084480835"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/8573558845084480835"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/the-ethics-of-mobile-data-collection.html") (title . "The ethics of mobile data collection"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s72-c/Screenshot_2013-01-22-21-50-22.png") (height . "72") (width . "72"))) (thr:total nil "13")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-4963230955587673096") (published nil "2013-01-03T21:58:00.005-08:00") (updated nil "2013-01-04T10:20:07.939-08:00") (title ((type . "text")) "How to get a faculty job, Part 3: Negotiating the offer") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is the third (actually fourth) part in this series on how to get a faculty job in Computer Science. <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1</a> and <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b</a> dealt with the application process, and <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html\">Part 2</a> was about interviewing. In this post, I'll talk about what happens when you get a job offer and how to negotiate when you have multiple offers.<br /><br />There is often a long and painful wait from the time you complete the interview until you hear back from the school about whether they will be making you an offer. This is generally because all (or most) of the candidates need to complete interviews before the final hiring decisions are made, and the actual offer needs to be approved by the department or school administration before the candidate can be given the good news. Depending on how early you interview, this wait can be on the order of a month or two. (Generally, candidates interview between February and April, and offers start getting made around April or May.)&nbsp;Sometimes a school won't contact you at all after the interview, and after a while you figure you're not getting an offer after all. Sometimes they contact you fairly quickly to deliver the <i>coup de grâce</i>, which is greatly appreciated since then you can at least stop holding out hope.<br /><br />As I pointed out in the previous post on interviewing, it is a very good idea&nbsp;to <b>keep in touch with schools you are really interested in</b> and let them know where you are in the process, and especially if you have offers from other schools. Usually this can be done via informal email to your host when you interviewed. The last thing a department wants is for their top candidate to take a job elsewhere before they have a chance to make an offer. So let people know what's happening and try to find out how your top choices are doing in terms of making offers.<br /><br />There are three kinds of offers: (1) Straight-up offers; (2) \"Offers for offers\", and (3) Second-choice offers. I'll explain each below.<br /><br /><b>Straight-up offers</b><br /><b><br /></b>The best possible outcome is that you get a call from your host or the hiring committee chair who says, \"I'm happy to let you know that we're going to be making you an offer.\" At this stage, you probably will not get into any of the details about salary, research funding, and the like -- that comes later.<br /><br />Most of the time, departments will offer to <b>fly you out for a second visit</b>, sometimes with your spouse or significant other, so you can spend time getting to know the department, university, and town. This is much more relaxed than the interview, and is a great way to get to know your potential future colleagues under less stressful conditions. A second visit can be <b>very</b>&nbsp;important for deciding where to kick off your career as a faculty member: you will learn many things that you might not have had time to get into when you interviewed. In particular, you are going to care much more about things like housing, schools for your kids, quality of life, and other factors that you didn't get a chance to judge during the interview. Definitely do a second visit if you are serious about a school.<br /><br /><b>Offers for offers</b><br /><b><br /></b>The dilemma faced by many departments is that they have several really good candidates but only one (or maybe two) open positions. If a department blindly makes an offer to its top candidate, but that person is not that serious about taking the job there, then their second- or third-choice candidates (who might be just as good!) might end up taking offers elsewhere while the first candidate sits on the offer in the hopes of using it as a point of negotiation with another school. Also keep in mind that schools generally <b>cannot</b>&nbsp;have multiple outstanding offers for a single position.<br /><br />So, sometimes a department won't make an outright job offer, but will instead feel you out to find out if you're really serious about taking a job there, a so-called \"offer for an offer\". The idea is that the department can (and will!) make a formal offer, but only after determining that you really want it.<br /><br />From a purely selfish perspective, it might seem that your best strategy is to amass as many offers as you can so you have the most leverage when negotiating salary and other aspects of the compensation. But this also puts the department in a real bind if you end up sitting on the offer without any real intention of taking it. I don't think pissing a bunch of people off (even at a place where you don't take a job) is a good strategy for anyone trying to jumpstart an academic career.<br /><br />Some schools do ridiculous things like <b>exploding offers</b>, which expire after a set time, to avoid the situation where someone sits on an offer for too long. Given that schools are rarely well-synchronized in their recruiting schedules, this can be disastrous: Say you get an offer that explodes after two weeks, but you haven't finished interviewing yet and still haven't heard from most of the schools. The last thing you want is to be forced into accepting a job at a school because the offer was going to time out.&nbsp;By no means should you be forced to make a decision on taking a faculty job before you have had a chance to evaluate all of your options. Personally, I think schools that do this are being idiotic and should think seriously about what kind of people they are going to be successful recruiting though such tactics.<br /><br />I once heard a case of a hiring committee which couldn't make up its mind, so they called their top five candidates and said, \"We have two offers available, the first two people who call us to claim the offer will get one, but it will explode in two weeks.\" I think this kind of strategy is a complete load of crap, and the hiring committee should be ashamed of itself for not being able to commit to their top one or two candidates and ride it through. But I digress.<br /><br /><b>Second-choice offers</b><br /><b><br /></b>It is often the case that you aren't the school's top choice, but you are their second (or third) choice for the position. Sometimes a school will tell you this outright: That they would love to make you an offer, assuming that their first-choice candidate declines them. This can sting, of course, and I question the wisdom of telling candidates this much information. Most people don't want to take a job somewhere where they feel as though they were the consolation prize. Sometimes, you find out through the grapevine that someone else already has an offer from that school, but later on you get a call with an offer of your own (and it just so happens that the other candidate recently accepted a job elsewhere). At some point you have to swallow your pride and appreciate that in a few months, nobody will remember (or care) that you weren't the first choice, and you got an awesome job at a good school, and that's all that matters. The point is that <b>an offer's an offer</b>, so don't worry too much if you weren't the department's original top choice.<br /><br />From sitting on the faculty hiring committee at Harvard, I can vouch for how hard it can be for a school to narrow its choices to one or two people in a field of really good candidates. Often the choice of who to make the first offer to is arbitrary, based on some general vibe that you think the person might be more or less inclined to accept the job. A department might have two or three candidates who are all more or less equal but they have to make a first choice somehow.<br /><br /><b>What's in an offer?</b><br /><b><br /></b>In most cases, the initial job offer is verbal and you won't get a formal, written job offer until much later, based on extensive discussions with the dean or department chair about what you expect the offer letter to say. There are several components to most faculty job offers that should be (eventually) spelled out in writing:<br /><ul style=\"text-align: left;\"><li><b>The salary</b> (of course). Usually salary is paid for 9 months of the academic year, with the expectation that you will pay the other 3 months out of a research grant. So if the offer is $100k for 9 months, that's really a 12-month salary of $133k.</li><li><b>Summer salary support</b>. Since most junior faculty come in with no research grants, usually a department will offer to pay one or two summers' worth of your salary until you get grants of your own.</li><li><b>Teaching relief.</b>&nbsp;At many schools, incoming junior faculty are given a semester of teaching relief which they can take at some point in the first couple of years. This gives you a little more free time to kick start your research and lessens the load of transitioning into the new job. My strong recommendation is to <b>wait until your second or third term</b>&nbsp;before taking teaching relief: Teaching a course (especially a graduate seminar) your first term on the job is a great way of recruiting students to your research group, and you're so screwed anyway the first semester as a new faculty member that teaching relief is hardly beneficial until you get your research group up to speed.</li><li><b>Graduate student support.</b>&nbsp;Many schools will provide funding to support one or two grad students for a couple of years, to help seed your research group. Of course, you still have to identify and recruit the students (a topic for a future blog post). Keep in mind that grad students aren't cheap. In addition to their paltry salary, the student's tuition and fringe benefits need to be paid for. Typically a PhD student will cost around $75K year all in, so support for a couple of students is a lot of money.</li><li><b>Research support.</b>&nbsp;This can take many forms depending on the school, but generally this is money (in some form) to help you get your research going in lieu of any grants. The best form of this is an outright <b>slush fund</b>&nbsp;which you can use to pay for anything related to your research: computers, equipment, students, summer salary, travel, conference registrations, pizza parties for the team, you name it. At Harvard, my \"startup package\" was in the six figures, but this is unusual; I think that most schools do something in the $20K range, sometimes less. (If the school is offering to pay for students or summer salary separately, you have to factor this in as well.) In many cases, a department will separately offer you some amount of <b>equipment</b>&nbsp;(such as a fund to buy a computers and laptop) in addition to, or in lieu of, a general slush fund. It depends very much on how the school manages its finances and chooses to account for things.&nbsp;Some schools without deep pockets may only offer you a hand-me-down workstation and a few hundred bucks to offset the cost of a laptop. It varies a lot.</li><li><b>Lab space. </b>I don't know how common it is for a job offer to include an explicit provision for lab space (that is, not including your own office). In many departments, grad student space is a shared resource and there is not usually a need for dedicated labs for specific faculty. However, depending on the nature of your research, you might need specialized lab space -- for example, if you are developing a <a href=\"http://www.youtube.com/watch?v=UQzuL60V9ng\">swarm of quad-copters</a>&nbsp;you probably need some dedicated space for that.</li><li><b>Other perks.</b>&nbsp;It is common for the department to pay for (or offset) your moving expenses, especially if you are moving from far away. An offer also might include things like temporary housing when you first move. Again, this varies a lot.</li></ul><div><b>How to negotiate</b></div><div><b><br /></b>Okay, so let's assume you're lucky enough to have a couple of faculty job offers in hand. What do you need to keep in mind?<br /><br />First things first. <b>Only negotiate with schools you are really serious about.</b>&nbsp;It is a waste of everyone's time (and patience) if you feign excitement about a school just to get them to bump up your offer and use that as leverage against another school. People will know if you are bullshitting them. And keep in mind that even if you don't take a job somewhere, those people you run the risk of pissing off will continue to be important academic colleagues. One day they might be called upon to write tenure review letters for you. The point is you want to avoid making enemies.<br /><br />Secondly, <b>you can't compare industry and academic offers.</b>&nbsp;At all. Compensation from industry is going to be <i>much</i>&nbsp;higher (especially over time) than any academic offer, when you factor in salary, bonuses, stock options, and the steeper increase year over year compared to a university job. So you can't expect to use an an industry offer as leverage to negotiate higher compensation at a university.<br /><br />At many universities, the <b>salary is non-negotiable</b>&nbsp;as it is based on a standard scale that (in most cases) can't be changed. You might be able to negotiate a small salary increase if another school is offering much more, but this seems unlikely to me. Keep in mind that the range of starting salaries for junior faculty across different schools (at least among top-ranked research institutions) is pretty tight, so there's not much wiggle room there anyway. You can ask but don't be surprised if you're told that the salary is fixed.<br /><br />If you can, try to <b>get your startup package to be all or mostly cash</b>. By \"cash\" I mean funding that can be used to pay for anything: students, equipment, travel, whatever. If your startup is segmented into X dollars for students, Y dollars for equipment, and so forth, that can constrain you down the line, if, for example, you end up wanting to hire more students than you expected or don't need as much travel funding. Fungibility is good.<br /><br />It's a good idea to have a <b>rough idea of how much you need</b>&nbsp;to get started before you start talking hard numbers. When I did my faculty job search, I had in mind a research agenda involving building out an experimental workstation cluster as well as some other equipment needs, travel to several conferences in my first couple of years, and support for two students. I made up a quick and dirty spreadsheet to estimate how much all of this would cost and used that as the starting point for talking about the size of the startup package. If you have no idea how much you expect to spend -- and what you might spend it on -- you will have a hard time making a convincing case that you need more than what's being offered.<br /><br />If you have a&nbsp;<b>two-body problem</b>&nbsp;(which is probably deserving of its own blog post), find out what, if anything, the university can do to help your partner land a job in the area. You may be surprised. When I was on the job market, my wife was finishing up medical school and we were going to make a decision about where to go in large part based on whether she would be able to get a good residency position. Although nobody could guarantee my wife a residency slot, the schools that were recruiting me helped set up meetings with a bunch of people to learn more about the programs in each area so we got a good sense of what her options were like. It is also not uncommon for universities to facilitate positions for spouses and partners of faculty they are trying to recruit -- many things are possible.<br /><br />If you have kids, you should by all means <b>try to negotiate for a spot in the university's day care center</b>. The waiting lists for day care can be years long, but special exceptions can often be made when a school is trying to recruit a new faculty member. This is not always possible but it's worth asking about.<br /><br />Finally, <b>don't be greedy.</b>&nbsp;This is not about maximizing your compensation and startup package and pissing everyone off in the process.&nbsp;Your goal in negotiating the offer is&nbsp;<b>not to squeeze every penny you can out of them</b>&nbsp;-- instead, it's to reach a point where you feel confident that the compensation and startup package will allow you to be happy and successful in your new job.</div><div><br /></div><div><b>So which offer should you take?</b><br /><b><br /></b>Although I'm sure it happens, I would hope that nobody would take a faculty job just because it paid the most or had the largest startup package. If your only goal in life is to maximize your compensation, trust me: You do not want to be a professor. There are many, many other factors that are <b>more important than the size of the offer</b>: The culture and quality of the department, the students, the physical location, the quality of life ... the list goes on and on. In steady state, you're going to be a (relatively) poor academic, and struggling to get research grants just like everyone else. The initial salary and startup package can give you a boost, but it mostly comes out in the wash -- the absolute numbers won't matter much beyond the first year or so. So focus on finding the job that will make you happiest, not just that which pays the most.</div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/4963230955587673096/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/how-to-get-faculty-job-part-3.html#comment-form") (title . "11 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4963230955587673096"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4963230955587673096"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/how-to-get-faculty-job-part-3.html") (title . "How to get a faculty job, Part 3: Negotiating the offer"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "11")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1171799036408860525") (published nil "2012-12-27T14:42:00.002-08:00") (updated nil "2012-12-27T14:51:20.448-08:00") (title ((type . "text")) "How to get a faculty job, Part 2: The interview") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is the second (actually, third!) part of a several-part series on getting a faculty job in Computer Science. In <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1</a>, I talked about the application process. In <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b</a>, I gave some details about how hiring committees decide whom to bring in for interviews. In this part I'll talk about what it takes to nail the interview itself.<br /><br />Faculty job interviews are generally one or two (long) days. The main components are the all-importan<b>t</b>&nbsp;job talk; meeting with countless faculty, deans, and students; and usually some kind of fancy dinner. All of these components are essential to getting a job offer.<br /><br />The process of interviewing is <b>exhausting</b>. Two full days of talking with people can really wear you out, especially since you need to be \"on\" all the time. As I'll explain below, any kind of dinner or social outing is not in fact a chance to take a break, since you're being evaluated during those times as well.<br /><br /><b>Planning travel:</b>&nbsp;Usually, schools will pay for your travel and hotel expenses for the interview, though more often than not they expect you to pay the costs up front and they will reimburse you later. Get a credit card with great rewards since you'll be racking up the points over the course of several faculty interviews. Be prepared to lay out several thousand dollars for each interview trip as reimbursements can take a couple of months to process.<br /><br />If you are interviewing at several schools, try to <b>avoid doing more than two interviews back to back.</b>&nbsp;Each of these trips takes a lot out of you and it's good to get home to recharge, even if just for a couple of days, in between trips. Also, <b>don't plan on getting any real work done</b>&nbsp;during the interview season. If your thesis committee is expecting a draft, try to get it off your plate before you start interviewing -- that way the pressure is off. By no means should you be trying to meet a paper deadline while interviewing. (Look at it this way: By the time you're interviewing, it's too late for any new publications on your resume to affect the outcome of the job search.)<br /><br /><b>What to bring and how to dress:</b>&nbsp;You'll be giving a job talk everywhere which almost always means using a laptop to present. Get a <b>lightweight</b>&nbsp;laptop since you'll be lugging it everywhere, and will rarely have a chance to dump it somewhere as you are whisked from meeting to meeting during the interview. Always have your slides -- preferably in a universal format, like PDF -- on a USB stick as a backup in case you can't get your laptop to work with the projector. Also, under no circumstances should you assume that your laptop will have Internet access during the talk -- too many schools have their WiFi locked down and getting guest access can be difficult.<br /><br />The <b>dress code</b>&nbsp;for job interviews is a topic of much discussion, and I know some people will disagree with me here: But dress formally. For guys, this means a suit <i>and</i>&nbsp;tie, with nice shoes and a nice belt. For women, this generally means a business suit as well, though there is a wider range of options for women who want to dress smart.<br /><br />Why should you dress formally for an interview? Well, duh, it's a job interview. You want to be seen by your future colleagues as a <b>professor</b>, not just another slacker grad student. You also want to show your potential employer that you are taking the process seriously. At many schools you may have the occasion to meet with a dean or other such muckety-muck who might be the person to sign off on a job offer to you. You want them to see you as a mature professional. I see <b>absolutely no disadvantages</b>&nbsp;to dressing up well for a job interview, and <b>many potential pitfalls</b>&nbsp;for under-dressing.<br /><br />Yes, you will feel silly at first, since (with rare exception) you will be the only person wearing a suit that you will meet during the interview. People will crack jokes, like \"wow! you're really dressed up!\" -- my typical response to that was \"er, but I always dress this way\" which would get a laugh.<br /><br />It is best to <b>bring two suits</b>&nbsp;and alternate them. You never know when you might spill something on one of your suits, so you need a backup. This also gives you a chance to drop one of the suits off with the hotel to get it dry-cleaned while you're interviewing. Also, <b>always bring your luggage with you on the plane: never check it</b>. You cannot risk your luggage getting lost and being forced to interview in a t-shirt and jeans. I used a nice tri-fold suit bag which was compact enough to hold both suits and fit in the overhead bin on any plane.<br /><br /><b>The job talk:</b>&nbsp;This is by far the most important part of the interview. If you give a bad talk there is no chance you will recover and end up with an offer, whereas a few botched one-on-one interviews might not sink you. The job talk serves the dual purpose of presenting your research contributions to the department, as well as showcasing your teaching ability. The talk needs to be extremely well-rehearsed, technically solid, clear, entertaining, engaging, and instructive. It is a tall order. If you can't do this well, then you <b>probably don't want to be a professor</b>, since giving talks and lectures is a huge part of the job.<br /><br />You need to practice your talk, and preferably with an <b>unfamiliar audience</b>&nbsp;-- i.e., not just with people from your research group who already know your work well. Giving a \"pre-job-talk\" talk at another school is ideal, but be careful: if you blow it there you won't get invited for an interview. Doing a dry run at a school where you don't plan to interview would be a good idea.<br /><br />It's important to remember that the job talk is <b>not a talk to people in your area</b>. The people in your area (say, systems or AI) already know your work -- which is why you're interviewing there in the first place. The talk needs to appeal broadly to the rest of the department -- to explain why your work is important, what the key contributions are, and to give them intuition for how to solve hard problems in an area other than their own. Don't worry if the job talk feels a little \"lighter\" than a typical talk you'd give at a conference: You will have plenty of time to get into the hairy details during the one-on-ones.<br /><br /><a href=\"http://www.eecs.harvard.edu/margo/\">Margo Seltzer</a> once suggested breaking the job talk into \"thirds\": The first third lays out the problem space and why it's important; the second third gets into the technical details of your solution (and it's OK to lose some people here, but try not to lose everyone); and the final third lifts back up a level to explain the implications of the work and chart out possible future directions.<br /><br />As an example,&nbsp;<a href=\"http://www.eecs.harvard.edu/~mdw/private/jobtalk.pdf\" style=\"font-weight: bold;\">my job talk slides from 2002 are here.</a>&nbsp;I don't want to suggest that it's the best job talk ever, but I think it's pretty good, and got me a few job offers. I always try to have a joke or funny point sometime early in the talk, which helps break the ice with the audience -- for example, around slide 3 of my talk slides I had a funny story about the poor sysadmin of the USGS website not being able to fix his web server for three hours following an earthquake.<br /><br />Sometimes an interview talk can result in unintended hilarity. When interviewing at MIT, I was asked by <a href=\"http://cseweb.ucsd.edu/~snoeren/\">Alex Snoeren</a> what impact my system design would have on the \"email experience\" of a typical user. I responded, \"I've never had a <i>mail experience</i>&nbsp;before...\"and then suddenly realized the double entendre of what I just said. It took me a few minutes to regain my composure although half the room was cracking up as well.<br /><br /><b>The one on ones:</b>&nbsp;The bulk of the interview consists of a series of one-on-one meetings with faculty, deans, and sometimes students. These range from half an hour to an hour in length each. You rarely get a break during the day, so if you need to use the bathroom or grab a cup of coffee, just ask (everyone is happy to accomodate). Many of the people on your \"loop\" will be on the faculty hiring committee, and <i>everyone</i>&nbsp;(regardless of role) will be asked to provide feedback to the committee on whether they think you should be given an offer. So you have to impress everyone. Yes, this is hard to do.<br /><br />The one on one can take many forms. Usually, you will be asked a bunch of questions about your research, your teaching plans, and future research ideas. You need to <b>spend some time thinking about what you would work on</b> and what kind of research agenda you might pursue as a new faculty member, so you can have a pithy response to these questions. Nobody is going to hold you to it, of course, but you should have at least some half-baked ideas about what would constitute a good research direction when you start the job.<br /><br />Some interviewers will be trying to assess whether you will <b>be able to get tenure</b>&nbsp;at their institution in a few years. Of course it's way too early to make that judgment during a job interview, but if you can't come up with any kind of coherent research plan or agenda that sounds like it will bear fruit, you're going to be in trouble. When I interviewed, I was doing a lot of thinking about how to apply control theory to the management of complex computer systems, which led in all kinds of interesting directions (few of which I ended up actually working on when I got to Harvard). But at least I had plenty to talk about in terms of possible research directions.<br /><br />You should also take the opportunity to learn as much as you can about the interviewer. After all, this is <b>not a one-sided process:</b>&nbsp;you should be evaluating the quality of the department and its faculty as well.&nbsp;When prompted, most professors can easily launch into a twenty-minute lecture on their research, so if you find you don't have a lot to talk about with someone, try to get them to do this. You will learn a&nbsp;<i>lot</i>&nbsp;this way and may realize amazing opportunities for collaboration. For example, while interviewing at Harvard, I was really excited by <a href=\"http://www.eecs.harvard.edu/~parkes/\">David Parkes' research on multi-agent systems</a> -- and he and I ended up collaborating on a couple of projects once I started there.<br /><br />The easiest of these meetings are with faculty in your area, since generally you have some common ground. The hardest are with people in completely different research areas. It is a <b>very good idea to cyberstalk your interviewers</b>&nbsp;before the interview, by Googling their names and learning as much as you can about their research beforehand. You might discover that there is some mutual interest or acquaintance this way, which will give you something to talk about. If you don't know who will be on your loop, ask your host and they can usually send you the schedule in advance. It's impressive when a candidate comes in having done their homework, knowing a bit about the interviewer's research and background. This is not creepy (although if you get into how cute their kids' pictures are on Facebook, you've probably crossed a line).<br /><br />You will invariably meet with someone who was unable to make your job talk, so <b>be prepared to give a 5-to-10 minute rundown</b>&nbsp;on your research, a \"mini job talk\", if you will. You need to have a punchy, clear way to answer the question, \"So, what do <i>you</i>&nbsp;work on?\" My opening line was something like, \"I work on making web servers really fast, and able to stand up to massive overloads.\" This was enough to get a conversation going on the topic and was a problem statement that pretty much everyone could relate to. If instead I had launched into, \"I work on a hybrid event-driven-threaded server architecture combining rate-limited queues and feedback-controlled thread pools\", I would have immediately put about half of my would-be interviewers to sleep.<br /><br />There are, of course, some tactical questions you should try to get answered while you interview. The standard questions that candidates ask revolve around the teaching load, size and growth trajectory of the faculty, what new areas or initiatives the department might be starting up, what class sizes are like, whether there is a big Master's program, what the department's relationship is with the rest of the school, and of course <a href=\"http://matt-welsh.blogspot.com/2010/06/how-to-get-tenure-at-harvard.html\">what the tenure process is like</a>. The interview is <i>not</i>&nbsp;the time to ask questions about compensation or benefits: Save that for once you have an offer (which will be the subject of the next part in this series).<br /><br />You also want to learn as much as you can about living and working in whatever city the school is in. If you're thinking about buying a house or having kids, you need to understand about the real estate market, schools, good neighborhoods, commute, and so forth. If you care about eating and drinking out, you need to learn about the nightlife. If you ask <i>no questions</i>&nbsp;about the city or area, your interviewers will pick up on this and assume you're not that serious about moving there. You can also save these questions for a <b>second visit</b>&nbsp;after you have a job offer in hand, but it's probably a good idea to start learning about your potential new home.<br /><br /><b>The dinner:</b>&nbsp;Most departments will take faculty candidates out to a fancy dinner somewhere. This might sound like a real perk, but believe me, after 8+ hours of interviewing, it's usually the last thing you really want to do. A nice glass of wine (or three) might sound like the perfect antidote, but it's probably a <b>bad idea to drink</b>&nbsp;-- you are still being evaluated over dinner, and if you're like me, you can get really uninhibited with the combination of interview exhaustion and alcohol. Of course, for the faculty dining with you, they are planning on expensing the dinner and wine, so by all means encourage them to order whatever they like (and maybe indulge yourself half a glass to help take the edge off).<br /><br />The best interview dinners I had were with folks that I was friendly with and worked in my area. <a href=\"http://www.cs.rice.edu/~dwallach/\">Dan Wallach</a>&nbsp;at Rice recognized that I was probably getting sick of fancy restaurants and took me out to eat crawdads with my hands (and a big old plastic bib to protect my suit). The worst interview dinners I had were when several senior faculty used the time to gossip amongst themselves and completely ignored me. On that topic, <b>don't gossip</b>&nbsp;about other schools while you are interviewing. It's bad form, and an easy trap to fall into -- and keep in mind that everybody talks to everybody, so what you say at UCSB will get back to those folks at Duke, somehow (not that I would ever do such a thing).<br /><br /><b>After the interview:</b>&nbsp;When you get home, or back to your hotel, be sure to send a nice <b>thank-you note</b>&nbsp;to your host, expressing your interest and enthusiasm for the school and department (assuming, of course, that you are enthusiastic and interested). Don't assume the school knows you really had a good time and would love to work there. Hiring committees are always trying to read subtle signals from the candidates about how seriously they would entertain an offer from their department, so if you're not explicit, the hiring committee might mistakenly assume you wouldn't be that keen on a position there. If you're <b>not that interested</b>, well, don't go out of your way to say that you are, but you probably don't want to let the school know right away. Having several offers -- even from schools you're not serious about -- can be a good bargaining chip when it comes time to negotiate the offer with the school you do want to join.<br /><br />Finally, I strongly recommend <b>taking detailed notes</b>&nbsp;on your interviews, when you get back to the hotel each day. I found my notes to be invaluable when considering the several job offers I had, since my memories of a place started to fade after ten or so interviews. Writing out my observations and gut feelings about a school also helped crystallize the many tradeoffs in my mind.<br /><br />After this it's mostly a waiting game to see if you'll get an offer. This can take a matter of weeks, depending on when during the interview cycle your visit happens to fall, so be patient! If you do end up with a time-limited offer from another school, it's perfectly acceptable to contact other schools you have not heard back from yet to let them know you are still very interested but are operating under time pressure. Stay tuned for the next part of this series where I'll talk about the process of negotiating offers.<br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1171799036408860525/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html#comment-form") (title . "17 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171799036408860525"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171799036408860525"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html") (title . "How to get a faculty job, Part 2: The interview"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "17")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3613082285627215416") (published nil "2012-12-19T22:16:00.005-08:00") (updated nil "2012-12-27T14:52:54.599-08:00") (title ((type . "text")) "How to get a faculty job, part 1b: How to get an interview") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Back in <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1 of this series on how to get a faculty job</a>, I said there would be three parts in total. Well, I lied. I realized it would also be helpful to shed light on the <b>process as seen by a faculty hiring committee</b>, so in this post I'll augment Part 1 with a little behind-the-scenes of how hiring committees read and rank applications, and how interviews are granted. The \"real\" Part 2 will be about the interview itself, and Part 3 about negotiating the offer.<br /><br />I served on the hiring committee at Harvard back in 2008 when we hired three great new Computer Science faculty: <a href=\"http://www.eecs.harvard.edu/~kgajos/\">Krzysztof Gajos</a>, <a href=\"http://people.seas.harvard.edu/~chong/\">Steve Chong</a>, and <a href=\"http://yiling.seas.harvard.edu/\">Yiling Chen</a>. It was an exhausting, months-long search with a dozen or so interviews for multiple openings (it had been a few years since we had any faculty openings and we really opened up the floodgates). So I have a little sense of how the sausage is made.<br /><br />It's a complex process and utterly opaque for the poor applicant, who will usually not hear anything for many months after submitting the application. Most of the time, the response is a polite email from the hiring committee chair that because of the large number of highly qualified applicants for the position, they are very sorry that they will be unable to interview you.&nbsp;That is, if they ever contact you at all. Most schools don't bother even declining your application explicitly. You just never hear anything. (As for me, I'm still holding out hope that Stanford wants to interview me. It's only been 10 years since I sent my application, I guess it's still under consideration.)<br /><br />Sometimes, though, you get lucky and are actually granted an interview. The most direct approach is an email saying that they are very interested in your application and would like to see if there are some dates you would be able to come for an interview. However, in some cases, a school doesn't want to \"blow\" one of its precious interview slots (more on that below) on an applicant who is not serious about their school. This will happen for a rock star candidate who is going to get interviews at MIT and Berkeley and only applied to your school to be polite, or as a backup. It would be a waste of time to interview such a candidate unless the department really feels it has a shot at landing this person. So, rather than directly offering an interview, the hiring committee might use side channels to find out if the applicant is serious about interviewing first -- for example, by getting in touch with the student's advisor and finding out more about what they're looking for in a school.<br /><br />It's important to keep in mind is that whenever there is a faculty opening at any halfway-decent academic department, they will usually get inundated with <b>hundreds or even thousands of applications</b> from all corners of the globe. I am not exaggerating. The vast majority of these applicants are from schools you've never heard of in random countries where English is not the official language, and these people will rarely if ever get interviews (at least at good schools in the US).<br /><br />The other thing is that most departments have only so much \"<b>interview bandwidth</b>.\" Interviewing more than, say, a dozen applicants for a single position is very difficult. An interview typically lasts one or two days, you only have so many slots during the week in which to schedule job talks, and the committee has to spend a lot of time processing and discussing each interview. If a school has multiple openings in a year, they might still only interview a dozen or so candidates in total.<br /><br />So, how do hiring committees decide who gets interviewed? There are about a million variables involved, but here are some of the most important:<br /><br /><b>Qualifications.</b>&nbsp;Obviously this is important, but who counts as \"qualified?\" Your <b>publication record</b>&nbsp;is probably the strongest indicator of your success. Publishing at least one major conference paper a year -- after your first year or so in grad school -- is par for the course. Two or three papers would be a good year for most applicants. These have to be in <b>good</b>&nbsp;venues: Top-ranked, highly-competitive conferences. Workshops don't count (OK, maybe a little, but a lot less than real conferences). Journals don't count either. (This varies by field. In Computer Science, journals don't matter very much. But an article in <i>Science</i>&nbsp;or <i>Nature</i>&nbsp;will get you interviewed just about anywhere.)<br /><br />Also, being <b>first author</b>&nbsp;on these papers is really important. Second author says, OK, maybe this student wasn't the most senior one on this piece of work, but they probably still contributed a lot. Third author on down conveys that you were not that involved and therefore get fewer points for the publication.<br /><br />So you should expect to have something like <b>five or six major conference publications</b> -- ideally as first author -- on your CV, at minimum, to be taken seriously by most departments.&nbsp;Best paper awards are a big plus too, so list them on your CV whenever you get one. It is not uncommon these days to see applicants with ten or more top papers. I think this is a little insane. If you do a postdoc, though, you're expected to publish a good chunk of papers during that time, at minimum two a year -- the bar is higher for postdocs.<br /><br />Your <b>academic credentials</b>&nbsp;matter a lot too. Your undergrad institution is not that much of a factor. I know plenty of famous faculty at top-10 schools who went to seemingly random undergrad institutions: <a href=\"http://www.eecs.harvard.edu/~greg/\">Greg Morrisett</a>, for example, apparently graduated from some place called the University of Richmond, which I'm sure is a very good school but is hardly a household name. What matters much more is <b>where you went to grad school</b>&nbsp;and (if you are doing a postdoc) <b>where you postdoc</b>. There is a reason that so many of the faculty at top-20 CS departments graduated from the likes of MIT, Berkeley, CMU, and Stanford -- graduates of these schools are highly sought after by CS departments and they tend to churn out enough graduates to fill the ranks of the top departments. So if you're coming from anything other than a top-20 school yourself, your chances of landing an interview at a higher-ranked institution are slim to none. (I know a bunch of people will argue with me here, and point out exceptions to the rule, but let's be honest. There is a strong preference for graduates of top-ranked departments when trying to pick 10 or so candidates to interview out of a pool of hundreds.)<br /><br />The same goes if you're doing a <b>postdoc</b>. Actually, a postdoc can be a great way to increase your station in life if you didn't graduate from a name-brand department but still want a decent faculty job. Postdocing at MIT is almost (but not quite) as good as graduating from there.<br /><br />The good news is that <b>none of this shit matters</b>&nbsp;if you do get an interview: No sane hiring committee is going to go back to your résumé and say, \"Well, I really loved her interview, but she graduated from a lower ranked school than the other guy, so let's hire him instead.\" All of this is just about getting the interview. After that you're on your own.<br /><br /><b>Being a woman or a minority helps too</b>. Hiring committees spend a lot of time trying to find anyone other than white men to interview, and most departments would love for their next hire to help increase the diversity of their faculty. This is a good thing, and is becoming more important as the diversity of the student population grows as well. If you happen to be one of these \"underrepresented\" candidates, more power to you -- given how competitive the academic job market is, you need every advantage you can get. (But see above about how this doesn't matter once you get the interview. That applies here too.)<br /><br /><b>Research area fit</b>. This is a <i>really</i>&nbsp;complicated, multivariate function, in which the department attempts to discern, based on your CV, research statement, teaching statement, and letters, how well you would \"mesh\" into the department, whether you do the \"kind of research\" they are looking for, whether you can teach the classes that require coverage, and if you are likely to find collaborators in the department. It sounds like a lot to worry about, but the answer for you, as an applicant, is simple: <b>It's too late for you to do anything about this.</b>&nbsp;If you're a sixth-year PhD student applying for faculty jobs, it's too late to \"rebrand\" yourself to try to optimize for some complex, black-box process that is going on within each of the departments you're applying to. The time to figure out what research problems are going to look sexy on a job application is when you're a first or second year grad student, but, by the time you graduate those problems are just as likely not to be sexy anymore -- so instead, just do the research you love and hope you find a department that is looking for someone like you.<br /><br />Sometimes you don't get an interview due to factors <b>totally beyond your control</b>. For example, I didn't get interviewed by a couple of departments because they had just recently (in the last year or so) hired graduates of my same research group at Berkeley. That poisoned the well for me -- there was no way I could pretend to not be doing research in the same area under the same set of professors. (There are still times I shake my fist at the night sky and scream \"<a href=\"http://www.eecs.berkeley.edu/Faculty/Homepages/fox.html\">Armandooooooooooooo!</a>\")<br /><br />Finally, your <b>recommendation letters are key</b>. I could write an entire blog post about what a good faculty recommendation letter should say, but you as a job applicant have little control over what your letters will look like. The letters touch on many things: Your technical and intellectual capacity, your research taste, your teaching style, your personality, your chances at getting tenure down the road. As an applicant, what you can do is make sure you <b>talk to your letter writers</b>&nbsp;before they write the letter. This is for several reasons. First, you want to address any questions or concerns they have about you up front. For example, there might be some lingering questions about how much you contributed to some project a few years back, and talking about it openly with your references gives you a chance to clear up any confusion. Also, your reference needs to understand what you're looking for in a faculty job. Say you are applying to a mix of top-ranked research universities and a few smaller teaching schools. This can lead to confusion: What kind of job are you after? Do you want to mostly teach? Or are the teaching schools a safety net? You need to give your references a chance to ask these questions directly rather than infer the wrong thing and write a blind letter.<br /><br /><b>What's the process like for the hiring committee?</b>&nbsp;Usually, the committee will meet several times, go through the applicants, rank them in various ways, and try to reach consensus on whom to invite for interviews. This can take a month or more. At first, a couple of interviews might be given out to the clear front-runner candidates that they really want to snag early (since good candidates' interview schedules fill up too). Then a few more weeks of deliberation happens while the rest of the interviews are sorted out. Keep this in mind: If you haven't heard from a school, but know they have started scheduling interviews (say, by looking at their online events calendar where it's usually pretty obvious who's giving a job talk), that <b>may not mean that all of the interviews have been decided yet:</b>&nbsp;it's usually a rolling process. Generally the first interviews start to get scheduled around February, but March and April is when things really get going.<br /><br /><a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html\">In the next part I'll talk about how to nail the interview.</a></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3613082285627215416/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html#comment-form") (title . "25 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3613082285627215416"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3613082285627215416"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html") (title . "How to get a faculty job, part 1b: How to get an interview"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "25")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-2441606469415189016") (published nil "2012-12-09T21:20:00.004-08:00") (updated nil "2012-12-19T22:19:19.564-08:00") (title ((type . "text")) "How to get a faculty job, Part 1: The application") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is going to be the first in a series of three blog posts on getting a faculty job in Computer Science. Part one is about applying for the job. Part two will be about doing interviews. And part three will be about negotiating the offer and making a decision.<br /><br />I did my faculty job search back in 2002 after finishing my PhD at UC Berkeley. Back then, academic Computer Science departments were hiring like crazy and the number of job openings far outstripped the number of highly-qualified applicants. I ended up with something like a dozen interviews, and also interviewed at IBM Research (both coasts), HP Labs, and a little search engine startup called Google. (I regret not having interviewed at Microsoft Research, but at the time I was dead-set on an academic position and had a hard time seeing myself working at MSR.) I got offers at all of the industry places and several of the universities; and ended up taking a faculty job at Harvard.<br /><br />The process of getting an academic job is tremendously painful and takes months of effort. Faculty job applications are usually due in December or January, interviews happen around March and April, and job offers made in April and May. Before summer break most job applicants will have their position sorted out and know where they will be heading in the fall.<br /><br />The job application itself usually consists of five components: Your CV, a cover letter, a research statement, a teaching statement, and letters of recommendation. I'll go through these in detail below.<br /><br />In case you're curious, I posted my original (2002) <a href=\"http://www.eecs.harvard.edu/~mdw/private/jobapp/\">faculty job application materials online here</a>.<br /><br />These days, most departments accept the job application online, either via a web form or email. When I applied, only about half of the departments accepted email and I had to send physical copies of my application to the other places.<br /><br />The first critical component of the job application is your <b>personal web page.</b>&nbsp;I am always amazed at how many faculty applicants fail to maintain an up-to-date web page with their publications, research interests, source code releases, and so forth. Never assume that hiring committees will have your \"official\" application materials at hand: These days it's much easier to Google someone's name and look at their projects and papers online. For that matter, <b>always post your job application materials prominently on your web page.</b>&nbsp;In case someone is reviewing a set of candidates and can't find your research statement, everything should be linked to your web page so people can find it easily.<br /><br />The <b>curriculum vitae</b> is probably the easiest part to get right. This should be a detailed summary of your research interests, publications, talks, service work, teaching credentials, and any other factoids that might be of interest to the hiring committee. Under no circumstances should it be a one-page \"resume\". My <a href=\"http://www.eecs.harvard.edu/~mdw/private/jobapp/cv-generic.pdf\">2002-era CV is here</a>&nbsp;as an example. Note how it provides a one-page summary of my research interests and a detailed breakdown of my job experience. The \"invited talks\" section is provided to give a sense of my experience giving keynotes and lectures at various conferences and universities.<br /><br />The <b>cover letter</b>&nbsp;is a point of great confusion. First off, it's not always obvious that it's needed, and even when you have a cover letter, not everyone knows what it should say. These days, the cover letter might take the form of the body of the email that you send when submitting your materials. In my experience, the cover letter is a \"school specific\" statement of why you are applying to this school <b>in particular</b>. It should call specific attention to any potential collaborators at the school you are applying to.<br /><br />For example, a good cover letter might say something like,<br /><blockquote class=\"tr_bq\">Dear Prof. Zuckerberg,</blockquote><blockquote class=\"tr_bq\">I am writing to apply for the position of Assistant Professor of Computer Science in your department. My research interests are in the area of computer systems and programming languages, and my thesis topic is \"Rooter: A Methodology for the Typical Unification of Access Points and Redundancy.\" My thesis advisor is Prof. David Culler.</blockquote><blockquote class=\"tr_bq\">I am excited by the opportunity to teach and do research at University of East Nunavut. My research interests are highly complementary to Profs. Jobs and Ballmer in your department, and I would be particularly interested in collaborating with the Center for Computational Phrenology.</blockquote><blockquote class=\"tr_bq\">Please find attached my CV, research and teaching statements, and list of references. I look forward to hearing from you.&nbsp;</blockquote>You get the idea. It need not be long but it's a good way to customize your application for the specific school, while keeping the rest of your application materials generic.<br /><br />The <b>research statement</b>&nbsp;is one of the hardest parts of the application to get right. It is intended to serve two purposes: To provide a narrative summary of your research contributions (and especially how they all tie together), and what areas you intend to work on in the future. It's usually about 3-4 pages long and needs to nail what your specific research \"angle\" is, why the area is important, what your track record is, and what your research vision is going forward. It is <b>not a personal essay</b>&nbsp;like you might have written applying to college or grad school -- If the expression \"when I was a child, computers always fascinated me\" appears anywhere in your research statement, you're doing it <i>very</i>&nbsp;wrong.<br /><br />Nobody is going to hold you to working on the specific things you say you want to do for future research directions, but you should <b>articulate a clear vision</b> of what kind of direction you would take when starting a faculty job. This is important. Hiring committees are not hiring you based only on your track record -- they are hiring you based on your potential to be a (potentially) life-long colleague. They want to see that you have an independent and compelling vision for at least the first few years of your faculty job. If the best you can come up with is a couple of papers' worth of extensions to your thesis, you're in trouble. Try to think of a three-to-five year agenda that would get people excited to have you part of the faculty.<br /><br />The <b>teaching statement</b>&nbsp;is like the research statement, but focuses on teaching. Most grad students have precious little teaching experience beyond a couple of semesters of TA work, so it's kind of hard to say much. Still, do your best. Keep in mind that teaching is a <b>huge</b>&nbsp;part of a faculty job and one of the most important criteria for extending an offer is whether you can teach well. If you have advised any undergraduate researchers or mentored junior grad students, include this in your teaching statement, as mentorship is important too. Finally, be clear on what kinds of courses you would be willing and able to teach. It's not always obvious based on your research background if you could take on, say, the OS or databases course -- make it explicit.<br /><br />As for <b>letters of recommendation</b>, you usually need three or four. Resist the urge to have more than four rec letters: More is not always better, in case anyone writes anything to give the hiring committee pause. In general it is best if all of your recommendation letters are from <b>well-known professors</b>. Obviously one should be from your thesis advisor. A letter from a top-flight researcher in an industry lab is fine, too, but you should have no more than one of these: It's commonly held that industry folks write fluffy letters and hiring committees care more about the opinion of dyed-in-the-wool academics. One piece of advise I got when applying for faculty jobs was to have one letter from someone <b>not at your home institution</b>, who could comment more broadly (and objectively) on the impact of your research. I was fortunate to get a letter from the great <a href=\"http://www.soic.indiana.edu/people/profiles/fox-geoffrey-charles.shtml\">Geoffrey Fox</a>, whom I had met a couple of times and my advisor suggested would be a good \"external\" letter writer for me. It was kind of strange asking &nbsp;a near-stranger for a letter like this, but he agreed and I guess it did the trick, since I got interviews pretty much everywhere I applied.<br /><br />Keep in mind that the job application only <b>gets you an interview</b>, it does not get you the job. The interview is far, far more important than the application materials. It's also important to understand that hiring committees at top schools get many, many hundreds of applications, from all over the world, for a single faculty job opening. So, make sure your packet stands out. A strong publication record is the main thing. Strong letters are second. The research and teaching statement matter much less, so don't stress over them too much. You can't make up for a weak publication record with a brilliant research statement.<br /><br />Finally, a note on <b>where to apply for jobs</b>. I often see students make the mistake of only applying to the top five or so universities, with the idea that they could only be happy at a place like MIT or Berkeley. This is a <b>huge mistake</b>. First of all, the probability that you're going to get a job at your \"top\" school is vanishingly small, considering the number of qualified applicants and scarcity of jobs. Second, you might find out (as I did) that schools that look great from a distance don't seem so hot when you're up close and interviewing there. This can cause you to seriously rethink your preferences for both what kind of school you want to be at, where you want to live, and where you see yourself building an academic career.<br /><br />The converse is also true: You might fall in love with a place you would have never considered seriously before. For example, I knew next to nothing about Harvard before I interviewed there, and never imagined I would end up there -- until I visited, and found that I loved the place and the people. So try to keep an open mind about where you might go. There are lots of great departments out there, lots of great places to live, and many, many factors that count towards your overall happiness and ability to be successful. Apply broadly, include a few \"safety schools\" in your application list, and then cull the list later if you end up with too many invitations to interview. Most people don't have this problem, so don't be too picky.<br /><br />Check out <b><a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b: How To Get an Interview</a>.</b><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/2441606469415189016/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html#comment-form") (title . "15 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/2441606469415189016"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/2441606469415189016"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html") (title . "How to get a faculty job, Part 1: The application"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "15")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7927533933618986179") (published nil "2012-11-12T21:21:00.001-08:00") (updated nil "2012-11-12T21:21:58.562-08:00") (title ((type . "text")) "Startup vs. Big Company: What's \"Freedom\"?") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I was talking with a talented young PhD student today about his career ambitions, and the conversation turned to whether it would be better to do a startup after finishing school rather than joining a big company, like Google, to get some \"real world\" experience first. I asked him what was so appealing about doing a startup, and he said that it would mean having tremendous freedom to choose what to work on and how you pursue problems. That is true, in a sense, but I question how much \"freedom\" you really have when starting a new company. Doing a startup is also highly constraining, there are real advantages to being at a larger company where you have more resources and a broader set of problems you can work on.<br /><br />(Caveat emptor: Note that the last time I tried to <a href=\"http://matt-welsh.blogspot.com/2009/02/how-i-almost-killed-facebook.html\">talk someone out of doing a startup</a>, it was Mark Zuckerberg, and we all know how that turned out -- so perhaps this post should be taken with a grain of salt.)<br /><br />It seems to me that many startups these days are working on low-hanging-fruit problems: Things that a few guys in a garage can put together with EC2, Ruby on Rails, and XCode. Yes, you can build amazing products this way, but you're not necessarily doing rocket science. There are limits to what one can build with a small team and limited resources, and this means that most startups are constrained in the set of problems they can reasonably tackle.<br /><br />Also, startups tend to focus on problems that one can build a standalone business around, something that can be monetized or build value in some direct way, in order to make investors happy. For example, it would be difficult to do a startup around a new programming language, since it's not clear how you sell it, although it might form a component of a larger product.<br /><br />My point is that not all interesting problems are good startup fodder. This is where larger companies come in. One of the reasons I personally like working at Google is because I can work on problems at a scale that most startups would never achieve. Running jobs on terabytes of data on many thousands of cores is routine. For me, this is where the really interesting problems lie: Not in designing another sepia-tone photo filter app, but in solving fundamental problems of computer science that only emerge at the scale and complexity that I can work on here.<br /><br />Being at a larger company means I am \"free\" to work on unsexy problems -- problems a venture capitalist wouldn't touch with a ten foot pole. Network protocol optimization, performance measurement, and infrastructure building may not be everyone's idea of fun,&nbsp;but I really enjoy doing this kind of core systems work that can have huge impact over the long run.<br /><br />This is not to say that all problems at Google are unsexy. I just tend to gravitate towards infrastructure and networking since that's my background. And damned if I can program JavaScript.<br /><br />The other side of being at a large company is that you have the freedom to fail. Money is not about to run out in a few weeks, and you don't have to make deals you wish you hadn't in order to keep the cash flowing. You can take your time to try different things, get it wrong, and make big bets that don't pan out. It's unlikely you'll lose your job for doing so, and there are always more cool problems to tackle just around the corner.<br /><br />On the flip side, doing a startup while you are young and untethered might be exactly the right career move. In some ways I wish I had not sat out the dot-com boom doing a PhD, but taken a risk to join PurpleYogi or one of the other dozen or so startups (including Google) that tried to recruit me back when I was 22, unmarried, childless, and already used to living in a small apartment and eating ramen noodles for dinner. Who knows, maybe I would have learned JavaScript after all.<br /><br /><br /><br /><br /><br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7927533933618986179/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/11/startup-vs-big-company-whats-freedom.html#comment-form") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7927533933618986179"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7927533933618986179"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/11/startup-vs-big-company-whats-freedom.html") (title . "Startup vs. Big Company: What's \"Freedom\"?"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "14")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1171942405656750622") (published nil "2012-10-08T20:14:00.000-07:00") (updated nil "2012-10-12T14:57:00.742-07:00") (title ((type . "text")) "NCSSM and how it saved my life") (content ((type . "html")) "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s1600/ncssm-1.jpeg\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"220\" src=\"http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s320/ncssm-1.jpeg\" width=\"320\" /></a></div>I just got back from my 20th high school reunion and was reflecting on how much impact my high school had on my life and my career. You see, I was lucky enough to go to the <a href=\"http://www.ncssm.edu/\">North Carolina School of Science and Math</a>, also known as NCSSM, or as we lovingly called it back then, \"S&amp;M\". NCSSM is a public high school in Durham -- not far from Duke -- for juniors and seniors. Around 680 students live on campus, in dorms -- a lot like college, but with curfews, and students aren't allowed to have cars. To get in, you take the SAT and some other tests in 10th grade, and if you're accepted, it's completely free of charge -- no tuition, no housing fees, even the food is paid for. (The food was not, by the way, one of the highlights of the place.)<br /><br />NCSSM is an utterly amazing place. Everyone I know who has been there has had their lives deeply touched by the experience. Although it has a well-deserved reputation as a school for, well, nerds, it is also full of some of the most interesting and creative people I have ever met. Twenty years later, it is amazing to see what my classmates are doing today: Doing <a href=\"http://www.dzignlight.com/\">high-end CGI for Hollywood movies</a>; numerous professors and research scientists in areas as diverse as <a href=\"http://web.ics.purdue.edu/~daldrich/\">political science</a>, <a href=\"http://www.uni-muenster.de/Planetology/en/people/carolyn_van_der_bogert/cv.html\">planetology</a>,&nbsp;<a href=\"http://nicoleradziwill.com/\">integrated science and technology</a>, and <a href=\"http://www.smu.edu/Dedman/Academics/Departments/Sociology/~/link.aspx?_id=BB5B23D111C941B4BAFB413722B2FBEF&amp;_z=z\">sociology</a>; working for the Department of Health and Human Services while doing <a href=\"http://www.varietyisthespice.com/\">regular club and radio DJ gigs</a>; even serving as an <a href=\"http://twitter.com/revjoehensley\">Episcopalian minister</a>. Many of my classmates are not doing \"science\" or \"math\" in the conventional sense.<br /><br />Prior to NCSSM, I lived in a small town called Wilson, about an hour east of Raleigh. (If you're from North Carolina, the correct pronunciation is \"WILT-sun\".) It would be understatement to say that I did not fit in in Wilson, which is surrounded by a rural tobacco-growing community. There were not a lot of people there like me, and my horizons were severely limited. The main pastime of high-school kids in Wilson those days was driving in circles around the mall parking lot. There were a few great teachers in the schools, but I really needed more than Wilson had to offer.<br /><br />Coming to NCSSM I found a community of people&nbsp;<i>like me</i>&nbsp;-- a school full of outcasts, geeks, free spirits, lost souls. Not everyone was socially maladjusted, of course, but there were plenty of people there all pushing the boundaries of their humble (often rural and low-middle income) backgrounds.&nbsp;The faculty at NCSSM were (and still are) stellar. I could take Russian, quantum physics, photography, t'ai chi. It was like opening a vista on vast opportunities that I had scant awareness of when I was in Wilson, and I mean it seriously when I say that NCSSM saved my life: there's no way I'd be where I am today without that experience.<br /><br />For one thing, my exposure to computing was greatly expanded at NCSSM. Along with some other students, I ran the school's <a href=\"http://en.wikipedia.org/wiki/VAX-11/780\">VAX minicomputer</a> which powered the school's \"intranet\" (although it was really a bunch of VT-100 terminals scattered around campus, tied to the single computer). The students and faculty all had primitive email and chat accounts on the VAX -- this was the days before the Internet was widespread. We also had an <a href=\"http://en.wikipedia.org/wiki/IBM_6150_RT\">IBM RT</a>, a high end (at the time) UNIX workstation with 3D (!!) graphics support. A few of us managed to get this machine on the Internet, over a slow ISDN connection, so we could use FTP and email, and the IBM RT was my first UNIX \"root\" account. At one point, I dusted off an old, unused <a href=\"http://en.wikipedia.org/wiki/Data_General_Eclipse\">Data General mainframe</a> sitting in the corner, figured out how to boot it <i>from tape</i>, and set up a series of terminals in the adjacent computer lab, giving any student who asked for it an account, with the provisio that they have no password -- <a href=\"http://www.bostonmagazine.com/articles/2008/04/the-shaggy-god/\">a tribute to RMS' similar practice</a> at the MIT AI Lab. I got to do an internship at nearby Data General, and a volunteer from NC State taught a C programming class after hours. It was incredible.<br /><br />Outside of conventional academics, NCSSM has tremendous resources for exploring music and the arts. It&nbsp;has the most unbelievable art studio, where we would spend countless hours: in the darkroom, screen printing, making stained glass, paintings, sculptures, ceramics. My major creative outlet there was the electronic music studio. Back then it was a somewhat modest affair: A couple of synthesizers, a drum machine, 8-track reel-to-reel, effects units, MIDI sequencer -- more than enough for me to produce and record two full-length albums (and no, I will not be posting MP3s). I spent hours in that studio every weekend, all thanks to the dear late <a href=\"http://ncssmstrings.blogspot.com/2011/02/honoring-good-man.html\">Ray Church</a>, the music teacher who let me and others run roughshod over \"his\" gear. The best aspect of this was that the studios were open all the time, and the students were trusted, and encouraged, to make it their own space and use the resources to explore their own projects.<br /><br />It's important to keep in mind that NCSSM is a public school. It's paid for by the taxpayers of North Carolina, and can only exist because of a state legislature, and state university system, that recognizes the importance of having a high school like this.&nbsp;I can't imagine what my life would be like had I not had the opportunity to go there, and I know a lot of my classmates agree.<br /><br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1171942405656750622/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/10/ncssm-and-how-it-saved-my-life.html#comment-form") (title . "45 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171942405656750622"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171942405656750622"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/10/ncssm-and-how-it-saved-my-life.html") (title . "NCSSM and how it saved my life"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s72-c/ncssm-1.jpeg") (height . "72") (width . "72"))) (thr:total nil "45")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3449028800434101092") (published nil "2012-07-09T22:21:00.001-07:00") (updated nil "2012-07-09T22:25:39.964-07:00") (title ((type . "text")) "In Defense of the Scientific Paper") (content ((type . "html")) "<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s1600/5428831_365342f43b_o.jpeg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"276\" src=\"http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s320/5428831_365342f43b_o.jpeg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">http://www.flickr.com/photos/openeye/5428831/</td></tr></tbody></table>Since leaving academia, I still find the time to serve on scientific program committees (recently NSDI, MobiSys, and SOCC) and have plenty of opportunity to read both good and bad scientific papers in various states of preparation. And although I am not required to publish papers in my current job, I certainly hope to do so -- a lot of the work we are doing at Google is imminently publishable -- it's just a matter of finding the time to sit down and write them!<br /><br />Although I've <a href=\"http://matt-welsh.blogspot.com/2011/09/do-we-need-to-reboot-cs-publications.html\">blogged about how the scientific publication process needs fixing</a>, I still feel that the process of <i><b>writing</b></i>&nbsp;a scientific paper is a hugely rewarding experience. Arguably, the primary value of scientific papers isn't in reading them, but writing them. You learn so much in the process.<br /><br />Writing a paper sharpens your mental focus like nothing else. Like Japanese <i>bonsai</i>&nbsp;art or building a ship in a bottle, paper writing forces you to obsess over every meticulous detail -- word choice, overall tone, readability of graphs -- and of course <a href=\"http://matt-welsh.blogspot.com/2010/01/paper-formatting-gestapo.html\">more mundane details</a> like font size and line spacing. This microscopic attention to every aspect of your work brings out a wonderful, if somewhat exhausting, intellectual rapture.&nbsp;<span style=\"background-color: white;\">I have never thought so clearly about a piece of research than when I'm in the throes of putting together a paper against a deadline.</span><br /><br /><span style=\"background-color: white;\">You start with nothing, a blank editor window and some LaTeX boilerplate, some half-baked ideas, a few axes to grind and a tremendous apprehension at how much your life is going to suck between now and the deadline. Y</span><span style=\"background-color: white;\">ou throw in all of the raw ingredients, the rough ideas, the broken implementation, the confusing data, the missing citations. Over a period of days or weeks you grind it and refine it and throw it out and start over and eventually hone the paper to a razor-sharp, articulate, polished fourteen pages of scientific beauty, and then just hope like hell that you didn't screw up the margins or forget to cite some important piece of related work.</span><br /><br />I used to think that writing a paper was something you did after the research was over, but now I realize you should sit down to write the paper <i>as early as possible</i>&nbsp;-- sometimes before even starting the \"research work\" itself. On a few occasions, it wasn't until I started writing a paper that I knew what the hell the research project was really about.&nbsp;<span style=\"background-color: white;\">Case in point: Our <a href=\"http://fiji.eecs.harvard.edu/node/182\">SenSys 2009 paper on the Mercury wearable sensor platform</a> came out of a project that had been running for nearly two years without a clear set of goals or any real insight into what the interesting research problems were. We had built a prototype and had some stuff working, but we didn't know what was publishable about it, and most of the problems we had to solve seemed mundane.</span><br /><span style=\"background-color: white;\"><br /></span><br /><span style=\"background-color: white;\">In a last-ditch measure to revive the project, I got the students together and said, fuck it, let's write a SenSys paper on this. As we started piecing together the story that we wanted to tell in the paper, we realized that none of our work to that point tackled the most important problem: how to ensure that the sensors produced good, and useful, data when there was a hard limit on battery lifetime. With the deadline just weeks away, the students pulled together and reimplemented the system from scratch and cranked out a ton of new measurements. The process of writing the paper resulted in a flood of new ideas, many of which bled over into my other projects, ultimately resulting in a half dozen papers and three PhD theses. It was awesome.</span><br /><span style=\"background-color: white;\"><br /></span><br />And even if a paper does not get accepted, crystallizing the ideas through the process of putting together the submission can be really energizing. I never assumed any paper I wrote would actually get accepted, so submitting the paper was often the start of a new line of work, riding on that clarity of thought that would emerge post-deadline (and a much-needed break of course).") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3449028800434101092/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/07/in-defense-of-scientific-paper.html#comment-form") (title . "20 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3449028800434101092"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3449028800434101092"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/07/in-defense-of-scientific-paper.html") (title . "In Defense of the Scientific Paper"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s72-c/5428831_365342f43b_o.jpeg") (height . "72") (width . "72"))) (thr:total nil "20")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7129143338386044296") (published nil "2012-06-21T20:03:00.000-07:00") (updated nil "2012-06-25T16:24:24.936-07:00") (title ((type . "text")) "Google's Hybrid Approach to Research") (content ((type . "html")) "This month's <i><a href=\"http://cacm.acm.org/\">Communications of the ACM</a></i>&nbsp;features an article on <b><a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">Google's Hybrid Approach to Research</a></b>&nbsp;by Alfred Spector, Peter Norvig, and Slav Petrov. Since <a href=\"http://matt-welsh.blogspot.com/2011/01/does-google-do-research.html\">this is a topic I've blogged about here before</a>, I thought I'd provide a quick pointer to the article:<br /><br /><a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext</a><br /><br />Overall I think the article does a nice job of summarizing Google's approach. The key takeaway is that Google doesn't separate its research and engineering activities: most \"research\" at Google happens during the day-to-day work of building products.<br /><br />The benefit of this model is that it's easy to have real world impact, and&nbsp;the pace of innovation is fairly rapid, meaning research results get translated into products quickly. The possible downside is that you don't always get a chance to fork off &nbsp;long-term (multi-year) projects that will take a long time to translate into a product. However, there are exceptions to this rule -- things like <a href=\"https://plus.google.com/111626127367496192147\">Google Glass</a>, for example -- and plenty of things I can't talk about publicly. It is true that Google tends not to do \"pure academic\" research just for the purpose of publishing papers. We could have a healthy debate about whether this is good or bad, but I'll leave that for the comments...<br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7129143338386044296/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/googles-hybrid-approach-to-research.html#comment-form") (title . "19 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7129143338386044296"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7129143338386044296"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/googles-hybrid-approach-to-research.html") (title . "Google's Hybrid Approach to Research"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "19")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5059801314513052292") (published nil "2012-06-17T21:12:00.001-07:00") (updated nil "2012-06-17T21:19:43.747-07:00") (title ((type . "text")) "Startup University") (content ((type . "html")) "<span style=\"background-color: white;\">The academic research process is incredibly inefficient when it comes to producing real products that shape the world. It can take decades for a good research idea to turn into a product - and of course most research never reaches this phase. However, I don't think it has to be that way: We could greatly accelerate the research-to-product pipeline if we could fix the academic value system and funding model.</span><br /><br />Here's the problem: Some of the smartest people in the world have spent their entire careers building throwaway prototypes. I sure never built anything real until I moved to Google, after nearly ten years of college and grad school, and seven years as a faculty member. And by \"real,\" I don't just mean a prototype that we developed for a couple of years and then threw away as soon as the papers got published. In effect, I \"wasted\" millions of dollars in funding, and countless man-years of development effort by my students and lab staff -- apart from a bunch of papers, nothing of practical value came out of my entire academic research career. (Maybe I'm being a little hard on myself, but let's take this as a given for sake of argument.) And I don't think my lack of real-world impact is at all unusual in a university setting.<br /><br />What would the world be like if all of this hard work had actually translated into real, shipping products that people could use? How could we change the structure of academic research to close the gap between playing in the sandbox and making things real?<br /><br />The plight of the academic is that there is often no direct way to translate ideas into reality -- you don't have the resources to do it at the university, and the academic process forces you to bounce between ideas every few years, rather than sticking it out to turn something into a product. In theory, academics are&nbsp;<i>supposed</i> to be patenting their ideas, and companies are <i>supposed</i> to come along and license the patents and turn them into real products. However, I am not aware of a single project from a computer science department that ever been commercialized through this route. This approach is more commonplace in fields like biotech, but in computer science it is rarely done.<br /><br />A far more common (and successful) approach is for academics to spin out their own startups. However, this involves a high degree of risk (potentially career-ending for pre-tenure faculty), and many universities do not structure their sabbatical and leave policies to make this easy to do. Most universities also make starting a company painfully difficult when it comes to questions of IP ownership, licensing, and forcing the academic's research to be dissociated with their commercial activities.&nbsp;<span style=\"background-color: white;\">As a result, you get a bunch of super smart academics who play it safe and stay within their tenured faculty jobs, subsisting on grants and rarely commercializing their work. This means that a lot of great ideas never get beyond the prototype phase.</span><br /><br />What I'd like to see is a university with a startup incubator attached to it, taking all of the best ideas and turning them into companies, with a large chunk of the money from successful companies feeding back into the university to fund the next round of great ideas. This could be a perpetual motion machine to drive research.&nbsp;<span style=\"background-color: white;\">Some universities have experimented with an incubator model, but I'm not aware of any cases where this resulted in a string of successful startups that funded the next round of research projects at that university.</span><br /><br />Typically, when a startup spins off, the university gets a tiny slice of the pie, and the venture capitalists -- who fill the much-needed funding gap -- reap most of the benefits. But why not close the air gap between the research lab and the startup? Allow the faculty to stay involved in their offspring companies while keeping their research day job? Leverage the tremendous resources of a university to streamline the commercialization process -- e.g., use of space, equipment, IT infrastructure, etc.? Allow students to work at the startups for course credit or work-study without having to quit school? Maintain a regular staff of \"serial entrepreneurs\" who help get new startups off the ground? Connect the course curriculum to the fledgling startups, rather than teaching based on artificial problems? One might joke that some universities, like Stanford, effectively already operate in this way, but this is the exception rather than the rule.<br /><br />It seems to me that bringing together the university model with the startup incubator would be a great benefit both for spinning out products and doing better research.") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5059801314513052292/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/startup-university.html#comment-form") (title . "51 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5059801314513052292"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5059801314513052292"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/startup-university.html") (title . "Startup University"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "51")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5916156754481973891") (published nil "2012-03-12T13:17:00.001-07:00") (updated nil "2012-03-12T13:17:18.875-07:00") (title ((type . "text")) "Do you need a PhD?") (content ((type . "html")) "Since I decamped from the academic world to industry, I am often asked (usually by first or second year graduate students) whether it's \"worth it\" to get a PhD in Computer Science if you're not planning a research career. After all, you certainly don't <i>need</i> a PhD to get a job at a place like Google (though it helps). Hell, many successful companies (Microsoft and Facebook among them) have been founded by people who never got their undergraduate degrees, let alone a PhD. So why go through the 5-to-10 year, grueling and painful process of getting a PhD when you can just get a job straight out of college (degree or not) and get on with your life, making the big bucks and working on stuff that matters?<br /><br />Doing a PhD is certainly not for everybody, and I <a href=\"http://matt-welsh.blogspot.com/2010/09/so-you-want-to-go-to-grad-school.html\">do not recommend it for most people</a>. However, I am really glad I got my PhD rather than just getting a job after finishing my Bachelor's. The number one reason is that I <b>learned a hell of a lot doing the PhD</b>, and most of the things I learned I would never get exposed to in a typical software engineering job. The process of doing a PhD trains you to do research: to read research papers, to run experiments, to write papers, to give talks. It also teaches you how to <i>figure out what problem needs to be solved</i>. You gain a very sophisticated technical background doing the PhD, and having your work subject to the intense scrutiny of the academic peer-review process -- not to mention your thesis committee.<br /><br />I think of the PhD a little like the <a href=\"http://en.wikipedia.org/wiki/Grand_Tour\">Grand Tour</a>, a tradition in the 16th and 17th centuries where youths would travel around Europe, getting a rich exposure to high society in France, Italy, and Germany, learning about art, architecture, language, literature, fencing, riding -- all of the essential liberal arts that a gentleman was expected to have experience with to be an influential member of society. Doing a PhD is similar: You get an intense exposure to every subfield of Computer Science, and have to become <i>the leading world's expert</i>&nbsp;in the area of your dissertation work. The top PhD programs set an incredibly high bar: a lot of coursework, teaching experience, qualifying exams, a thesis defense, and of course making a groundbreaking research contribution in your area. Having to go through this process gives you a tremendous amount of technical breadth and depth.<br /><br />I do think that doing a PhD is useful for software engineers, especially those that are inclined to be technical leaders. There are many things you can only learn \"on the job,\" but doing a PhD, and having to build your own compiler, or design a new operating system, or prove a complex distributed algorithm from scratch is going to give you a much deeper understanding of complex Computer Science topics than following coding examples on StackOverflow.<br /><br />Some important stuff I learned doing a PhD:<br /><br /><b>How to read and critique research papers.</b>&nbsp;As a grad student (and a prof) you have to read thousands of research papers, extract their main ideas, critique the methods and presentation, and synthesize their contributions with your own research. As a result you are exposed to a wide range of CS topics, approaches for solving problems, sophisticated algorithms, and system designs.&nbsp;This is not just about gaining the knowledge in those papers (which is pretty important), but also about becoming conversant in the scientific literature.<br /><br /><b>How to write papers and give talks.</b>&nbsp;Being fluent in technical communications is a really important skill for engineers. I've noticed a big gap between the software engineers I've worked with who have PhDs and those who don't in this regard. PhD-trained folks tend to give clear, well-organized talks and know how to write up their work and visualize the result of experiments. As a result they can be much more influential.<br /><br /><b>How to run experiments and interpret the results:</b>&nbsp;I can't overstate how important this is. A systems-oriented PhD requires that you run a zillion measurements and present the results in a way that is both bullet-proof to peer-review criticism (in order to publish) and visually compelling. Every aspect of your methodology will be critiqued (by your advisor, your co-authors, your paper reviewers) and you will quickly learn how to run the right experiments, and do it right.<br /><br /><b>How to figure out what problem to work on:</b>&nbsp;This is probably the most important aspect of PhD training. Doing a PhD will force you to cast away from shore and explore the boundary of human knowledge. (<a href=\"http://matt.might.net/articles/phd-school-in-pictures/\">Matt Might's cartoon</a> on this is a great visualization of this.) I think that at least 80% of making a scientific contribution is figuring out what problem to tackle: a problem that is at once interesting, open, and going to have impact if you solve it. There are lots of open problems that the research community is not interested in (c.f., writing an operating system kernel in Haskell). There are many interesting problems that have been solved over and over and over (c.f., filesystem block layout optimization; wireless multihop routing). There's a real trick to picking good problems, and developing a taste for it is a key skill if you want to become a technical leader.<br /><br />So I think it's worth having a PhD, especially if you want to work on the hardest and most interesting problems. This is true whether you want a career in academia, a research lab, or a more traditional engineering role. But as <a href=\"http://www.cs.berkeley.edu/~culler/\">my PhD advisor</a> was fond of saying, \"doing a PhD costs you a house.\" (In terms of the lost salary during the PhD years - these days it's probably more like several houses.)<br /><br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5916156754481973891/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/03/do-you-need-phd.html#comment-form") (title . "16 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5916156754481973891"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5916156754481973891"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/03/do-you-need-phd.html") (title . "Do you need a PhD?"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "16")) (entry nil (id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3976700473159420409") (published nil "2012-02-07T21:58:00.000-08:00") (updated nil "2012-02-07T21:58:00.162-08:00") (title ((type . "text")) "My love affair with code reviews") (content ((type . "html")) "One of the most life-altering events in my move from academia to industry was the discovery of code reviews. This is pretty standard fare for developers in the \"real world\", but I have never heard of an academic research group using them, and had never done code reviews myself before joining Google.<br /><br />In short: Code reviews are awesome. Everyone should use them. Heck, my dog should use them. You should too.<br /><br />For those of you not in the academic research community, you have to understand that academics are <i>terrible programmers.</i><span style=\"font-weight: bold;\">&nbsp;(</span>I count myself among this group.) Academics write sloppy code, with no unit tests, no style guidelines, and no documentation. Code is slapped together by grad students, generally under pressure of a paper deadline, mainly to get some graphs to look pretty without regard for whether anyone is ever going to run the code ever again. Before I came to Google, that was what \"programming\" meant to me: kind of a necessary side effect of doing research, but the result was hardly anything I would be proud to show my mother. (Or my dog, for that matter.) Oh, sure, I released some open source code as an academic, but now I shudder to think of anyone at a place like Google or Microsoft or Facebook actually <i>reading</i>&nbsp;that code (please don't, I'm begging you).<br /><br />Then I came to Google. Lesson #1: You don't check anything in until it has been reviewed by someone else. This took some getting used to. Even an innocent four-line change to some \"throw away\" Python script is subject to scrutiny. And of course, most of the people reviewing my code were young enough to be my students -- having considered myself to be an \"expert programmer\" (ha!), it is a humbling experience for a 23-year-old one year out of college to show you how to take your 40 lines of crap and turn them into one beautiful, tight function -- and how to generalize it and make it testable and document the damn thing for chrissakes.<br /><br />So there's a bunch of reasons to love code reviews:<br /><br /><b>Maintain standards.</b>&nbsp;This is pretty obvious but matters tremendously. The way I think of it, imagine you get hit by a truck one day, and 100 years from now somebody who has never heard of your code gets paged at 3 a.m. because something you wrote was suddenly raising exceptions. Not only does your code have to <i>work</i>, but it also needs to <i>make sense</i>. Code reviews force you to write code that fits together, that adheres to the style guide, that is testable.<br /><br /><b>Catch bugs before you check in.</b>&nbsp;God, I can't count the number of times someone has pointed out an obvious (or extremely subtle) bug in my code during the code review process. Having another pair of eyes (or often several pairs of eyes) looking at your code is the best way to catch flaws early.<br /><br /><b>Learn from your peers.</b>&nbsp;I have learned more programming techniques and tricks from doing code reviews than I ever did reading O'Reilly books or even other people's code. A couple of guys on my team are friggin' coding ninjas and suggest all kinds of ways of improving my clunky excuse for software. You learn better design patterns, better approaches for testing, better algorithms by getting direct feedback on your code from other developers.<br /><br /><b>Stay on top of what's going on.</b>&nbsp;Doing code reviews for other people is the best way to understand what's happening in complex codebase. You get exposed to a lot of different code, different approaches for solving problems, and can chart the evolution of the software over time -- a very different experience than just reading the final product.<br /><br />I think academic research groups would gain a lot by using code reviews, and of course the things that go with them: good coding practices, a consistent style guide, insistence on unit tests. I'll admit that code quality matters less in a research setting, but it is probably worth the investment to use some kind of process.<br /><br /><br />The thing to keep in mind is that there is a social aspect to code reviews as well. At Google, you need an LGTM from another developer before you're allowed to submit a patch. It also takes a lot of time to do a good code review, so it's standard practice to break large changes into smaller, more review-friendly pieces. And of course the expectation is you've done your due diligence by testing your code thoroughly before sending it for review.<br /><br /><b>Don't code reviews slow you down?</b> Somewhat. But if you think of code development as a pipeline, with multiple code reviews in the flight at a time you can still sustain a high issue rate, even if each individual patch has higher latency.&nbsp;Generally developers all understand that being a hardass on you during the review process will come back to bite them some day -- and they understand the tradeoff between the need to move quickly and the need to do things right. I think code reviews can also serve to build stronger teams, since everyone is responsible for doing reviews and ensuring the quality of the shared codebase. So if done right, it's worth it.<br /><div><br /></div><br /><b>Okay, Matt. I'm convinced. How can I too join the code review bandwagon?</b>&nbsp;Glad you asked. The tool we use internally at Google was developed by none other than <a href=\"http://www.python.org/~guido/\">Guido van Rossum</a>, who has graciously released a similar system called <b><a href=\"http://code.google.com/p/rietveld/\">Rietveld</a></b>&nbsp;as open source. Basically, you install Rietveld on AppEngine, and each developer uses a little Python script to upload patches for review. Reviews are done on the website, and when the review is complete, the developer can submit the patch. Rietveld doesn't care which source control system you use, or where the repository is located -- it just deals with patches. It's pretty slick and I've used it for a couple of projects with success.<br /><br />Another popular approach is to use <a href=\"https://github.com/\">GitHub</a>'s \"pull request\" and commenting platform as a code review mechanism. Individual developers clone a master repository, and submit pull requests to the owner of that repository for inclusion. GitHub has a nice commenting system allowing for code reviews to be used with pull requests.<br /><br />I was floored the other day when I met an engineer from a fairly well-known Internet site who said they&nbsp;<i>didn't</i>&nbsp;use code reviews internally -- and complained about how messy the code was and how poorly designed some pieces were. No kidding! Code reviews aren't the ultimate solution to a broken design process, but they are an incredibly useful tool.<br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3976700473159420409/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/02/my-love-affair-with-code-reviews.html#comment-form") (title . "16 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3976700473159420409"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3976700473159420409"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/02/my-love-affair-with-code-reviews.html") (title . "My love affair with code reviews"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "16")))) ("Taking the \"Hot\" out of \"Hot Topics\" workshops" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I just got back from <a href=\"http://www.hotmobile.org/2014\">HotMobile 2014</a> (for which I was the general chair). HotMobile is the mobile systems community's \"hot topics\" workshop, held annually as a forum for (according to the <a href=\"http://www.hotmobile.org/2014/index.php?id=calls\">Call for Papers</a>) \"position papers containing highly original ideas\" and which \"propose new directions of research\" or \"advocate non-traditional approaches\". It's a small workshop (we had about 95 people this year) and the paper submissions are short -- 6 pages, rather than the regular 14.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s1600/ps_5985562024104183778.jpeg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s1600/ps_5985562024104183778.jpeg\" height=\"235\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">The HotMobile'14 poster and demo session.<br />Look how happy those mobile systems researchers are!</td></tr></tbody></table>Overall, the workshop was great -- lots of good discussions, good talks, interesting ideas. And yet, every time I attend one of these \"hot topics\" workshops, I end up feeling that the papers fall well short of this lofty goal. This is not limited to the mobile community -- the <a href=\"http://matt-welsh.blogspot.com/2013/05/what-i-wish-systems-researchers-would.html\">HotOS community has a similar problem</a>&nbsp;as well.<br /><br />This has bugged me for a long time, since it often feels as though there is no venue for doing \"out of the box\" work that is intended to look out five or ten years -- rather than just things that are incremental but not yet ready for publication in a major conference like SOSP or MobiSys. I also have fond memories of HotOS in the late 1990s in which it felt as though many of the papers were there to shake up the status quo and put forward a strong position.<br /><br />What I've now come to realize is that <b>there is a tremendous value in having a small workshop for preliminary (and often incremental) results</b>. The community obviously feels that such a venue is useful, despite its lack of \"hotness\" -- we had a record number of attendees this year, and (I believe) a near-record number of submissions.<br /><br />And after all, the main reasons to attend any workshop are the discussions and networking -- not the papers.<br /><br />The problem is that we insist on calling this a \"hot topics\" workshop and pretend that it's about far-out ideas that could not be published elsewhere. Instead, I think we should be honest that HotMobile (and HotOS, HotNets, etc.) are really for three kinds of papers:<br /><ol style=\"text-align: left;\"><li><b>Preliminary work on a new project</b> which is not yet ready for a major conference. Getting early feedback on a new project is often very useful to researchers, so they know if they are barking up the right trees.<br /><br />An example of this from this year is the <a href=\"http://www.hotmobile.org/2014/papers/hotmobile_final/hotmobile2014-final15.pdf\">CMU paper on QuiltView,</a> which proposes allowing users to pose real-time queries (\"How is the weather down at the beach in Santa Barbara?\") and get back real-time video snippets (from users wearing Google Glass!) in reply. This work is no where near mature enough for a full conference, and I hope the authors gained something from the paper reviews and discussion at the workshop to shape their future direction.<br /></li><li><b>An incremental, and possibly vestigial, step</b>, towards the next major conference paper on a topic. Many such papers are simply not big enough ideas for a full conference paper, but make a nice \"short paper\" for the sake of getting some idea out there.<br /><br />One example from this year is <a href=\"http://www.hotmobile.org/2014/papers/hotmobile_final/hotmobile2014-final42.pdf\">this paper on the dangers of public IPs for LTE devices</a>. This isn't something that's going to turn into a longer, more pithy paper later on, but is probably worth reporting.<br /></li><li>The <b>odd wacky paper</b> that falls under the \"hot topics\" rubric. These are increasingly rare. About the only example from this year is this <a href=\"http://synrg.csl.illinois.edu/papers/buzz.pdf\">Duke paper on adding smart capabilities to childrens' toys with smartphones</a> -- but the idea is not <i>that</i>&nbsp;radical.</li></ol>Last year at SOSP, there was a one-day workshop called <a href=\"http://sigops.org/sosp/sosp13/trios.html\">TRIOS</a> (\"Timely Results in Operating Systems\") which was an informal venue for preliminary work -- exactly to provide an outlet for papers in the first two categories above. At least TRIOS was honest about its intent, so nobody attending could be disappointed that the papers weren't \"hot\" enough.<br /><br />So, my humble proposal is to rename the workshop \"ColdMobile\" and, just to be cheeky, hold it at a ski resort in the winter.<br /><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/1893907743149089553/comments/default" (21264 64950) old 1 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1893907743149089553") (published nil "2014-02-28T13:20:00.002-08:00") (updated nil "2014-02-28T13:20:54.896-08:00") (title ((type . "text")) "Taking the \"Hot\" out of \"Hot Topics\" workshops") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I just got back from <a href=\"http://www.hotmobile.org/2014\">HotMobile 2014</a> (for which I was the general chair). HotMobile is the mobile systems community's \"hot topics\" workshop, held annually as a forum for (according to the <a href=\"http://www.hotmobile.org/2014/index.php?id=calls\">Call for Papers</a>) \"position papers containing highly original ideas\" and which \"propose new directions of research\" or \"advocate non-traditional approaches\". It's a small workshop (we had about 95 people this year) and the paper submissions are short -- 6 pages, rather than the regular 14.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s1600/ps_5985562024104183778.jpeg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s1600/ps_5985562024104183778.jpeg\" height=\"235\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">The HotMobile'14 poster and demo session.<br />Look how happy those mobile systems researchers are!</td></tr></tbody></table>Overall, the workshop was great -- lots of good discussions, good talks, interesting ideas. And yet, every time I attend one of these \"hot topics\" workshops, I end up feeling that the papers fall well short of this lofty goal. This is not limited to the mobile community -- the <a href=\"http://matt-welsh.blogspot.com/2013/05/what-i-wish-systems-researchers-would.html\">HotOS community has a similar problem</a>&nbsp;as well.<br /><br />This has bugged me for a long time, since it often feels as though there is no venue for doing \"out of the box\" work that is intended to look out five or ten years -- rather than just things that are incremental but not yet ready for publication in a major conference like SOSP or MobiSys. I also have fond memories of HotOS in the late 1990s in which it felt as though many of the papers were there to shake up the status quo and put forward a strong position.<br /><br />What I've now come to realize is that <b>there is a tremendous value in having a small workshop for preliminary (and often incremental) results</b>. The community obviously feels that such a venue is useful, despite its lack of \"hotness\" -- we had a record number of attendees this year, and (I believe) a near-record number of submissions.<br /><br />And after all, the main reasons to attend any workshop are the discussions and networking -- not the papers.<br /><br />The problem is that we insist on calling this a \"hot topics\" workshop and pretend that it's about far-out ideas that could not be published elsewhere. Instead, I think we should be honest that HotMobile (and HotOS, HotNets, etc.) are really for three kinds of papers:<br /><ol style=\"text-align: left;\"><li><b>Preliminary work on a new project</b> which is not yet ready for a major conference. Getting early feedback on a new project is often very useful to researchers, so they know if they are barking up the right trees.<br /><br />An example of this from this year is the <a href=\"http://www.hotmobile.org/2014/papers/hotmobile_final/hotmobile2014-final15.pdf\">CMU paper on QuiltView,</a> which proposes allowing users to pose real-time queries (\"How is the weather down at the beach in Santa Barbara?\") and get back real-time video snippets (from users wearing Google Glass!) in reply. This work is no where near mature enough for a full conference, and I hope the authors gained something from the paper reviews and discussion at the workshop to shape their future direction.<br /></li><li><b>An incremental, and possibly vestigial, step</b>, towards the next major conference paper on a topic. Many such papers are simply not big enough ideas for a full conference paper, but make a nice \"short paper\" for the sake of getting some idea out there.<br /><br />One example from this year is <a href=\"http://www.hotmobile.org/2014/papers/hotmobile_final/hotmobile2014-final42.pdf\">this paper on the dangers of public IPs for LTE devices</a>. This isn't something that's going to turn into a longer, more pithy paper later on, but is probably worth reporting.<br /></li><li>The <b>odd wacky paper</b> that falls under the \"hot topics\" rubric. These are increasingly rare. About the only example from this year is this <a href=\"http://synrg.csl.illinois.edu/papers/buzz.pdf\">Duke paper on adding smart capabilities to childrens' toys with smartphones</a> -- but the idea is not <i>that</i>&nbsp;radical.</li></ol>Last year at SOSP, there was a one-day workshop called <a href=\"http://sigops.org/sosp/sosp13/trios.html\">TRIOS</a> (\"Timely Results in Operating Systems\") which was an informal venue for preliminary work -- exactly to provide an outlet for papers in the first two categories above. At least TRIOS was honest about its intent, so nobody attending could be disappointed that the papers weren't \"hot\" enough.<br /><br />So, my humble proposal is to rename the workshop \"ColdMobile\" and, just to be cheeky, hold it at a ski resort in the winter.<br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1893907743149089553/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/02/taking-hot-out-of-hot-topics-workshops.html#comment-form") (title . "7 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1893907743149089553"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1893907743149089553"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/02/taking-hot-out-of-hot-topics-workshops.html") (title . "Taking the \"Hot\" out of \"Hot Topics\" workshops"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-b8BkPP3hitc/UxD9iYXzPeI/AAAAAAABfh8/QgBd7MHeLV4/s72-c/ps_5985562024104183778.jpeg") (height . "72") (width . "72"))) (thr:total nil "7"))) ("Getting a job at Google for PhD Students" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I happen to sit on one of the hiring committees at Google, which looks at interview packets and makes a recommendation about whether we should extend an offer or not. So I've read a lot of packets, and have seen some of the ways in which applicants succeed or fail to get an offer. Ph.D. students, in particular, tend to get tripped up by the Google interview process, so I thought I'd offer some advice.<br /><br />While I can't be certain, I imagine this same advice would apply to other companies which have a similar interview process that focuses on coding and algorithms.<br /><br />(Disclaimer: This is all my personal opinion, and nothing I'm saying here is sanctioned or recommended by Google in any way. In fact, it might be totally wrong. Take it with a grain of salt.)<br /><br /><b>Google's interview process</b><br /><b><br /></b>Google uses a fairly typical industry interview process: Candidates go through one or two phone screens (or possibly an on-campus interview), and if they do well they are brought on campus for a full interview loop. Each interview is an hour and consists largely of problem solving and coding on the whiteboard. Sometimes a laptop is used.<br /><br />This same process is used for <i>all</i>&nbsp;software engineering positions, regardless of level: undergrads, PhD students, and seasoned industry candidates all get the same style of interview. I had to go through this interview process upon joining Google as a professor. PhD-level candidates will generally spend one interview slot discussing their thesis work, and the questions may be more \"researchy\", but by and large it's the same for everyone.<br /><br /><b>The problem</b><br /><b><br /></b>Ph.D. students often tend to do <i>worse</i>&nbsp;on coding interviews than, say, bachelors' or masters' level candidates. Why? <b>Doing a Ph.D. simply does not train you in professional software development skills</b>, and that is (primarily) what a Google interview tests for. Undergrads, paradoxically, often do better because (a) they may have done internships at companies writing code, and (b) have practiced for this style of interview in the past.<br /><br />There is a widespread belief that doing a Ph.D. somehow elevates you above the need to demonstrate fundamental algorithms and coding skills. Having a Ph.D. from Berkeley is awesome, but you still gotta be able to write good, clean code.<br /><br />Also, part of the long process of doing a Ph.D. means you get hyper-specialized, so you get farther away from the \"basics\". Many of the Google interview questions touch on topics you probably first encountered (and mastered) as a sophomore or junior in college. I don't know about you, but I never dealt with binary search trees or graph connectivity problems directly during my Ph.D. and subsequent years as a faculty member. (Then again I'm just a systems guy, so the most sophisticated data structure I ever deal with is a hash table.)<br /><br /><b>Why the basics matter</b><br /><div><br /></div><div>Being at Google means writing production-quality software. We don't have \"research labs\" where people primarily build prototypes or write papers. I have <a href=\"http://matt-welsh.blogspot.com/2011/01/does-google-do-research.html\">written about Google's hybrid research model</a> elsewhere -- also see <a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">this CACM article</a> for more. While there are exceptions, by and large being at Google means being on a product team building and launching real products. That is even true of the more far-flung projects like self-driving cars and high-altitude Internet balloons. The quality and professionalism of the code you develop matters a great deal.</div><div><br /></div><div>Doing a Ph.D. generally trains you for building research prototypes. There is a vast difference between this and writing production-quality code. First of all, it's not good enough for the code to make sense -- or be maintainable -- only by you&nbsp;or a small number of collaborators. Adherence to good design, avoiding overcomplicated code, conforming to style guidelines, etc. are all super important. In addition, you have to really concern yourself with robustness, scalability, testability, and performance. Corner cases that aren't interesting for publishing your next paper can't be overlooked.</div><div><br /></div><div>Most of these skills can only be developed by working with a professional software development team. Research and class projects don't give you a chance to develop these skills. Undergrads gain these skills largely through internships. Unfortunately, most PhD students do internships at research labs, which may or may not provide much opportunity to build production-quality software.</div><div><br /></div><div><b>Advice for grad students</b></div><div><b><br /></b></div><div>If you're interviewing at Google, bone up on your basic algorithms and data structures. Go dust off that sophomore-level textbook and try to page it back in. I also <b>highly recommend</b>&nbsp;the book <a href=\"http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X\">Cracking the Coding Interview</a>, which gives the best description I have seen of Google-style interviews - it was written by a former Googler.</div><div><br /></div><div>Don't go in with the attitude that you're above all this. Roll up your sleeves and show them what you've got. I know it may feel silly being asked what seem like basic CS questions, but if you're really as good as you think you are, you should knock them out of the park. (Keep in mind that the questions get harder the better you are doing, so no matter what, you will probably feel like crap at the end of the day.)</div><div><br /></div><div>Every line of code you write on the whiteboard will get written up as part of the interview packet. Make it squeaky clean. Initialize variables. Use semicolons. Don't forget your constructors. Although writing sloppy pseudocode to get your meaning across might seem adequate (after all, we're all professionals here, aren't we?), attention to detail matters. Code in C++ or Java, which shows maturity. If you can only code in Python or bash shell, you're going to have trouble. If you make the slightest suggestion of wanting to code in Haskell or Lisp, the interviewer will push a hidden button which opens a trap door, dropping you into a bottomless pit. (Just kidding.)</div><div><br /></div><div>Never, <b>ever</b>&nbsp;suggest you are a \"C++ expert\", either on your resume or in person. You are not.</div><div><br /></div><div>Unfortunately, Google interviews tend to be a bit one-sided and you will not have as much opportunity to learn about Google (and what projects you might be working on) as you would like. If you do get an offer, you'll have more opportunities to come back and ask those questions. Google is notoriously secretive, so you have to trust me that there are plenty of cool things to work on.</div><div><br /></div><div>Finally: Remember that the content of the <i>interview</i> has nothing to do with the kind of <i>projects</i>&nbsp;you would work on here. You're not going to get hired by Google and be asked to implement depth-first-search or reverse a linked list -- trust me on that. I'm pretty sure we have library routines for those already.</div></div>" "http://matt-welsh.blogspot.com/feeds/1690045831024210629/comments/default" (21227 18344) old 2 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1690045831024210629") (published nil "2014-01-30T22:45:00.003-08:00") (updated nil "2014-01-30T22:50:16.984-08:00") (title ((type . "text")) "Getting a job at Google for PhD Students") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I happen to sit on one of the hiring committees at Google, which looks at interview packets and makes a recommendation about whether we should extend an offer or not. So I've read a lot of packets, and have seen some of the ways in which applicants succeed or fail to get an offer. Ph.D. students, in particular, tend to get tripped up by the Google interview process, so I thought I'd offer some advice.<br /><br />While I can't be certain, I imagine this same advice would apply to other companies which have a similar interview process that focuses on coding and algorithms.<br /><br />(Disclaimer: This is all my personal opinion, and nothing I'm saying here is sanctioned or recommended by Google in any way. In fact, it might be totally wrong. Take it with a grain of salt.)<br /><br /><b>Google's interview process</b><br /><b><br /></b>Google uses a fairly typical industry interview process: Candidates go through one or two phone screens (or possibly an on-campus interview), and if they do well they are brought on campus for a full interview loop. Each interview is an hour and consists largely of problem solving and coding on the whiteboard. Sometimes a laptop is used.<br /><br />This same process is used for <i>all</i>&nbsp;software engineering positions, regardless of level: undergrads, PhD students, and seasoned industry candidates all get the same style of interview. I had to go through this interview process upon joining Google as a professor. PhD-level candidates will generally spend one interview slot discussing their thesis work, and the questions may be more \"researchy\", but by and large it's the same for everyone.<br /><br /><b>The problem</b><br /><b><br /></b>Ph.D. students often tend to do <i>worse</i>&nbsp;on coding interviews than, say, bachelors' or masters' level candidates. Why? <b>Doing a Ph.D. simply does not train you in professional software development skills</b>, and that is (primarily) what a Google interview tests for. Undergrads, paradoxically, often do better because (a) they may have done internships at companies writing code, and (b) have practiced for this style of interview in the past.<br /><br />There is a widespread belief that doing a Ph.D. somehow elevates you above the need to demonstrate fundamental algorithms and coding skills. Having a Ph.D. from Berkeley is awesome, but you still gotta be able to write good, clean code.<br /><br />Also, part of the long process of doing a Ph.D. means you get hyper-specialized, so you get farther away from the \"basics\". Many of the Google interview questions touch on topics you probably first encountered (and mastered) as a sophomore or junior in college. I don't know about you, but I never dealt with binary search trees or graph connectivity problems directly during my Ph.D. and subsequent years as a faculty member. (Then again I'm just a systems guy, so the most sophisticated data structure I ever deal with is a hash table.)<br /><br /><b>Why the basics matter</b><br /><div><br /></div><div>Being at Google means writing production-quality software. We don't have \"research labs\" where people primarily build prototypes or write papers. I have <a href=\"http://matt-welsh.blogspot.com/2011/01/does-google-do-research.html\">written about Google's hybrid research model</a> elsewhere -- also see <a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">this CACM article</a> for more. While there are exceptions, by and large being at Google means being on a product team building and launching real products. That is even true of the more far-flung projects like self-driving cars and high-altitude Internet balloons. The quality and professionalism of the code you develop matters a great deal.</div><div><br /></div><div>Doing a Ph.D. generally trains you for building research prototypes. There is a vast difference between this and writing production-quality code. First of all, it's not good enough for the code to make sense -- or be maintainable -- only by you&nbsp;or a small number of collaborators. Adherence to good design, avoiding overcomplicated code, conforming to style guidelines, etc. are all super important. In addition, you have to really concern yourself with robustness, scalability, testability, and performance. Corner cases that aren't interesting for publishing your next paper can't be overlooked.</div><div><br /></div><div>Most of these skills can only be developed by working with a professional software development team. Research and class projects don't give you a chance to develop these skills. Undergrads gain these skills largely through internships. Unfortunately, most PhD students do internships at research labs, which may or may not provide much opportunity to build production-quality software.</div><div><br /></div><div><b>Advice for grad students</b></div><div><b><br /></b></div><div>If you're interviewing at Google, bone up on your basic algorithms and data structures. Go dust off that sophomore-level textbook and try to page it back in. I also <b>highly recommend</b>&nbsp;the book <a href=\"http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X\">Cracking the Coding Interview</a>, which gives the best description I have seen of Google-style interviews - it was written by a former Googler.</div><div><br /></div><div>Don't go in with the attitude that you're above all this. Roll up your sleeves and show them what you've got. I know it may feel silly being asked what seem like basic CS questions, but if you're really as good as you think you are, you should knock them out of the park. (Keep in mind that the questions get harder the better you are doing, so no matter what, you will probably feel like crap at the end of the day.)</div><div><br /></div><div>Every line of code you write on the whiteboard will get written up as part of the interview packet. Make it squeaky clean. Initialize variables. Use semicolons. Don't forget your constructors. Although writing sloppy pseudocode to get your meaning across might seem adequate (after all, we're all professionals here, aren't we?), attention to detail matters. Code in C++ or Java, which shows maturity. If you can only code in Python or bash shell, you're going to have trouble. If you make the slightest suggestion of wanting to code in Haskell or Lisp, the interviewer will push a hidden button which opens a trap door, dropping you into a bottomless pit. (Just kidding.)</div><div><br /></div><div>Never, <b>ever</b>&nbsp;suggest you are a \"C++ expert\", either on your resume or in person. You are not.</div><div><br /></div><div>Unfortunately, Google interviews tend to be a bit one-sided and you will not have as much opportunity to learn about Google (and what projects you might be working on) as you would like. If you do get an offer, you'll have more opportunities to come back and ask those questions. Google is notoriously secretive, so you have to trust me that there are plenty of cool things to work on.</div><div><br /></div><div>Finally: Remember that the content of the <i>interview</i> has nothing to do with the kind of <i>projects</i>&nbsp;you would work on here. You're not going to get hired by Google and be asked to implement depth-first-search or reverse a linked list -- trust me on that. I'm pretty sure we have library routines for those already.</div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1690045831024210629/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/getting-job-at-google-for-phd-students.html#comment-form") (title . "40 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1690045831024210629"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1690045831024210629"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/getting-job-at-google-for-phd-students.html") (title . "Getting a job at Google for PhD Students"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "40"))) ("Your Field Guide to Industrial Research Labs" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">There are a lot of different kinds of industrial research organizations out there. Identifying them can be tricky, so I've compiled this field guide to help you out.<br /><br /><b>The Patent Factory Research Lab</b><br /><b><br /></b>This is the classic model of research lab, and the main model that existed when I was a grad student in the late 1990s. Many of these labs no longer exist, or have transformed into one of the models below. Generally attached to a big company, this style of research lab primarily exists to bolster the parent company's patent portfolio. A secondary mission is to somehow inform the long-term product roadmap for the parent company, which may or may not be successful, depending on whether the research lab is located 50 miles or a mere 15 miles away from any buildings in which actual product teams work.<br /><br /><i>How you know you're visiting this style of lab: </i>The main decoration in researcher's offices are the little paperweights they get for every 20 patents they file.<br /><br /><b>The Academic Department inside of a Company Research Lab</b><br /><b><br /></b>This model is somewhat rare but it does exist, and a couple of companies have done a superb job building up a lab full of people who would really like to have been professors but who really don't like teaching or getting too close to undergraduates. This style of research lab focuses on cranking out paper after paper after paper and padding the ranks of every program committee in sight with its own members. Product impact is usually limited to demos, or the occasional lucky project which gets taken in by a product team and then ripped to shreds until it no longer resembles the original research in any way.<br /><br /><i>How you know you're visiting this style of lab:</i> It feels just like grad school, except everyone gets their own office, and there are a lot more Windows desktops than you would normally expect to see.<br /><br /><b>The Why Are We Still Here, Let's Hope The CEO Doesn't Notice Research Lab</b><br /><b><br /></b>This type of research lab exists only because the C-level executives have either misplaced it or forgotten it exists. Researchers here are experts in flying under the radar, steering clear of anything that might generate the slightest amount of media coverage lest they blow their cover. When asked what they are working on, they generally mumble something about \"the cloud\" which grants them another two-year reprieve until another VP-level review comes around, at which time everyone scrambles to put together demos and PowerPoint decks to look like they've been busy.<br /><br /><i>How you know you're visiting this style of lab: </i>Nobody has the slightest idea what's happening in the actual research community, and the project titles sound auto-generated.<br /><b><br /></b><b>The It's We-Could-Tell-You-But-We'd-Have-To-Kill-You Research Lab</b><br /><b><br /></b>This type of lab deals exclusively in classified defense contracts. These labs all have innocuous-sounding names which evoke the Cold War and bygone days when it was acceptable, and even encouraged, to smoke a pipe while working in the lab. Projects are done under contract from some branch of the military and generally involve satellites, nuclear warheads, lasers, or some combination of the above. On the plus side, this is the type of lab where you are most likely to encounter alien technology or invent time travel.<br /><br /><i>How you know you're visiting this style of lab: </i>All project names are comprised of inscrutable acronyms such as \"JBFM MAXCOMM\"; nobody seems to have a sense of humor.<br /><br /><b>The \"We Have a Research Lab Too\" Research Lab</b><br /><b><br /></b>This is the model exemplified by startup companies who are feeling jealous that they don't have enough Ph.D.'s working for them and feel the need to start \"Doge.com Research\" to make their mark on the world. &nbsp;This generally happens the first time such a company hires an ex-academic and makes the mistake of putting them in any kind of leadership role. Projects in this kind of lab aren't that different from regular work on the product teams, apart from the expectation that launching anything will take three times longer than a non-research team would be able to do.<br /><br /><i>How you know you're visiting this style of lab:</i>&nbsp;Hoodies with the word \"Research\" on them; free lunch.<br /><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/4512692140579848845/comments/default" (21215 26533) old 3 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-4512692140579848845") (published nil "2014-01-21T22:39:00.001-08:00") (updated nil "2014-01-21T22:39:33.053-08:00") (title ((type . "text")) "Your Field Guide to Industrial Research Labs") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">There are a lot of different kinds of industrial research organizations out there. Identifying them can be tricky, so I've compiled this field guide to help you out.<br /><br /><b>The Patent Factory Research Lab</b><br /><b><br /></b>This is the classic model of research lab, and the main model that existed when I was a grad student in the late 1990s. Many of these labs no longer exist, or have transformed into one of the models below. Generally attached to a big company, this style of research lab primarily exists to bolster the parent company's patent portfolio. A secondary mission is to somehow inform the long-term product roadmap for the parent company, which may or may not be successful, depending on whether the research lab is located 50 miles or a mere 15 miles away from any buildings in which actual product teams work.<br /><br /><i>How you know you're visiting this style of lab: </i>The main decoration in researcher's offices are the little paperweights they get for every 20 patents they file.<br /><br /><b>The Academic Department inside of a Company Research Lab</b><br /><b><br /></b>This model is somewhat rare but it does exist, and a couple of companies have done a superb job building up a lab full of people who would really like to have been professors but who really don't like teaching or getting too close to undergraduates. This style of research lab focuses on cranking out paper after paper after paper and padding the ranks of every program committee in sight with its own members. Product impact is usually limited to demos, or the occasional lucky project which gets taken in by a product team and then ripped to shreds until it no longer resembles the original research in any way.<br /><br /><i>How you know you're visiting this style of lab:</i> It feels just like grad school, except everyone gets their own office, and there are a lot more Windows desktops than you would normally expect to see.<br /><br /><b>The Why Are We Still Here, Let's Hope The CEO Doesn't Notice Research Lab</b><br /><b><br /></b>This type of research lab exists only because the C-level executives have either misplaced it or forgotten it exists. Researchers here are experts in flying under the radar, steering clear of anything that might generate the slightest amount of media coverage lest they blow their cover. When asked what they are working on, they generally mumble something about \"the cloud\" which grants them another two-year reprieve until another VP-level review comes around, at which time everyone scrambles to put together demos and PowerPoint decks to look like they've been busy.<br /><br /><i>How you know you're visiting this style of lab: </i>Nobody has the slightest idea what's happening in the actual research community, and the project titles sound auto-generated.<br /><b><br /></b><b>The It's We-Could-Tell-You-But-We'd-Have-To-Kill-You Research Lab</b><br /><b><br /></b>This type of lab deals exclusively in classified defense contracts. These labs all have innocuous-sounding names which evoke the Cold War and bygone days when it was acceptable, and even encouraged, to smoke a pipe while working in the lab. Projects are done under contract from some branch of the military and generally involve satellites, nuclear warheads, lasers, or some combination of the above. On the plus side, this is the type of lab where you are most likely to encounter alien technology or invent time travel.<br /><br /><i>How you know you're visiting this style of lab: </i>All project names are comprised of inscrutable acronyms such as \"JBFM MAXCOMM\"; nobody seems to have a sense of humor.<br /><br /><b>The \"We Have a Research Lab Too\" Research Lab</b><br /><b><br /></b>This is the model exemplified by startup companies who are feeling jealous that they don't have enough Ph.D.'s working for them and feel the need to start \"Doge.com Research\" to make their mark on the world. &nbsp;This generally happens the first time such a company hires an ex-academic and makes the mistake of putting them in any kind of leadership role. Projects in this kind of lab aren't that different from regular work on the product teams, apart from the expectation that launching anything will take three times longer than a non-research team would be able to do.<br /><br /><i>How you know you're visiting this style of lab:</i>&nbsp;Hoodies with the word \"Research\" on them; free lunch.<br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/4512692140579848845/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/your-field-guide-to-industrial-research.html#comment-form") (title . "13 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4512692140579848845"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4512692140579848845"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/your-field-guide-to-industrial-research.html") (title . "Your Field Guide to Industrial Research Labs"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "13"))) ("Google did not steal the smart contact lens from Microsoft" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Wired is carrying an article rather provocatively entitled, \"<a href=\"http://www.wired.com/business/2014/01/google-lens-microsoft/\">Google Stole Its Smart Contact Lens From Microsoft. And That’s a Good Thing</a>.\"&nbsp;While the article makes a few good points, the gist of the headline is dead wrong. I now work at Google, but I was previously an academic myself and received a significant amount of funding from Microsoft while I was at Harvard. (Standard disclaimer applies: This post represents my own opinion and not that of my employer.)<br /><div><br /></div><div>The Wired article gets it wrong when it claims that Google \"stole\" the smart contact lens project from Microsoft. It's true that Microsoft funded the original project being done by Babak Parviz when he was on the faculty at the University of Washington. Google then subsequently hired Babak (and Brian Otis, another UW faculty) to develop the project further, which was <a href=\"http://googleblog.blogspot.com/2014/01/introducing-our-smart-contact-lens.html\">recently announced on the Google Blog</a>. However, I don't think anyone would consider this \"stealing\". Suggesting that it does is a real problem, since it undercuts the open model used by many companies for funding university research.</div><div><br /></div><div>It would not surprise me if Microsoft hired former faculty to work on projects that were originally funded by Google's university research programs (which, like Microsoft, provides millions of dollars a year to university projects to undertake research). These kinds of industry research <i>gifts</i>&nbsp;generally have no strings attached. As the recipient of several Microsoft research awards, I could have used the money for anything -- pizza parties for my grad students, extravagant trips to the tropics -- without any repercussions, apart from gaining a poor reputation and probably excluding myself from consideration for future Microsoft awards. Likewise, the research output that these gifts funded had no intellectual property restrictions: the research was wholly owned by the university, and Microsoft received no IP rights whatsoever.</div><div><br /></div><div>This is a great model for industry research funding. It provides researchers with the maximal amount of flexibility, and does not preclude a researcher from funding one project from multiple sources (even multiple awards from competing companies).</div><div><br /></div><div>The Wired article does make a good point that Google seems to be doing a good job at taking these kinds of moonshot research ideas (like self-driving cars, Google Glass, and the smart contact lens project) to the next level, beyond the lab. But the implication that Google \"stole\" the research \"from\" Microsoft is disingenuous. I am sure most academics, and even Microsoft folks, would agree.</div><div><br /></div></div>" "http://matt-welsh.blogspot.com/feeds/250451166635664048/comments/default" (21212 27768) old 4 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-250451166635664048") (published nil "2014-01-19T16:23:00.001-08:00") (updated nil "2014-01-19T16:23:20.034-08:00") (title ((type . "text")) "Google did not steal the smart contact lens from Microsoft") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Wired is carrying an article rather provocatively entitled, \"<a href=\"http://www.wired.com/business/2014/01/google-lens-microsoft/\">Google Stole Its Smart Contact Lens From Microsoft. And That’s a Good Thing</a>.\"&nbsp;While the article makes a few good points, the gist of the headline is dead wrong. I now work at Google, but I was previously an academic myself and received a significant amount of funding from Microsoft while I was at Harvard. (Standard disclaimer applies: This post represents my own opinion and not that of my employer.)<br /><div><br /></div><div>The Wired article gets it wrong when it claims that Google \"stole\" the smart contact lens project from Microsoft. It's true that Microsoft funded the original project being done by Babak Parviz when he was on the faculty at the University of Washington. Google then subsequently hired Babak (and Brian Otis, another UW faculty) to develop the project further, which was <a href=\"http://googleblog.blogspot.com/2014/01/introducing-our-smart-contact-lens.html\">recently announced on the Google Blog</a>. However, I don't think anyone would consider this \"stealing\". Suggesting that it does is a real problem, since it undercuts the open model used by many companies for funding university research.</div><div><br /></div><div>It would not surprise me if Microsoft hired former faculty to work on projects that were originally funded by Google's university research programs (which, like Microsoft, provides millions of dollars a year to university projects to undertake research). These kinds of industry research <i>gifts</i>&nbsp;generally have no strings attached. As the recipient of several Microsoft research awards, I could have used the money for anything -- pizza parties for my grad students, extravagant trips to the tropics -- without any repercussions, apart from gaining a poor reputation and probably excluding myself from consideration for future Microsoft awards. Likewise, the research output that these gifts funded had no intellectual property restrictions: the research was wholly owned by the university, and Microsoft received no IP rights whatsoever.</div><div><br /></div><div>This is a great model for industry research funding. It provides researchers with the maximal amount of flexibility, and does not preclude a researcher from funding one project from multiple sources (even multiple awards from competing companies).</div><div><br /></div><div>The Wired article does make a good point that Google seems to be doing a good job at taking these kinds of moonshot research ideas (like self-driving cars, Google Glass, and the smart contact lens project) to the next level, beyond the lab. But the implication that Google \"stole\" the research \"from\" Microsoft is disingenuous. I am sure most academics, and even Microsoft folks, would agree.</div><div><br /></div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/250451166635664048/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/google-did-not-steal-smart-contact-lens.html#comment-form") (title . "2 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/250451166635664048"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/250451166635664048"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2014/01/google-did-not-steal-smart-contact-lens.html") (title . "Google did not steal the smart contact lens from Microsoft"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "2"))) ("Rewriting a large production system in Go" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">My team at Google is wrapping up an effort to rewrite a large production system (almost) entirely in <a href=\"http://golang.org/\">Go</a>. I say \"almost\" because one component of the system -- a library for transcoding between image formats -- works perfectly well in C++, so we decided to leave it as-is. But the rest of the system is 100% Go, not just wrappers to existing modules in C++ or another language. It's been a fun experience and I thought I'd share some lessons learned.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s1600/go-at-google-io-2011-videos_gopher.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s320/go-at-google-io-2011-videos_gopher.jpg\" width=\"240\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Plus, the Go language has a cute mascot ... awwww!</td></tr></tbody></table><b>Why rewrite?</b><br /><b><br /></b>The first question we must answer is why we considered a rewrite in the first place. When we started this project, we adopted an existing C++ based system, which had been developed over the course of a couple of years by two of our sister teams at Google. It's a good system and does its job remarkably well. However, it has been used in several different projects with vastly different goals, leading to a nontrivial accretion of cruft. Over time, it became apparent that for us to continue to innovate rapidly would be extremely challenging on this large, shared codebase. This is not a ding to the original developers -- it is just a fact that when certain design decisions become ossified, it becomes more difficult to rethink them, especially when multiple teams are sharing the code.<br /><br />Before doing the rewrite, we realized we needed only a small subset of the functionality of the original system -- perhaps 20% (or less) of what the other projects were doing with it. We were also looking at making some radical changes to its core logic, and wanted to experiment with new features in a way that would not impact the velocity of our team or the others using the code. Finally, the cognitive burden associated with making changes to any large, shared codebase is unbearable -- almost any change required touching lots of code that the developer did not fully understand, and updating test cases with unclear consequences for the other users of the code.<br /><br />So, we decided to fork off and do a from-scratch rewrite. The bet we made was that taking an initial productivity hit during the initial rewrite would pay off in droves when we were able to add more features over time. It has also given us an opportunity to rethink some of the core design decisions of our system, which has been extremely valuable for improving our own understanding of its workings.<br /><br /><b>Why Go?</b><br /><b><br /></b>I'll admit that at first I was highly skeptical of using Go. This production system sits directly on the serving path between users and their content, so it has to be fast. It also has to handle a large query volume, so CPU and memory efficiency are key. Go's reliance on garbage collection gave me pause (pun intended ... har har har), given how much pain Java developers go through to manage their memory footprint. Also, I was not sure how well Go would be supported for the kind of development we wanted to do inside of Google. Our system has lots of dependencies, and the last thing I wanted was to have to reinvent lots of libraries in Go that we already had in C++. Finally, there was also simply the fear of the unknown.<br /><br />My whole attitude changed when <a href=\"http://www.michaelpiatek.com/\">Michael Piatek</a> (one of the star engineers in the group) sent me an initial cut at the core system rewrite in Go, the result of less than a week's work. Unlike the original C++ based system, <b>I could actually read the code</b>, even though I didn't know Go (yet). The #1 benefit we get from Go is the lightweight concurrency provided by <a href=\"http://golang.org/doc/effective_go.html#goroutines\">goroutines</a>. Instead of a messy chain of dozens of asynchronous callbacks spread over tens of source files, the core logic of the system fits in a couple hundred lines of code, all in the same file. You just read it from top to bottom, and it makes sense.<br /><br />Michael also made the observation that <b>Go is a language designed for writing Web-based services.</b>&nbsp;Its standard libraries provide all of the machinery you need for serving HTTP, processing URLs, dealing with sockets, doing crypto, processing dates and timestamps, doing compression. Unlike, say, Python, Go is a compiled language and therefore very fast. Go's modular design makes for beautiful decomposition of code across modules, with clear explicit dependencies between them. Its incremental compilation approach makes builds lightning fast. Automatic memory management means you never have to worry about freeing memory (although the usual caveats with a GC-based language apply).<br /><br /><b>Being terse</b><br /><br />Syntactically, Go is very succinct. Indeed, the Go style guidelines encourage you to write code as tersely as possible. At first this drove me up the wall, since I was used to using long descriptive variable names and spreading expressions over as many lines as possible. But now I appreciate the terse coding approach, as it makes <i>reading and understanding</i>&nbsp;the code later much, much easier.<br /><br />Personally, I really like coding in Go. I can get to the point without having to write a bunch of boilerplate just to make the compiler happy. Unlike C++, I don't have to split the logic of my code across header files and .cc files. Unlike Java, you don't have to write anything that the compiler can infer, including the types of variables. Go feels a lot like coding in a lean scripting language, like Python, but you get type safety for free.<br /><br />Our Go-based rewrite is 121 Go source files totaling about 21K lines of code (including comments). Compare that to the original system, which was 1400 C++ source files with 460K lines of code. (Remember what I said about the new system implementing a small subset of the new system's functionality, though I do feel that the code size reduction is disproportionate to the functionality reduction.)<br /><br /><b>What about ramp-up time?</b><br /><b><br /></b>Learning Go is easy coming from a C-like language background. There are no real surprises in the language; it pretty much makes sense. The standard libraries are <a href=\"http://golang.org/pkg/\">very well documented</a>, and there are plenty of <a href=\"http://tour.golang.org/#1\">online tutorials</a>. None of the engineers on the team have taken very long at all to come up to speed in the language; heck, even one of our interns picked it up in a couple of days.<br /><br />Overall, the rewrite has taken about 5 months and is already running in production. We have also implemented 3 or 4 major new features that would have taken <b>much longer</b>&nbsp;to implement in the original C++ based system, for the reasons described above. I estimate that our team's productivity has been improved by at least a factor of ten by moving to the new codebase, and by using Go.<br /><br /><b>Why not Go?</b><br /><b><br /></b>There are a few things about Go that I'm not super happy about, and that tend to bite me from time to time.<br /><br />First, you need to \"know\" whether the variable you are dealing with is an interface or a struct. Structs can implement interfaces, of course, so in general you tend to treat these as the same thing. But when you're dealing with a struct, you might be passing by reference, in which the type is <span style=\"font-family: Courier New, Courier, monospace;\">*myStruct,</span> or you might be passing by value, in which the type is just <span style=\"font-family: Courier New, Courier, monospace;\">myStruct</span>. If, on the other hand, the thing you're dealing with is \"just\" an interface, you never have a pointer to it -- an interface <i>is</i>&nbsp;a pointer in some sense. It can get confusing when you're looking at code that is passing things around without the * to remember that it might actually \"be a pointer\" if it's an interface rather than a struct.<br /><br />Go's type inference makes for lean code, but requires you to dig a little to figure out what the type of a given variable is if it's not explicit. So given code like:<br /><blockquote class=\"tr_bq\"><span style=\"font-family: Courier New, Courier, monospace;\">foo, bar := someFunc(baz)&nbsp;</span></blockquote>You'd really like to know what <span style=\"font-family: Courier New, Courier, monospace;\">foo</span> and <span style=\"font-family: Courier New, Courier, monospace;\">bar</span> actually are, in case you want to add some new code to operate on them. If I could get out of the 1970s and use an editor other than vi, maybe I would get some help from an IDE in this regard, but I staunchly refuse to edit code with any tool that requires using a mouse.<br /><br />Finally, Go's liberal use of interfaces allows a struct to implement an interface \"by accident\". You never have to explicitly declare that a given struct implements a particular interface, although it's good coding style to mention this in the comments. The problem with this is that it can be difficult to tell when you are reading a given segment of code whether the developer intended for their struct to implement the interface that they appear to be projecting onto it. Also, if you want to refactor an interface, you have to go find all of its (undeclared) implementations more or less by hand.<br /><br />Most of all I find coding in Go <b>really, really fun</b>. This is a bad thing, since we all know that \"real\" programming is supposed to be a grueling, painful exercise of fighting with the compiler and tools. So programming in Go is making me soft. One day I'll find myself in the octagon ring with a bunch of sweaty, muscular C++ programmers bare-knuckling it out to the death, and I just know they're going to mop the floor with me. That's OK, until then I'll just keep on cuddling my stuffed gopher and running <span style=\"font-family: Courier New, Courier, monospace;\">gofmt</span> to auto-intent my code.<br /><br /><i>ObDisclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i></div>" "http://matt-welsh.blogspot.com/feeds/1632247673613801456/comments/default" (21009 21833) old 5 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1632247673613801456") (published nil "2013-08-18T16:09:00.002-07:00") (updated nil "2013-08-18T16:14:17.607-07:00") (title ((type . "text")) "Rewriting a large production system in Go") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">My team at Google is wrapping up an effort to rewrite a large production system (almost) entirely in <a href=\"http://golang.org/\">Go</a>. I say \"almost\" because one component of the system -- a library for transcoding between image formats -- works perfectly well in C++, so we decided to leave it as-is. But the rest of the system is 100% Go, not just wrappers to existing modules in C++ or another language. It's been a fun experience and I thought I'd share some lessons learned.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s1600/go-at-google-io-2011-videos_gopher.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s320/go-at-google-io-2011-videos_gopher.jpg\" width=\"240\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Plus, the Go language has a cute mascot ... awwww!</td></tr></tbody></table><b>Why rewrite?</b><br /><b><br /></b>The first question we must answer is why we considered a rewrite in the first place. When we started this project, we adopted an existing C++ based system, which had been developed over the course of a couple of years by two of our sister teams at Google. It's a good system and does its job remarkably well. However, it has been used in several different projects with vastly different goals, leading to a nontrivial accretion of cruft. Over time, it became apparent that for us to continue to innovate rapidly would be extremely challenging on this large, shared codebase. This is not a ding to the original developers -- it is just a fact that when certain design decisions become ossified, it becomes more difficult to rethink them, especially when multiple teams are sharing the code.<br /><br />Before doing the rewrite, we realized we needed only a small subset of the functionality of the original system -- perhaps 20% (or less) of what the other projects were doing with it. We were also looking at making some radical changes to its core logic, and wanted to experiment with new features in a way that would not impact the velocity of our team or the others using the code. Finally, the cognitive burden associated with making changes to any large, shared codebase is unbearable -- almost any change required touching lots of code that the developer did not fully understand, and updating test cases with unclear consequences for the other users of the code.<br /><br />So, we decided to fork off and do a from-scratch rewrite. The bet we made was that taking an initial productivity hit during the initial rewrite would pay off in droves when we were able to add more features over time. It has also given us an opportunity to rethink some of the core design decisions of our system, which has been extremely valuable for improving our own understanding of its workings.<br /><br /><b>Why Go?</b><br /><b><br /></b>I'll admit that at first I was highly skeptical of using Go. This production system sits directly on the serving path between users and their content, so it has to be fast. It also has to handle a large query volume, so CPU and memory efficiency are key. Go's reliance on garbage collection gave me pause (pun intended ... har har har), given how much pain Java developers go through to manage their memory footprint. Also, I was not sure how well Go would be supported for the kind of development we wanted to do inside of Google. Our system has lots of dependencies, and the last thing I wanted was to have to reinvent lots of libraries in Go that we already had in C++. Finally, there was also simply the fear of the unknown.<br /><br />My whole attitude changed when <a href=\"http://www.michaelpiatek.com/\">Michael Piatek</a> (one of the star engineers in the group) sent me an initial cut at the core system rewrite in Go, the result of less than a week's work. Unlike the original C++ based system, <b>I could actually read the code</b>, even though I didn't know Go (yet). The #1 benefit we get from Go is the lightweight concurrency provided by <a href=\"http://golang.org/doc/effective_go.html#goroutines\">goroutines</a>. Instead of a messy chain of dozens of asynchronous callbacks spread over tens of source files, the core logic of the system fits in a couple hundred lines of code, all in the same file. You just read it from top to bottom, and it makes sense.<br /><br />Michael also made the observation that <b>Go is a language designed for writing Web-based services.</b>&nbsp;Its standard libraries provide all of the machinery you need for serving HTTP, processing URLs, dealing with sockets, doing crypto, processing dates and timestamps, doing compression. Unlike, say, Python, Go is a compiled language and therefore very fast. Go's modular design makes for beautiful decomposition of code across modules, with clear explicit dependencies between them. Its incremental compilation approach makes builds lightning fast. Automatic memory management means you never have to worry about freeing memory (although the usual caveats with a GC-based language apply).<br /><br /><b>Being terse</b><br /><br />Syntactically, Go is very succinct. Indeed, the Go style guidelines encourage you to write code as tersely as possible. At first this drove me up the wall, since I was used to using long descriptive variable names and spreading expressions over as many lines as possible. But now I appreciate the terse coding approach, as it makes <i>reading and understanding</i>&nbsp;the code later much, much easier.<br /><br />Personally, I really like coding in Go. I can get to the point without having to write a bunch of boilerplate just to make the compiler happy. Unlike C++, I don't have to split the logic of my code across header files and .cc files. Unlike Java, you don't have to write anything that the compiler can infer, including the types of variables. Go feels a lot like coding in a lean scripting language, like Python, but you get type safety for free.<br /><br />Our Go-based rewrite is 121 Go source files totaling about 21K lines of code (including comments). Compare that to the original system, which was 1400 C++ source files with 460K lines of code. (Remember what I said about the new system implementing a small subset of the new system's functionality, though I do feel that the code size reduction is disproportionate to the functionality reduction.)<br /><br /><b>What about ramp-up time?</b><br /><b><br /></b>Learning Go is easy coming from a C-like language background. There are no real surprises in the language; it pretty much makes sense. The standard libraries are <a href=\"http://golang.org/pkg/\">very well documented</a>, and there are plenty of <a href=\"http://tour.golang.org/#1\">online tutorials</a>. None of the engineers on the team have taken very long at all to come up to speed in the language; heck, even one of our interns picked it up in a couple of days.<br /><br />Overall, the rewrite has taken about 5 months and is already running in production. We have also implemented 3 or 4 major new features that would have taken <b>much longer</b>&nbsp;to implement in the original C++ based system, for the reasons described above. I estimate that our team's productivity has been improved by at least a factor of ten by moving to the new codebase, and by using Go.<br /><br /><b>Why not Go?</b><br /><b><br /></b>There are a few things about Go that I'm not super happy about, and that tend to bite me from time to time.<br /><br />First, you need to \"know\" whether the variable you are dealing with is an interface or a struct. Structs can implement interfaces, of course, so in general you tend to treat these as the same thing. But when you're dealing with a struct, you might be passing by reference, in which the type is <span style=\"font-family: Courier New, Courier, monospace;\">*myStruct,</span> or you might be passing by value, in which the type is just <span style=\"font-family: Courier New, Courier, monospace;\">myStruct</span>. If, on the other hand, the thing you're dealing with is \"just\" an interface, you never have a pointer to it -- an interface <i>is</i>&nbsp;a pointer in some sense. It can get confusing when you're looking at code that is passing things around without the * to remember that it might actually \"be a pointer\" if it's an interface rather than a struct.<br /><br />Go's type inference makes for lean code, but requires you to dig a little to figure out what the type of a given variable is if it's not explicit. So given code like:<br /><blockquote class=\"tr_bq\"><span style=\"font-family: Courier New, Courier, monospace;\">foo, bar := someFunc(baz)&nbsp;</span></blockquote>You'd really like to know what <span style=\"font-family: Courier New, Courier, monospace;\">foo</span> and <span style=\"font-family: Courier New, Courier, monospace;\">bar</span> actually are, in case you want to add some new code to operate on them. If I could get out of the 1970s and use an editor other than vi, maybe I would get some help from an IDE in this regard, but I staunchly refuse to edit code with any tool that requires using a mouse.<br /><br />Finally, Go's liberal use of interfaces allows a struct to implement an interface \"by accident\". You never have to explicitly declare that a given struct implements a particular interface, although it's good coding style to mention this in the comments. The problem with this is that it can be difficult to tell when you are reading a given segment of code whether the developer intended for their struct to implement the interface that they appear to be projecting onto it. Also, if you want to refactor an interface, you have to go find all of its (undeclared) implementations more or less by hand.<br /><br />Most of all I find coding in Go <b>really, really fun</b>. This is a bad thing, since we all know that \"real\" programming is supposed to be a grueling, painful exercise of fighting with the compiler and tools. So programming in Go is making me soft. One day I'll find myself in the octagon ring with a bunch of sweaty, muscular C++ programmers bare-knuckling it out to the death, and I just know they're going to mop the floor with me. That's OK, until then I'll just keep on cuddling my stuffed gopher and running <span style=\"font-family: Courier New, Courier, monospace;\">gofmt</span> to auto-intent my code.<br /><br /><i>ObDisclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1632247673613801456/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/08/rewriting-large-production-system-in-go.html#comment-form") (title . "54 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1632247673613801456"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1632247673613801456"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/08/rewriting-large-production-system-in-go.html") (title . "Rewriting a large production system in Go"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-ZMZJ61vE1nQ/UhFOJ_moA2I/AAAAAAABWKw/qWJ2OZOBt8o/s72-c/go-at-google-io-2011-videos_gopher.jpg") (height . "72") (width . "72"))) (thr:total nil "54"))) ("Does the academic process slow innovation?" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I've been wondering recently whether the extended, baroque process of doing research in an academic setting (by which I mean either a university or an \"academic style\" research lab in industry) is doing more harm than good when it comes to the pace of innovation.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s1600/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"300\" src=\"http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s400/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">From&nbsp;http://academicnegativity.tumblr.com/</td></tr></tbody></table>Prior to moving to industry, I spent my whole career as an academic. It took me a while to get used to how <i>fast</i> things happen in industry. My team, which is part of Chrome, does a new major release&nbsp;<b>every six weeks.</b>&nbsp;This is head-spinningly fast compared to academic projects. Important decisions are made on the order of days, not months. Projects are started up and executed an order of magnitude faster than it would take a similarly-sized academic research group to get up to speed.<br /><br />This is not just about having plenty of funding (although that is part of it). It is also about what happens when you abandon the trappings of the academic process, for which the timelines are glacial:<br /><div style=\"text-align: left;\"></div><ul><li>A three month wait (typically) to get a decision on a conference submission, during which time you are not allowed to submit similar work elsewhere.</li><li>A six month wait on hearing back on a grant proposal submission.</li><li>A year or more wait for a journal publication, with a similar restriction on parallel submissions.</li><li>Five plus years to get a PhD.</li><li>Possibly one or two years as a postdoc.</li><li>Six to eight years to get tenure.</li><li>A lifetime of scarring as the result of the above. (Okay, I'm kidding. Sort of.)</li></ul>This is not a problem unique to computer science of course. In the medical field, the <a href=\"http://scientopia.org/blogs/drugmonkey/2012/02/14/updating-the-age-of-first-nih-r01-award-trends-flatlining/\">average age at which a PI receives their first NIH R01 grant is 44 years.</a>&nbsp;Think about that for a minute. That's 23-some-odd years <i>after graduation</i>&nbsp;before an investigator is considered an \"independent\" contributor to the research field. Is this good for innovation?<br /><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Overhead</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">Part of the problem is that the academic process is full of overheads. Take a typical conference program committee for example. Let's say the committee has 15 members, each of whom has 30 papers to review (this is pretty average, for good conferences at least). Each paper takes at least an hour to review (often more) - that's the equivalent of at least 4 work days (that is, assuming academics work only 8 hours a day ... ha ha!). Add on two more full days (minimum) for the program committee meeting and travel, and you're averaging about a full week of work for each PC member. Multiply by 15 -- double it for the two program co-chairs -- and you're talking about around 870 person-hours combined effort to decide on the 25 or so papers that will appear in the conference. <b>That's 34 person-hours of overhead per paper. </b>This doesn't count any of the overheads associated with actually organizing the conference -- making the budget, choosing the hotel, raising funds, setting up the website, publishing the proceedings, organizing the meals and poster sessions, renting the projectors ... you get my point.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>The question is, does all of this time and effort produce (a) better science or (b) lead to greater understanding or impact?</b> I want to posit that the answer is no. This process was developed decades ago in a pre-digital era where we had no other way to disseminate research results. (Hell, it's gotten much easier to run a program committee now that submissions are done via the web -- it used to be you had to print out 20 copies of your paper and mail them to the program chair who would mail out large packets to each of the committee members.)</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">But still, we cling to this process because it's the only way we know how to get PhD students hired as professors and get junior faculty tenured -- any attempt to buck the trend would no doubt jeopardize the career of some young academic. It's sad.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>How did we get here?</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">Why do we have these processes in the first place? The main reason is competition for scarce resources. Put simply, there are <b>too many academics</b>,&nbsp;and <b>not enough funding</b>&nbsp;and <b>not enough paper-slots in good conference venues</b>. Much has been said about the sad state of public funding for science research. Too many academics competing for the same pool of money means longer processes for proposal reviews and more time re-submitting proposals when they get rejected.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">As far as the limitation on conferences goes, you can't create more conferences out of thin air, because people wouldn't have time to sit on the program committees and travel to all of them (ironic, isn't it?). Whenever someone proposes a new conference venue there are groans of \"but how will we schedule it around SOSP and OSDI and NSDI and SIGCOMM?!?\" - so forget about that. Actually, I think the best model would be to adopt the practice of some research communities and have <b>one big mongo conference</b> every year that <i><b>everybody</b></i>&nbsp;goes to (ideally in Mexico) and have USENIX run it so the scientists can focus on doing science and leave the conference organization to the experts. But I digress.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">The industrial research labs don't have the same kind of funding problem, but they still compete for paper-slots. And I believe this inherently slows everything down because you can't do new research when you have to keep backtracking to get that paper you spent so many precious hours on finally published after the third round of rejections with \"a strong accept, two weak accepts, and a weak reject\" reviews. It sucks.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Innovative != Publishable</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">My inspiration for writing this post came from the amazing pace at which innovation is happening in industry these days. The most high-profile of these are crazy \"moon shot\" projects like&nbsp;<a href=\"http://www.spacex.com/\">SpaceX</a>,&nbsp;<a href=\"http://23andme.com/\">23andme</a>, and Google's&nbsp;<a href=\"http://www.google.com/loon/\">high-altitude balloons to deliver Internet access to entire cities</a>. But there are countless other, not-as-sexy innovations happening every day at companies big and small, just focused on changing the world, rather than writing papers about it.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">I want to claim that even with all of their resources, had these projects gone down the conventional academic route -- writing papers and the like -- they would have never happened. No doubt if a university had done the equivalent of, say, Google Glass and submitted a MobiSys paper on it, it would have been rejected as \"not novel enough\" since <a href=\"http://hci.stanford.edu/courses/cs547/Resources/Pictures/thad_starner.jpg\">Thad Starner has been wearing a computer on his head for 20 years</a>. And high-altitude Internet balloons? What's new about that? It's just a different form of WiFi, essentially. Nothing new there.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">We still need to publish research, though, which is important for driving innovation. But we should shift to an open, online publication model -- like <a href=\"http://arxiv.org/\">arXiv</a> -- where everything is \"accepted\" and papers are reviewed and scored informally after the fact. Work can get published much more rapidly and good work won't be stuck in the endless resubmission cycle. Scientists can stop wasting so much time and energy on program committees and conference organization. (We should still have one big conference every year so people still get to meet and drink and bounce ideas around.) &nbsp;This model is also much more amenable to publications from industry, who currently have little incentive to run the conference submission gauntlet, unless publishing papers is part of their job description. And academics can still use citation counts or \"paper ratings\" as the measure by which hiring and promotion decisions are made.</div></div>" "http://matt-welsh.blogspot.com/feeds/3326598575258206267/comments/default" (20959 37994) old 6 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3326598575258206267") (published nil "2013-07-11T22:20:00.004-07:00") (updated nil "2013-07-11T22:30:18.733-07:00") (title ((type . "text")) "Does the academic process slow innovation?") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I've been wondering recently whether the extended, baroque process of doing research in an academic setting (by which I mean either a university or an \"academic style\" research lab in industry) is doing more harm than good when it comes to the pace of innovation.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s1600/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"300\" src=\"http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s400/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">From&nbsp;http://academicnegativity.tumblr.com/</td></tr></tbody></table>Prior to moving to industry, I spent my whole career as an academic. It took me a while to get used to how <i>fast</i> things happen in industry. My team, which is part of Chrome, does a new major release&nbsp;<b>every six weeks.</b>&nbsp;This is head-spinningly fast compared to academic projects. Important decisions are made on the order of days, not months. Projects are started up and executed an order of magnitude faster than it would take a similarly-sized academic research group to get up to speed.<br /><br />This is not just about having plenty of funding (although that is part of it). It is also about what happens when you abandon the trappings of the academic process, for which the timelines are glacial:<br /><div style=\"text-align: left;\"></div><ul><li>A three month wait (typically) to get a decision on a conference submission, during which time you are not allowed to submit similar work elsewhere.</li><li>A six month wait on hearing back on a grant proposal submission.</li><li>A year or more wait for a journal publication, with a similar restriction on parallel submissions.</li><li>Five plus years to get a PhD.</li><li>Possibly one or two years as a postdoc.</li><li>Six to eight years to get tenure.</li><li>A lifetime of scarring as the result of the above. (Okay, I'm kidding. Sort of.)</li></ul>This is not a problem unique to computer science of course. In the medical field, the <a href=\"http://scientopia.org/blogs/drugmonkey/2012/02/14/updating-the-age-of-first-nih-r01-award-trends-flatlining/\">average age at which a PI receives their first NIH R01 grant is 44 years.</a>&nbsp;Think about that for a minute. That's 23-some-odd years <i>after graduation</i>&nbsp;before an investigator is considered an \"independent\" contributor to the research field. Is this good for innovation?<br /><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Overhead</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">Part of the problem is that the academic process is full of overheads. Take a typical conference program committee for example. Let's say the committee has 15 members, each of whom has 30 papers to review (this is pretty average, for good conferences at least). Each paper takes at least an hour to review (often more) - that's the equivalent of at least 4 work days (that is, assuming academics work only 8 hours a day ... ha ha!). Add on two more full days (minimum) for the program committee meeting and travel, and you're averaging about a full week of work for each PC member. Multiply by 15 -- double it for the two program co-chairs -- and you're talking about around 870 person-hours combined effort to decide on the 25 or so papers that will appear in the conference. <b>That's 34 person-hours of overhead per paper. </b>This doesn't count any of the overheads associated with actually organizing the conference -- making the budget, choosing the hotel, raising funds, setting up the website, publishing the proceedings, organizing the meals and poster sessions, renting the projectors ... you get my point.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>The question is, does all of this time and effort produce (a) better science or (b) lead to greater understanding or impact?</b> I want to posit that the answer is no. This process was developed decades ago in a pre-digital era where we had no other way to disseminate research results. (Hell, it's gotten much easier to run a program committee now that submissions are done via the web -- it used to be you had to print out 20 copies of your paper and mail them to the program chair who would mail out large packets to each of the committee members.)</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">But still, we cling to this process because it's the only way we know how to get PhD students hired as professors and get junior faculty tenured -- any attempt to buck the trend would no doubt jeopardize the career of some young academic. It's sad.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>How did we get here?</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">Why do we have these processes in the first place? The main reason is competition for scarce resources. Put simply, there are <b>too many academics</b>,&nbsp;and <b>not enough funding</b>&nbsp;and <b>not enough paper-slots in good conference venues</b>. Much has been said about the sad state of public funding for science research. Too many academics competing for the same pool of money means longer processes for proposal reviews and more time re-submitting proposals when they get rejected.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">As far as the limitation on conferences goes, you can't create more conferences out of thin air, because people wouldn't have time to sit on the program committees and travel to all of them (ironic, isn't it?). Whenever someone proposes a new conference venue there are groans of \"but how will we schedule it around SOSP and OSDI and NSDI and SIGCOMM?!?\" - so forget about that. Actually, I think the best model would be to adopt the practice of some research communities and have <b>one big mongo conference</b> every year that <i><b>everybody</b></i>&nbsp;goes to (ideally in Mexico) and have USENIX run it so the scientists can focus on doing science and leave the conference organization to the experts. But I digress.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">The industrial research labs don't have the same kind of funding problem, but they still compete for paper-slots. And I believe this inherently slows everything down because you can't do new research when you have to keep backtracking to get that paper you spent so many precious hours on finally published after the third round of rejections with \"a strong accept, two weak accepts, and a weak reject\" reviews. It sucks.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Innovative != Publishable</b></div><div style=\"text-align: left;\"><b><br /></b></div><div style=\"text-align: left;\">My inspiration for writing this post came from the amazing pace at which innovation is happening in industry these days. The most high-profile of these are crazy \"moon shot\" projects like&nbsp;<a href=\"http://www.spacex.com/\">SpaceX</a>,&nbsp;<a href=\"http://23andme.com/\">23andme</a>, and Google's&nbsp;<a href=\"http://www.google.com/loon/\">high-altitude balloons to deliver Internet access to entire cities</a>. But there are countless other, not-as-sexy innovations happening every day at companies big and small, just focused on changing the world, rather than writing papers about it.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">I want to claim that even with all of their resources, had these projects gone down the conventional academic route -- writing papers and the like -- they would have never happened. No doubt if a university had done the equivalent of, say, Google Glass and submitted a MobiSys paper on it, it would have been rejected as \"not novel enough\" since <a href=\"http://hci.stanford.edu/courses/cs547/Resources/Pictures/thad_starner.jpg\">Thad Starner has been wearing a computer on his head for 20 years</a>. And high-altitude Internet balloons? What's new about that? It's just a different form of WiFi, essentially. Nothing new there.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">We still need to publish research, though, which is important for driving innovation. But we should shift to an open, online publication model -- like <a href=\"http://arxiv.org/\">arXiv</a> -- where everything is \"accepted\" and papers are reviewed and scored informally after the fact. Work can get published much more rapidly and good work won't be stuck in the endless resubmission cycle. Scientists can stop wasting so much time and energy on program committees and conference organization. (We should still have one big conference every year so people still get to meet and drink and bounce ideas around.) &nbsp;This model is also much more amenable to publications from industry, who currently have little incentive to run the conference submission gauntlet, unless publishing papers is part of their job description. And academics can still use citation counts or \"paper ratings\" as the measure by which hiring and promotion decisions are made.</div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3326598575258206267/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/07/does-academic-process-slow-innovation.html#comment-form") (title . "37 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3326598575258206267"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3326598575258206267"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/07/does-academic-process-slow-innovation.html") (title . "Does the academic process slow innovation?"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://4.bp.blogspot.com/--trURSJLxDI/Ud-RN4ik-rI/AAAAAAABQbE/E6K9hloLTcs/s72-c/tumblr_mi4afkjBRT1rk8o0xo1_1280.jpg") (height . "72") (width . "72"))) (thr:total nil "37"))) ("What I wish systems researchers would work on" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I just got back from <a href=\"https://www.usenix.org/conference/hotos13\">HotOS 2013</a> and, frankly, it was a little depressing. Mind you, the conference was really well-organized; there were lots of great people; an amazing venue; and fine work by the program committee and chair... but I could not help being left with the feeling that the operating systems community is somewhat stuck in a rut.<br /><br />It did not help that the <a href=\"https://www.usenix.org/conference/hotos13/tech-schedule/technical-sessions\">first session</a> was about how to make network and disk I/O faster, a topic that has been a recurring theme for as long as \"systems\" has existed as a field. HotOS is <i>supposed</i>&nbsp;to represent the \"hot topics\" in the area, but when we're still arguing about problems that are 25 years old, it starts to feel not-so-hot.<br /><br />Of the 27 papers presented at the workshop, only about 2 or 3 would qualify as bold, unconventional, or truly novel research directions. The rest were basically extended abstracts of conference submissions that are either already in preparation or will be submitted in the next year or so. This is a perennial problem for HotOS, and when I <a href=\"http://static.usenix.org/events/hotos11/index.html\">chaired it in 2011</a> we had the same problem. So I can't fault the program committee on this one -- they have to work with the submissions they get, and often the \"best\" and most polished submissions represent the most mature (and hence less speculative) work. (Still, this year there was no equivalent to <a href=\"http://static.usenix.org/events/hotos11/tech/final_files/Ackley.pdf\">Dave Ackley's paper in 2011</a> which challenged us to \"<i>pledge allegiance to the light cone.</i>\")<br /><br />This got me thinking about what research areas I wish the systems research community would spend more time on. I wrote a <a href=\"http://matt-welsh.blogspot.com/2013/01/my-mobile-systems-research-wish-list.html\">similar blog post after attending HotMobile 2013</a>, so it's only fair that I would subject the systems community to the same treatment. A few ideas...<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Obligatory diisclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /><b>An escape from configuration hell:</b>&nbsp;A lot of research effort is focused on better techniques for finding and mitigating software bugs. In my experience at Google, the vast majority of production failures arise not due to bugs in the software, but bugs in the (often vast and incredibly complex) <i>configuration settings</i> that control the software. A canonical example is when someone bungles an edit to a config file which gets rolled out to the fleet, and causes jobs to start behaving in new and often not-desirable ways. The software is working exactly as intended, but the bad configuration is leading it to do the wrong thing.<br /><br />This is a really hard problem. A typical Google-scale system involves many interacting jobs running very different software packages each with their own different mechanisms for runtime configuration: whether they be command-line flags, some kind of special-purpose configuration file (often in a totally custom ASCII format of some kind), or a fancy dynamically updated key-value store. The configurations are often operating at very different levels of abstraction --- everything from deciding where to route network packets, to Thai and Slovak translations of UI strings seen by users. \"Bad configurations\" are not just obvious things like syntax errors; they also include unexpected interactions between software components when a new (perfectly valid) configuration is used.<br /><br />There are of course tools for testing configurations, catching problems and rapidly rolling back bad changes, etc. but a tremendous amount of developer and operational energy goes into fixing problems arising due to bad configurations. This seems like a ripe area for research.<br /><br /><b>Understanding interactions in a large, production system:</b>&nbsp;The common definition of a \"distributed system\" assumes that the interactions between the individual components of the system are fairly well-defined, and dictated largely by whatever messaging protocol is used (cf., two phase commit, Paxos, etc.) &nbsp;In reality, the modes of interaction are vastly more complex and subtle than simply reasoning about state transitions and messages, in the abstract way that distributed systems researchers tend to cast things.<br /><br />Let me give a concrete example. Recently we encountered a problem where a bunch of jobs in one datacenter started crashing due to running out of file descriptors. Since this roughly coincided with a push of a new software version, we assumed that there must have been some leak in the new code, so we rolled back to the old version -- but the crash kept happening. We couldn't just take down the crashing jobs and let the traffic flow to another datacenter, since we were worried that the increased load would trigger the same bug elsewhere, leading to a cascading failure. The engineer on call spent many, many hours trying different things and trying to isolate the problem, without success. Eventually we learned that another team had changed the configuration of <i>their</i>&nbsp;system which was leading to many more socket connections being made to <i>our</i>&nbsp;system, which put the jobs over the default file descriptor limit (which had never been triggered before). The \"bug\" here was not a software bug, or even a bad configuration: it was the unexpected interaction between two very different (and independently-maintained) software systems leading to a new mode of resource exhaustion.<br /><br />Somehow there needs to be a way to perform offline analysis and testing of large, complex systems so that we can catch these kinds of problems before they crop up in production. Of course we have extensive testing infrastructure, but the \"hard\" problems always come up when running in a real production environment, with real traffic and real resource constraints. Even integration tests and canarying are a joke compared to how complex production-scale systems are. I wish I had a way to take a complete snapshot of a production system and run it in an isolated environment -- at scale! -- to determine the impact of a proposed change. Doing so on real hardware would be cost-prohibitive (even at Google), so how do you do this in a virtual or simulated setting?<br /><br />I'll admit that these are not easy problems for academics to work on. Unless you have access to a real production system, it's unlikely you'll encounter this problem in an academic setting. Doing internships at companies is a great way to get exposure to this kind of thing. Replicating this problem in an academic environment may be difficult.<br /><br /><b>Pushing the envelope on new computing platforms:</b>&nbsp;I also wish the systems community would come back to working on novel and unconventional computing platforms. The work on sensor networks in the 2000's really challenged our assumptions about the capabilities and constraints of a computer system, and forced us down some interesting paths in terms of OS, language, and network protocol design. In doing these kinds of explorations, we learn a lot about how \"conventional\" OS concepts map (or don't map) onto the new platform, and the new techniques can often find a home in a more traditional setting: witness how the ideas from <a href=\"http://www.read.cs.ucla.edu/click/click\">Click</a>&nbsp;have influenced all kinds of systems unrelated to its original goals.<br /><br />I think it is inevitable that in our lifetimes we will have a wearable computing platform that is \"truly embedded\": either with a neural interface, or with something almost as good (e.g. seamless speech input and visual output in a light and almost-invisible form factor). I wore my <a href=\"http://www.google.com/glass\">Google Glass</a> to HotOS, which stirred up a lot of discussions around privacy issues, what the \"killer apps\" are, what abstractions the OS should support, and so forth. I would call Google Glass an early example of the kind of wearable platform that may well replace smartphones, tablets, and laptops as the personal computing interface of choice in the future. If that is true, then now is the time for the academic systems community to start working out how we're going to support such a platform. There are vast issues around privacy, energy management, data storage, application design, algorithms for vision and speech recognition, and much more that come up in this setting.<br /><br />These are all juicy and perfectly valid research problems for the systems community -- if only it is bold enough to work on them.<br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/5665025180094963172/comments/default" (20884 29742) old 7 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5665025180094963172") (published nil "2013-05-15T22:52:00.003-07:00") (updated nil "2013-05-15T22:52:46.145-07:00") (title ((type . "text")) "What I wish systems researchers would work on") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I just got back from <a href=\"https://www.usenix.org/conference/hotos13\">HotOS 2013</a> and, frankly, it was a little depressing. Mind you, the conference was really well-organized; there were lots of great people; an amazing venue; and fine work by the program committee and chair... but I could not help being left with the feeling that the operating systems community is somewhat stuck in a rut.<br /><br />It did not help that the <a href=\"https://www.usenix.org/conference/hotos13/tech-schedule/technical-sessions\">first session</a> was about how to make network and disk I/O faster, a topic that has been a recurring theme for as long as \"systems\" has existed as a field. HotOS is <i>supposed</i>&nbsp;to represent the \"hot topics\" in the area, but when we're still arguing about problems that are 25 years old, it starts to feel not-so-hot.<br /><br />Of the 27 papers presented at the workshop, only about 2 or 3 would qualify as bold, unconventional, or truly novel research directions. The rest were basically extended abstracts of conference submissions that are either already in preparation or will be submitted in the next year or so. This is a perennial problem for HotOS, and when I <a href=\"http://static.usenix.org/events/hotos11/index.html\">chaired it in 2011</a> we had the same problem. So I can't fault the program committee on this one -- they have to work with the submissions they get, and often the \"best\" and most polished submissions represent the most mature (and hence less speculative) work. (Still, this year there was no equivalent to <a href=\"http://static.usenix.org/events/hotos11/tech/final_files/Ackley.pdf\">Dave Ackley's paper in 2011</a> which challenged us to \"<i>pledge allegiance to the light cone.</i>\")<br /><br />This got me thinking about what research areas I wish the systems research community would spend more time on. I wrote a <a href=\"http://matt-welsh.blogspot.com/2013/01/my-mobile-systems-research-wish-list.html\">similar blog post after attending HotMobile 2013</a>, so it's only fair that I would subject the systems community to the same treatment. A few ideas...<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Obligatory diisclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /><b>An escape from configuration hell:</b>&nbsp;A lot of research effort is focused on better techniques for finding and mitigating software bugs. In my experience at Google, the vast majority of production failures arise not due to bugs in the software, but bugs in the (often vast and incredibly complex) <i>configuration settings</i> that control the software. A canonical example is when someone bungles an edit to a config file which gets rolled out to the fleet, and causes jobs to start behaving in new and often not-desirable ways. The software is working exactly as intended, but the bad configuration is leading it to do the wrong thing.<br /><br />This is a really hard problem. A typical Google-scale system involves many interacting jobs running very different software packages each with their own different mechanisms for runtime configuration: whether they be command-line flags, some kind of special-purpose configuration file (often in a totally custom ASCII format of some kind), or a fancy dynamically updated key-value store. The configurations are often operating at very different levels of abstraction --- everything from deciding where to route network packets, to Thai and Slovak translations of UI strings seen by users. \"Bad configurations\" are not just obvious things like syntax errors; they also include unexpected interactions between software components when a new (perfectly valid) configuration is used.<br /><br />There are of course tools for testing configurations, catching problems and rapidly rolling back bad changes, etc. but a tremendous amount of developer and operational energy goes into fixing problems arising due to bad configurations. This seems like a ripe area for research.<br /><br /><b>Understanding interactions in a large, production system:</b>&nbsp;The common definition of a \"distributed system\" assumes that the interactions between the individual components of the system are fairly well-defined, and dictated largely by whatever messaging protocol is used (cf., two phase commit, Paxos, etc.) &nbsp;In reality, the modes of interaction are vastly more complex and subtle than simply reasoning about state transitions and messages, in the abstract way that distributed systems researchers tend to cast things.<br /><br />Let me give a concrete example. Recently we encountered a problem where a bunch of jobs in one datacenter started crashing due to running out of file descriptors. Since this roughly coincided with a push of a new software version, we assumed that there must have been some leak in the new code, so we rolled back to the old version -- but the crash kept happening. We couldn't just take down the crashing jobs and let the traffic flow to another datacenter, since we were worried that the increased load would trigger the same bug elsewhere, leading to a cascading failure. The engineer on call spent many, many hours trying different things and trying to isolate the problem, without success. Eventually we learned that another team had changed the configuration of <i>their</i>&nbsp;system which was leading to many more socket connections being made to <i>our</i>&nbsp;system, which put the jobs over the default file descriptor limit (which had never been triggered before). The \"bug\" here was not a software bug, or even a bad configuration: it was the unexpected interaction between two very different (and independently-maintained) software systems leading to a new mode of resource exhaustion.<br /><br />Somehow there needs to be a way to perform offline analysis and testing of large, complex systems so that we can catch these kinds of problems before they crop up in production. Of course we have extensive testing infrastructure, but the \"hard\" problems always come up when running in a real production environment, with real traffic and real resource constraints. Even integration tests and canarying are a joke compared to how complex production-scale systems are. I wish I had a way to take a complete snapshot of a production system and run it in an isolated environment -- at scale! -- to determine the impact of a proposed change. Doing so on real hardware would be cost-prohibitive (even at Google), so how do you do this in a virtual or simulated setting?<br /><br />I'll admit that these are not easy problems for academics to work on. Unless you have access to a real production system, it's unlikely you'll encounter this problem in an academic setting. Doing internships at companies is a great way to get exposure to this kind of thing. Replicating this problem in an academic environment may be difficult.<br /><br /><b>Pushing the envelope on new computing platforms:</b>&nbsp;I also wish the systems community would come back to working on novel and unconventional computing platforms. The work on sensor networks in the 2000's really challenged our assumptions about the capabilities and constraints of a computer system, and forced us down some interesting paths in terms of OS, language, and network protocol design. In doing these kinds of explorations, we learn a lot about how \"conventional\" OS concepts map (or don't map) onto the new platform, and the new techniques can often find a home in a more traditional setting: witness how the ideas from <a href=\"http://www.read.cs.ucla.edu/click/click\">Click</a>&nbsp;have influenced all kinds of systems unrelated to its original goals.<br /><br />I think it is inevitable that in our lifetimes we will have a wearable computing platform that is \"truly embedded\": either with a neural interface, or with something almost as good (e.g. seamless speech input and visual output in a light and almost-invisible form factor). I wore my <a href=\"http://www.google.com/glass\">Google Glass</a> to HotOS, which stirred up a lot of discussions around privacy issues, what the \"killer apps\" are, what abstractions the OS should support, and so forth. I would call Google Glass an early example of the kind of wearable platform that may well replace smartphones, tablets, and laptops as the personal computing interface of choice in the future. If that is true, then now is the time for the academic systems community to start working out how we're going to support such a platform. There are vast issues around privacy, energy management, data storage, application design, algorithms for vision and speech recognition, and much more that come up in this setting.<br /><br />These are all juicy and perfectly valid research problems for the systems community -- if only it is bold enough to work on them.<br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5665025180094963172/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/05/what-i-wish-systems-researchers-would.html#comment-form") (title . "44 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5665025180094963172"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5665025180094963172"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/05/what-i-wish-systems-researchers-would.html") (title . "What I wish systems researchers would work on"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "44"))) ("The other side of \"academic freedom\"" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">My <a href=\"http://matt-welsh.blogspot.com/2013/04/running-software-team-at-google.html\">various blog posts</a> about <a href=\"http://matt-welsh.blogspot.com/2010/11/why-im-leaving-harvard.html\">moving from academia to industry</a> have prompted a number of conversations with PhD students who are considering academic careers. The most oft-cited reason for wanting a faculty job is \"academic freedom,\" which is typically described as \"being able to work on anything you want.\" This is a nice theory, but I think it's important to understand the realities, especially for pre-tenure, junior faculty.<br /><div><br /></div><div>I don't believe that most professors (even tenured ones) can genuinely work on \"anything they want.\" In practice, as a professor you are constrained by at least four things:<br /><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li>What you can get funding to do;</li><li>What you can publish (good) papers about;</li><li>What you can get students to help you with;</li><li>What you can do better than anyone else in the field.</li></ul>These are important limitations to consider, and I want to take them one by one.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Funding doesn't come easy.</b>&nbsp;When I was a PhD student at Berkeley, I was fortunate to be a student of <a href=\"http://www.cs.berkeley.edu/~culler/\">David Culler</a>'s, who had what seemed like an endless supply of funding from big DARPA and NSF grants, among others. When I went to start my faculty career, he (and many others) told me I would have \"no problem\" getting plenty of funding. This turned out not to be true. Shortly after I started my faculty job, DARPA all but shut down their programs in computer science, and NSF grants became heavily constrained (and much more competitive). Being a freshly-minted faculty member meant I was essentially a nobody, but that didn't mean that NSF review panels took pity on me -- apart from special programs like the CAREER award, you're competing with the most senior, established people in your field for every grant. To make matters worse, I didn't have a lot of senior colleagues in my area at Harvard to write proposals with, so I mostly had to go it alone.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">Now, I will readily admit that I suck at writing grants, although according to my colleagues my hit rate for funding was about on par with other profs in my area. However, there were several projects that I simply <b>could not do</b>&nbsp;because I couldn't get funding for them. I tried for <b>four years</b> to get an NSF grant for our work on <a href=\"http://fiji.eecs.harvard.edu/Volcano\">monitoring volcanoes with sensor networks</a> -- which was arguably the thing I was most famous for as a professor. I failed. As a result we never did the large-scale, 100-node, multi-month study that we had hoped to do. It was a huge disappointment and taught me a valuable lesson that you can't work on something that you can't get funding for.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Who decides which problems are sexy (and therefore publishable)?</b>&nbsp;I'll tell you: it's the 30-some-odd people who serve on the program committees of the top conferences in your area year after year. It is very rare for a faculty member to buck the trend of which topics are \"hot\" in their area, since they would run a significant risk of not being able to publish in the top venues. This can be absolutely disastrous for junior faculty who need a strong publication record to get tenure. I know of several faculty who were denied tenure <i>specifically</i> because they chose to work on problems outside of the mainstream, and were not able to publish enough top papers as a result. So, sure, they could work on \"anything they wanted,\" but that ended up getting them fired.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">Now, there are some folks (David Culler being one of them) who are able to essentially start new fields and get the community to go along with them. I argue that most professors are not able to do this, even tenured ones. Most people have to go where the funding and the publication venues are.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>What can you get students to work on?</b>&nbsp;I don't mean this in a kind of grad-students-won't-write-unit-tests kind of way (although that is also true). What I mean is how likely is it that you will find grad students <i>in your field</i>&nbsp;who have the requisite skills to undertake a particular research agenda? In my case, I would have killed for some students who really knew how to design circuit boards. Or students who had some deep understanding of compiler optimization -- but still wanted to work on (and publish) in the area of operating systems. A bunch of times I felt that the problems I could tackle were circumscribed by my students' (and my own) technical skills. This has nothing to do with the \"quality\" of the students; it's just the fact that PhD students (by definition) have to be hyper-specialized. This means that grad students in a given area tend to have a fairly narrow set of skills, which can be a limitation at times.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Can you differentiate your research?</b>&nbsp;The final (and arguably most important) aspect of being successful as a faculty member is being able to solve new problems better than anyone else in your area. It is not usually enough to simply do a better job solving the same problem as someone else -- you need to have a new idea, a new spin, a new approach -- or work on a different problem. Hot areas tend to get overcrowded, making it difficult for individual faculty to differentiate themselves. For a while it felt like everyone was working on peer-to-peer networking. A bunch of \"me too\" research projects started up, most of which were forgettable. Being one of those \"me too\" researchers in a crowded area would be a very bad idea for a pre-tenure faculty member.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Do things get better after tenure?</b>&nbsp;I didn't stick around long enough to find out, so I don't know. I definitely know some tenured faculty who are coasting and care a lot less about where and how much they publish, or who tend to dabble rather than take a more focused research agenda post-tenure. Certainly you cannot get fired if you are not publishing or bringing in the research dollars anymore, but to me this sounds like an unsatisfying career. Others -- like David Culler -- are able to embark on ambitious, paradigm-shifting projects (like <a href=\"http://now.cs.berkeley.edu/\">NOW</a> and <a href=\"http://www.tinyos.net/\">TinyOS</a>) without much regard to which way the winds are blowing. I think most tenured faculty would agree that they are subject to the same sets of pressures to work on fundable, publishable research as pre-tenure faculty, if they care about having impact.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Okay, but how much freedom do you have in industry?</b>&nbsp;This is worth a separate post on its own, which I will write sometime soon. The short version is that it depends a lot on the kind of job you have and what kind of company you work for. My team at Google has a <a href=\"http://matt-welsh.blogspot.com/2011/05/what-im-working-on-at-google-making.html\">pretty broad mandate</a> which gives us a fair bit of freedom. But unlike academia, we aren't limited by funding (apart from headcount, which is substantial); technical skills (we can hire people with the skills we need); or the somewhat unpredictable whims of a research community or NSF panel. So, yes, there are limitations, but I think they are no more severe, and a lot more rational, than what you often experience as an academic.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /><div><div><br /></div></div></div></div></div>" "http://matt-welsh.blogspot.com/feeds/7101143301267252226/comments/default" (20852 26618) old 8 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7101143301267252226") (published nil "2013-04-21T15:21:00.002-07:00") (updated nil "2013-04-21T15:28:10.593-07:00") (title ((type . "text")) "The other side of \"academic freedom\"") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">My <a href=\"http://matt-welsh.blogspot.com/2013/04/running-software-team-at-google.html\">various blog posts</a> about <a href=\"http://matt-welsh.blogspot.com/2010/11/why-im-leaving-harvard.html\">moving from academia to industry</a> have prompted a number of conversations with PhD students who are considering academic careers. The most oft-cited reason for wanting a faculty job is \"academic freedom,\" which is typically described as \"being able to work on anything you want.\" This is a nice theory, but I think it's important to understand the realities, especially for pre-tenure, junior faculty.<br /><div><br /></div><div>I don't believe that most professors (even tenured ones) can genuinely work on \"anything they want.\" In practice, as a professor you are constrained by at least four things:<br /><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li>What you can get funding to do;</li><li>What you can publish (good) papers about;</li><li>What you can get students to help you with;</li><li>What you can do better than anyone else in the field.</li></ul>These are important limitations to consider, and I want to take them one by one.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Funding doesn't come easy.</b>&nbsp;When I was a PhD student at Berkeley, I was fortunate to be a student of <a href=\"http://www.cs.berkeley.edu/~culler/\">David Culler</a>'s, who had what seemed like an endless supply of funding from big DARPA and NSF grants, among others. When I went to start my faculty career, he (and many others) told me I would have \"no problem\" getting plenty of funding. This turned out not to be true. Shortly after I started my faculty job, DARPA all but shut down their programs in computer science, and NSF grants became heavily constrained (and much more competitive). Being a freshly-minted faculty member meant I was essentially a nobody, but that didn't mean that NSF review panels took pity on me -- apart from special programs like the CAREER award, you're competing with the most senior, established people in your field for every grant. To make matters worse, I didn't have a lot of senior colleagues in my area at Harvard to write proposals with, so I mostly had to go it alone.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">Now, I will readily admit that I suck at writing grants, although according to my colleagues my hit rate for funding was about on par with other profs in my area. However, there were several projects that I simply <b>could not do</b>&nbsp;because I couldn't get funding for them. I tried for <b>four years</b> to get an NSF grant for our work on <a href=\"http://fiji.eecs.harvard.edu/Volcano\">monitoring volcanoes with sensor networks</a> -- which was arguably the thing I was most famous for as a professor. I failed. As a result we never did the large-scale, 100-node, multi-month study that we had hoped to do. It was a huge disappointment and taught me a valuable lesson that you can't work on something that you can't get funding for.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Who decides which problems are sexy (and therefore publishable)?</b>&nbsp;I'll tell you: it's the 30-some-odd people who serve on the program committees of the top conferences in your area year after year. It is very rare for a faculty member to buck the trend of which topics are \"hot\" in their area, since they would run a significant risk of not being able to publish in the top venues. This can be absolutely disastrous for junior faculty who need a strong publication record to get tenure. I know of several faculty who were denied tenure <i>specifically</i> because they chose to work on problems outside of the mainstream, and were not able to publish enough top papers as a result. So, sure, they could work on \"anything they wanted,\" but that ended up getting them fired.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">Now, there are some folks (David Culler being one of them) who are able to essentially start new fields and get the community to go along with them. I argue that most professors are not able to do this, even tenured ones. Most people have to go where the funding and the publication venues are.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>What can you get students to work on?</b>&nbsp;I don't mean this in a kind of grad-students-won't-write-unit-tests kind of way (although that is also true). What I mean is how likely is it that you will find grad students <i>in your field</i>&nbsp;who have the requisite skills to undertake a particular research agenda? In my case, I would have killed for some students who really knew how to design circuit boards. Or students who had some deep understanding of compiler optimization -- but still wanted to work on (and publish) in the area of operating systems. A bunch of times I felt that the problems I could tackle were circumscribed by my students' (and my own) technical skills. This has nothing to do with the \"quality\" of the students; it's just the fact that PhD students (by definition) have to be hyper-specialized. This means that grad students in a given area tend to have a fairly narrow set of skills, which can be a limitation at times.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Can you differentiate your research?</b>&nbsp;The final (and arguably most important) aspect of being successful as a faculty member is being able to solve new problems better than anyone else in your area. It is not usually enough to simply do a better job solving the same problem as someone else -- you need to have a new idea, a new spin, a new approach -- or work on a different problem. Hot areas tend to get overcrowded, making it difficult for individual faculty to differentiate themselves. For a while it felt like everyone was working on peer-to-peer networking. A bunch of \"me too\" research projects started up, most of which were forgettable. Being one of those \"me too\" researchers in a crowded area would be a very bad idea for a pre-tenure faculty member.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Do things get better after tenure?</b>&nbsp;I didn't stick around long enough to find out, so I don't know. I definitely know some tenured faculty who are coasting and care a lot less about where and how much they publish, or who tend to dabble rather than take a more focused research agenda post-tenure. Certainly you cannot get fired if you are not publishing or bringing in the research dollars anymore, but to me this sounds like an unsatisfying career. Others -- like David Culler -- are able to embark on ambitious, paradigm-shifting projects (like <a href=\"http://now.cs.berkeley.edu/\">NOW</a> and <a href=\"http://www.tinyos.net/\">TinyOS</a>) without much regard to which way the winds are blowing. I think most tenured faculty would agree that they are subject to the same sets of pressures to work on fundable, publishable research as pre-tenure faculty, if they care about having impact.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Okay, but how much freedom do you have in industry?</b>&nbsp;This is worth a separate post on its own, which I will write sometime soon. The short version is that it depends a lot on the kind of job you have and what kind of company you work for. My team at Google has a <a href=\"http://matt-welsh.blogspot.com/2011/05/what-im-working-on-at-google-making.html\">pretty broad mandate</a> which gives us a fair bit of freedom. But unlike academia, we aren't limited by funding (apart from headcount, which is substantial); technical skills (we can hire people with the skills we need); or the somewhat unpredictable whims of a research community or NSF panel. So, yes, there are limitations, but I think they are no more severe, and a lot more rational, than what you often experience as an academic.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /><div><div><br /></div></div></div></div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7101143301267252226/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/the-other-side-of-academic-freedom.html#comment-form") (title . "48 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7101143301267252226"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7101143301267252226"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/the-other-side-of-academic-freedom.html") (title . "The other side of \"academic freedom\""))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "48"))) ("Running a software team at Google" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I'm often asked what my job is like at Google since I left academia. I guess going from tenured professor to software engineer sounds like a big step down. Job titles aside, I'm much happier and more productive in my new role than I was in the 8 years at Harvard, though there are actually a lot of similarities between being a professor and running a software team.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s1600/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"211\" src=\"http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s320/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">LIKE A BOSS.</td></tr></tbody></table>I lead a team at Google's Seattle office which is responsible for a range of projects in the mobile web performance area (for more background on my team's work see my <a href=\"http://matt-welsh.blogspot.com/2011/05/what-im-working-on-at-google-making.html\">earlier blog post on the topic</a>). One of our projects is the recently-announced <a href=\"https://developers.google.com/chrome/mobile/docs/data-compression\">data compression proxy support in Chrome Mobile</a>. We also work on the <a href=\"https://developers.google.com/speed/pagespeed/\">PageSpeed</a> suite of technologies, specifically focusing on mobile web optimization, as well as a bunch of other cool stuff that I can't talk about just yet.<br /><br /><div style=\"text-align: left;\"></div>My official job title is just \"software engineer,\" which is the most common (and coveted) role at Google. (I say \"coveted\" because engineers make most of the important decisions.) Unofficially, I'm what we call a&nbsp;\"Tech Lead Manager,\" which means I am responsible both for the technical direction of the team as well as doing the people management stuff. (Some people use the alternate term \"Über Tech Lead\" but this has one too many umlauts for me.) A TLM is not a very common role at Google: most teams have separate people doing the TL and M jobs. I do both in part because, being based out of Seattle, it doesn't make sense to have my team report to a \"regular\" manager who would likely be in Mountain View. Besides I'm really happy to do both jobs and enjoy the variety.<br /><br />There are four main aspects to my job: (1) Defining the technical agenda for the team and making sure we're successful; (2) Writing code of my own; (3) Acting as the main liaison between our team and other groups at Google, and (4) Doing the \"people management\" for the team in terms of hiring, performance reviews, promotion, and so forth.<br /><br />Academics will immediately recognize the parallels with being a professor. In an academic research group, the professor defines the technical scope of the group as well as mentors and guides the graduate students. The big difference here is that I don't consider the folks on my team to be my \"apprentices\" as a professor would with graduate students. Indeed, most people on my team are much better software engineers than I am, and I lean on them heavily to do the really hard work of building solid, reliable software. My job is to shield the engineers on my team from distractions, and support them so they can be successful.<br /><br />There are of course many differences with academic life. Unlike a professor, I don't have to constantly beg for funding to keep the projects going. I have very few distractions in terms of committees, travel, writing recommendation letters, pointless meetings. Of course, I also don't have to teach. (I loved teaching, but the amount of work it requires to do well is gargantuan.) Most importantly, my team's success is no longer defined through an&nbsp;<a href=\"http://matt-welsh.blogspot.com/2010/05/proposal-improving-nsf-review-process.html\">arbitrary and often broken peer review process</a>, which applies to&nbsp;pretty much everything&nbsp;that matters&nbsp;in the academic world. This is the best part. If we can execute well and deliver products that have impact, we win. It no longer comes down to making three grumpy program committee members happy with the&nbsp;<a href=\"http://matt-welsh.blogspot.com/2010/01/paper-formatting-gestapo.html\">font spacing in your paper submissions</a>. But I digress.<br /><br />I do spend about 50% of my time writing code. I really need to have a few solid hours each day hacking in order to stay sane. Since I don't have as many coding cycles (and service more interrupts) than other people on my team, I tend to take on the more mundane tasks such as writing MapReduce code to analyze service logs and generate reports on performance. I actually like this kind of work as it means dealing with a huge amount of data and slicing and dicing it in various interesting ways. I also don't need to show off my heroic coding skills in order to get promoted at this point, so I let the folks who are better hackers implement the sexy new features.<br /><br />I do exert a lot of influence over the direction that our team's software takes, in terms of overall design and architecture. Largely this is because I have more experience thinking about systems design than some of the folks on my team, although it does mean that I need to defer to the people writing the actual code when there are hairy details with which I am unfamiliar. A big part of my job is setting priorities and making the call when we are forced to choose between several unappealing options to solve a particular problem. (It also means I am the one who takes the heat if I make the wrong decision.)<br /><br />I reckon that the people management aspects of my job are pretty standard in industry: I do the periodic performance reviews for my direct reports, participate in compensation planning, work on hiring new people to the team (both internally and externally), and advocate for my team members when they go up for promotion. Of course I meet with each of my direct reports on a regular basis and help them with setting priorities, clearing obstacles, and career development.<br /><br />The most varied part of my job is acting as the representative for our team and working with other teams at Google to make amazing things happen. My team is part of the larger Chrome project, but we have connections with many other teams from all over the world doing work across Google's technology stack. I am also frequently called into meetings to figure out how to coordinate my team's work with other things going on around the company. So it never gets boring. Fortunately we are pretty efficient at meetings (half an hour suffices for almost everything) and even with all of this, my meeting load is about half of what it was as an academic. (Besides, these meetings are <i>almost</i>&nbsp;always productive; compared to academic meetings where only about 10% of them have any tangible outcome.)<br /><br />Despite the heavy load and lots of pokers in the fire, my work at Google is largely a 9-to-5 job. I rarely work on the evenings and weekends, unless there's something I'm really itching to do, and the volume of email I get drops to near-zero when it's outside of working hours. (Although I am on our team's pager rotation and recently spent a few hours in the middle of the night fixing a production bug.) This is a huge relief from the constant pressure to work, work, work that is endemic of professors. I also feel that I get much more done now, in less time, due to fewer distractions and being able to maintain a clear focus. The way I see it is this: If I'm being asked to do more than I can get done in a sane work week, we need to hire more people. Fortunately that is rarely a problem.<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/5322403964728588206/comments/default" (20835 45203) old 9 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5322403964728588206") (published nil "2013-04-08T23:09:00.000-07:00") (updated nil "2013-04-08T23:09:23.401-07:00") (title ((type . "text")) "Running a software team at Google") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I'm often asked what my job is like at Google since I left academia. I guess going from tenured professor to software engineer sounds like a big step down. Job titles aside, I'm much happier and more productive in my new role than I was in the 8 years at Harvard, though there are actually a lot of similarities between being a professor and running a software team.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s1600/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"211\" src=\"http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s320/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">LIKE A BOSS.</td></tr></tbody></table>I lead a team at Google's Seattle office which is responsible for a range of projects in the mobile web performance area (for more background on my team's work see my <a href=\"http://matt-welsh.blogspot.com/2011/05/what-im-working-on-at-google-making.html\">earlier blog post on the topic</a>). One of our projects is the recently-announced <a href=\"https://developers.google.com/chrome/mobile/docs/data-compression\">data compression proxy support in Chrome Mobile</a>. We also work on the <a href=\"https://developers.google.com/speed/pagespeed/\">PageSpeed</a> suite of technologies, specifically focusing on mobile web optimization, as well as a bunch of other cool stuff that I can't talk about just yet.<br /><br /><div style=\"text-align: left;\"></div>My official job title is just \"software engineer,\" which is the most common (and coveted) role at Google. (I say \"coveted\" because engineers make most of the important decisions.) Unofficially, I'm what we call a&nbsp;\"Tech Lead Manager,\" which means I am responsible both for the technical direction of the team as well as doing the people management stuff. (Some people use the alternate term \"Über Tech Lead\" but this has one too many umlauts for me.) A TLM is not a very common role at Google: most teams have separate people doing the TL and M jobs. I do both in part because, being based out of Seattle, it doesn't make sense to have my team report to a \"regular\" manager who would likely be in Mountain View. Besides I'm really happy to do both jobs and enjoy the variety.<br /><br />There are four main aspects to my job: (1) Defining the technical agenda for the team and making sure we're successful; (2) Writing code of my own; (3) Acting as the main liaison between our team and other groups at Google, and (4) Doing the \"people management\" for the team in terms of hiring, performance reviews, promotion, and so forth.<br /><br />Academics will immediately recognize the parallels with being a professor. In an academic research group, the professor defines the technical scope of the group as well as mentors and guides the graduate students. The big difference here is that I don't consider the folks on my team to be my \"apprentices\" as a professor would with graduate students. Indeed, most people on my team are much better software engineers than I am, and I lean on them heavily to do the really hard work of building solid, reliable software. My job is to shield the engineers on my team from distractions, and support them so they can be successful.<br /><br />There are of course many differences with academic life. Unlike a professor, I don't have to constantly beg for funding to keep the projects going. I have very few distractions in terms of committees, travel, writing recommendation letters, pointless meetings. Of course, I also don't have to teach. (I loved teaching, but the amount of work it requires to do well is gargantuan.) Most importantly, my team's success is no longer defined through an&nbsp;<a href=\"http://matt-welsh.blogspot.com/2010/05/proposal-improving-nsf-review-process.html\">arbitrary and often broken peer review process</a>, which applies to&nbsp;pretty much everything&nbsp;that matters&nbsp;in the academic world. This is the best part. If we can execute well and deliver products that have impact, we win. It no longer comes down to making three grumpy program committee members happy with the&nbsp;<a href=\"http://matt-welsh.blogspot.com/2010/01/paper-formatting-gestapo.html\">font spacing in your paper submissions</a>. But I digress.<br /><br />I do spend about 50% of my time writing code. I really need to have a few solid hours each day hacking in order to stay sane. Since I don't have as many coding cycles (and service more interrupts) than other people on my team, I tend to take on the more mundane tasks such as writing MapReduce code to analyze service logs and generate reports on performance. I actually like this kind of work as it means dealing with a huge amount of data and slicing and dicing it in various interesting ways. I also don't need to show off my heroic coding skills in order to get promoted at this point, so I let the folks who are better hackers implement the sexy new features.<br /><br />I do exert a lot of influence over the direction that our team's software takes, in terms of overall design and architecture. Largely this is because I have more experience thinking about systems design than some of the folks on my team, although it does mean that I need to defer to the people writing the actual code when there are hairy details with which I am unfamiliar. A big part of my job is setting priorities and making the call when we are forced to choose between several unappealing options to solve a particular problem. (It also means I am the one who takes the heat if I make the wrong decision.)<br /><br />I reckon that the people management aspects of my job are pretty standard in industry: I do the periodic performance reviews for my direct reports, participate in compensation planning, work on hiring new people to the team (both internally and externally), and advocate for my team members when they go up for promotion. Of course I meet with each of my direct reports on a regular basis and help them with setting priorities, clearing obstacles, and career development.<br /><br />The most varied part of my job is acting as the representative for our team and working with other teams at Google to make amazing things happen. My team is part of the larger Chrome project, but we have connections with many other teams from all over the world doing work across Google's technology stack. I am also frequently called into meetings to figure out how to coordinate my team's work with other things going on around the company. So it never gets boring. Fortunately we are pretty efficient at meetings (half an hour suffices for almost everything) and even with all of this, my meeting load is about half of what it was as an academic. (Besides, these meetings are <i>almost</i>&nbsp;always productive; compared to academic meetings where only about 10% of them have any tangible outcome.)<br /><br />Despite the heavy load and lots of pokers in the fire, my work at Google is largely a 9-to-5 job. I rarely work on the evenings and weekends, unless there's something I'm really itching to do, and the volume of email I get drops to near-zero when it's outside of working hours. (Although I am on our team's pager rotation and recently spent a few hours in the middle of the night fixing a production bug.) This is a huge relief from the constant pressure to work, work, work that is endemic of professors. I also feel that I get much more done now, in less time, due to fewer distractions and being able to maintain a clear focus. The way I see it is this: If I'm being asked to do more than I can get done in a sane work week, we need to hire more people. Fortunately that is rarely a problem.<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5322403964728588206/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/running-software-team-at-google.html#comment-form") (title . "38 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5322403964728588206"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5322403964728588206"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/04/running-software-team-at-google.html") (title . "Running a software team at Google"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://4.bp.blogspot.com/-cMWvabv3o-g/UWOts7HHpLI/AAAAAAABGrA/6QBgwPxtNQA/s72-c/SNL-Digital-Short-Like-a-Boss-Andy-Samberg.jpg") (height . "72") (width . "72"))) (thr:total nil "38"))) ("Looking back on 1 million pageviews" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This blog just hit one million pageviews:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s1600/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"171\" src=\"http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s640/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png\" width=\"640\" /></a></div>Seems like a pretty cool milestone to me. I never imagined I'd get so much traffic.<br /><br />Just for fun, here are the top five most popular posts on this blog so far:<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/11/why-im-leaving-harvard.html\">Why I'm Leaving Harvard</a></b>&nbsp;(99263 pageviews), in which I announce my departure from Harvard to Google. I guess this post became a kind of touchstone for a bunch of people considering an academic career, or those who also made the decision to leave academia. I'm often asked whether I still think I made the right decision after nearly 3 years at Google. The answer is a resounding yes: I'm extremely happy and my team is doing amazing things - <a href=\"https://developers.google.com/chrome/mobile/docs/data-compression\">some of which you can read about here</a>.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/09/so-you-want-to-go-to-grad-school.html\">So, you want to go to grad school?</a></b>&nbsp;(43314 pageviews), in which I try to give an honest assessment of why someone should (or should not) do a PhD in Computer Science. The main thing I try to dispel is this myth that you should \"take a year off\" and work in industry before going to grad school. Way too many students tell me that they plan to do this, and I think it is a really bad idea if you are serious about doing a PhD.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/12/day-in-life-of-googler.html\">Day in the life of a Googler</a> </b>(33885 pageviews), which was intended as a tongue-in-cheek look at the difference between a day at Google and a day as a professor. Somehow this got taken seriously by people, and someone sent me a link to a Chinese translation that was getting a lot of hits and comments (in Chinese). My guess is that the intended humor was lost in translation.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2009/02/how-i-almost-killed-facebook.html\">How I almost killed Facebook</a></b>&nbsp;(28367 pageviews), an early post about the time I tried to talk Mark Zuckerberg out of dropping out of Harvard to do a startup. Thankfully he did not listen to me.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2011/09/programming-computer-science.html\">Programming != Computer Science</a> </b>(25794 pageviews), a little rant against grad students who seem to mix up writing software with doing research.<br /><br />Of course, not all of my posts have been widely read. Going back over them, it looks like the ones with the smallest number of hits focus on specific research topics, like my <b><a href=\"http://matt-welsh.blogspot.com/2009/11/sensys-2009-day-one.html\">trip report for SenSys 2009</a></b>&nbsp;(115 pageviews!) and an announcement for <b><a href=\"http://matt-welsh.blogspot.com/2009/08/postdoc-openings-on-robobees-project.html\">postdoc openings in my group</a></b>&nbsp;(a whopping 68 pageviews). I guess I should stick to blogging about Mark Zuckerberg instead.<br /><br /><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/5177872052049881551/comments/default" (20819 52615) old 10 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5177872052049881551") (published nil "2013-03-21T21:58:00.002-07:00") (updated nil "2013-03-27T21:56:39.018-07:00") (title ((type . "text")) "Looking back on 1 million pageviews") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This blog just hit one million pageviews:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s1600/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"171\" src=\"http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s640/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png\" width=\"640\" /></a></div>Seems like a pretty cool milestone to me. I never imagined I'd get so much traffic.<br /><br />Just for fun, here are the top five most popular posts on this blog so far:<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/11/why-im-leaving-harvard.html\">Why I'm Leaving Harvard</a></b>&nbsp;(99263 pageviews), in which I announce my departure from Harvard to Google. I guess this post became a kind of touchstone for a bunch of people considering an academic career, or those who also made the decision to leave academia. I'm often asked whether I still think I made the right decision after nearly 3 years at Google. The answer is a resounding yes: I'm extremely happy and my team is doing amazing things - <a href=\"https://developers.google.com/chrome/mobile/docs/data-compression\">some of which you can read about here</a>.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/09/so-you-want-to-go-to-grad-school.html\">So, you want to go to grad school?</a></b>&nbsp;(43314 pageviews), in which I try to give an honest assessment of why someone should (or should not) do a PhD in Computer Science. The main thing I try to dispel is this myth that you should \"take a year off\" and work in industry before going to grad school. Way too many students tell me that they plan to do this, and I think it is a really bad idea if you are serious about doing a PhD.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2010/12/day-in-life-of-googler.html\">Day in the life of a Googler</a> </b>(33885 pageviews), which was intended as a tongue-in-cheek look at the difference between a day at Google and a day as a professor. Somehow this got taken seriously by people, and someone sent me a link to a Chinese translation that was getting a lot of hits and comments (in Chinese). My guess is that the intended humor was lost in translation.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2009/02/how-i-almost-killed-facebook.html\">How I almost killed Facebook</a></b>&nbsp;(28367 pageviews), an early post about the time I tried to talk Mark Zuckerberg out of dropping out of Harvard to do a startup. Thankfully he did not listen to me.<br /><br /><b><a href=\"http://matt-welsh.blogspot.com/2011/09/programming-computer-science.html\">Programming != Computer Science</a> </b>(25794 pageviews), a little rant against grad students who seem to mix up writing software with doing research.<br /><br />Of course, not all of my posts have been widely read. Going back over them, it looks like the ones with the smallest number of hits focus on specific research topics, like my <b><a href=\"http://matt-welsh.blogspot.com/2009/11/sensys-2009-day-one.html\">trip report for SenSys 2009</a></b>&nbsp;(115 pageviews!) and an announcement for <b><a href=\"http://matt-welsh.blogspot.com/2009/08/postdoc-openings-on-robobees-project.html\">postdoc openings in my group</a></b>&nbsp;(a whopping 68 pageviews). I guess I should stick to blogging about Mark Zuckerberg instead.<br /><br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5177872052049881551/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/looking-back-on-1-million-pageviews.html#comment-form") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5177872052049881551"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5177872052049881551"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/looking-back-on-1-million-pageviews.html") (title . "Looking back on 1 million pageviews"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://3.bp.blogspot.com/-xebj31Nij7w/UUvgt9zPrrI/AAAAAAABGpU/QQy8AS-PgZs/s72-c/Screen+Shot+2013-03-21+at+9.39.22+PM+PDT.png") (height . "72") (width . "72"))) (thr:total nil "4"))) ("Moving my life to the cloud" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s1600/2250488434_57b8fe59bf_o.jpg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s320/2250488434_57b8fe59bf_o.jpg\" width=\"262\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/clspeace/2250488434/\">http://www.flickr.com/photos/clspeace/2250488434/</a></td></tr></tbody></table>I'm in the process of moving my (computing) life entirely to the cloud -- no more laptop: just a phone, tablet (which I use rarely) and a <a href=\"http://www.google.com/intl/en/chrome/devices/chromebook-pixel/\">Chromebook Pixel</a>. My three-year-old MacBook Pro is about to croak, and it seems like now is the time to migrate everything to the cloud, so I can free myself from having to maintain a bunch of files, music, photos, applications, and backups locally. I'd really like to be in a place where I could throw my laptop out a moving vehicle and not care a bit about what happens to my data. Still, there are some challenges ahead.<br /><br />The Chromebook Pixel itself is a sweet piece of kit. The keyboard and trackpad are nearly as good as my Mac, and the screen resolution is simply unreal: you CANNOT see the pixels (ironic choice of product name; as if the next version of a Mac would be the \"MacBook Virus\"). It boots in 10 seconds. Hell, the other day I did a complete OS upgrade (switching from the beta to the dev channel), which took no more than 10 seconds -- including the reboot. The Pixel comes with 1 TB (!) of Google Drive storage, so at this point there's no excuse for not storing all my stuff in the cloud -- this is more space than any laptop I've ever owned.<br /><br /><b>But you only get to use Chrome!?!?&nbsp;</b>Working at Google, I spend about 70% of my time in Chrome already, so the environment is pretty much exactly what I need. The other 30% of my time is spent ssh'ing into a Linux machine to do software development. The <a href=\"https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?utm_source=chrome-ntp-launcher\">Secure Shell Chrome extension</a> provides a full-on terminal emulator within the browser. I pretty much only use the shell and vim when doing development, so this setup is fine for me.<br /><br />Since I left academia, I don't have much need for writing papers in LaTeX and doing fancy PowerPoint slides anymore. If those were still major uses of my time, I'd have to find another solution. Google Docs works perfectly well for the kind of writing and presentations I do these days; in fact, the sharing capabilities turn out to be more important than fancy formatting.<br /><br /><b>What about working offline!?!?!</b>&nbsp;Who the hell ever works offline anymore? I certainly don't. Even on airplanes, the majority of the time I have WiFi. I generally can't get any work done without an Internet connection, so optimizing for \"offline\" use seems silly to me. If I'm really offline, I'll read a book.<br /><br /><b>Music?&nbsp;</b>Google Play Music and the Amazon Cloud Player work great. I have a huge music library (some 1,200 albums) which I keep in both places.<br /><br /><b>Movies and TV shows?&nbsp;</b>It's true that iTunes has the best selection, but what's available on Google Play and Amazon Instant Video is pretty good. I mostly watch movies and TV on my actual TV (crazy, I know) but for \"on the road\" I think streaming content will work well enough. There's no real offline video playback on the Chromebook as far as I know; for that I can use my Android tablet though. Netflix apparently works fine on the Chromebook, although I unsubscribed from Netflix when they started screwing people over on their pricing.<br /><br />Of course, it's not all roses. A few pain points, so far:<br /><br /><b>Migrating my photo library</b>&nbsp;to the cloud was more painful than I had hoped. I have around 70 GB of pictures and videos taken over the years, and wanted to get it onto Google Drive so I'd have direct access to it from the Chromebook. This involved installing the Google Drive Mac app which allowed me to copy everything over, although the upload took a day or so, and it wasn't clear at first if everything was syncing correctly. (I also had to make sure not to sync the photo library on my other machines which had the Drive app installed.)<br /><br /><b>Managing photos</b>&nbsp;in the cloud still kind of sucks.&nbsp;I'm not happy with any of the cloud-based photo library management solutions that I've found. I have a Flickr Pro account which I use for sharing select pictures with family and friends, but I don't feel comfortable uploading all of my photos to Flickr. I could use Google+, however, it's more focused on sharing rather than large library management. I am not sure what is going on with Picasa these days. Dropbox is another option, which I use for general files, but its photo management is pretty rudimentary as well. For now I'm going to make do with the bare-bones photo support in Google Drive and think about a better way to manage this. What's cool is that I already take all of my photos on my phone which automatically syncs then to both Google Drive and Dropbox, so there's never a need to physically plug the phone in to anything.<br /><br /><b>Editing plain text files</b>&nbsp;is -- surprisingly -- kind of hard. About the only use I have for plain text files (apart from coding) anymore is writing paper reviews -- I read a PDF in one window; fill in the plain-ASCII review form for <a href=\"http://read.seas.harvard.edu/~kohler/hotcrp/\">HotCRP</a> in the other. There are a couple of Chrome extensions with bare-bones text editors, but it's a far cry from a full-fledged editor. I am experimenting with <a href=\"https://chrome.google.com/webstore/detail/neutron-drive/lanjfnanlbolmgmnchmhfnicfefjgnff?utm_source=chrome-ntp-launcher\">Neutron Drive</a>, which is a pretty cool editor/IDE Chrome Extension which uses Google Drive in the backend. Maybe I'll have to change my habits and just fill in my reviews in HotCRP directly (see above about not being able to get any work done offline).<br /><br /><b>Where to keep my really private stuff?</b>&nbsp;By which I mean porn, of course. Or tax returns. Or anything I don't want (or can't) store in any of the cloud services. <a href=\"http://venturebeat.com/2012/08/19/cloud-restrictions-porn-xxx/\">This article from VentureBeat</a> does a good job at summarizing the policies of the popular cloud storage providers, but the upshot is that all of them have some mechanism to either take down objectionable content or report it to law enforcement.<br /><br />What I'd really like is to set up a \"private cloud\", perhaps running a server at home which I could then access (securely) over the web. There are several solutions for private encrypted cloud storage out there (like <a href=\"http://www.haystacksoftware.com/arq/\">Arq</a> and <a href=\"http://www.duplicati.com/home\">Duplicati</a>), but most of them require some form of specialized client (which won't work on ChromeOS any time soon). I guess I could run a WebDAV server or something on a local box or even a machine in the cloud which I could access through the browser. Still, I'm not sure what to do about this yet. It seems insane to me that it's 2013 and we still don't know how to get file sync right.<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/5398246669487114845/comments/default" (20809 21568) old 11 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5398246669487114845") (published nil "2013-03-19T23:13:00.000-07:00") (updated nil "2013-03-19T23:16:32.243-07:00") (title ((type . "text")) "Moving my life to the cloud") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s1600/2250488434_57b8fe59bf_o.jpg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s320/2250488434_57b8fe59bf_o.jpg\" width=\"262\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><a href=\"http://www.flickr.com/photos/clspeace/2250488434/\">http://www.flickr.com/photos/clspeace/2250488434/</a></td></tr></tbody></table>I'm in the process of moving my (computing) life entirely to the cloud -- no more laptop: just a phone, tablet (which I use rarely) and a <a href=\"http://www.google.com/intl/en/chrome/devices/chromebook-pixel/\">Chromebook Pixel</a>. My three-year-old MacBook Pro is about to croak, and it seems like now is the time to migrate everything to the cloud, so I can free myself from having to maintain a bunch of files, music, photos, applications, and backups locally. I'd really like to be in a place where I could throw my laptop out a moving vehicle and not care a bit about what happens to my data. Still, there are some challenges ahead.<br /><br />The Chromebook Pixel itself is a sweet piece of kit. The keyboard and trackpad are nearly as good as my Mac, and the screen resolution is simply unreal: you CANNOT see the pixels (ironic choice of product name; as if the next version of a Mac would be the \"MacBook Virus\"). It boots in 10 seconds. Hell, the other day I did a complete OS upgrade (switching from the beta to the dev channel), which took no more than 10 seconds -- including the reboot. The Pixel comes with 1 TB (!) of Google Drive storage, so at this point there's no excuse for not storing all my stuff in the cloud -- this is more space than any laptop I've ever owned.<br /><br /><b>But you only get to use Chrome!?!?&nbsp;</b>Working at Google, I spend about 70% of my time in Chrome already, so the environment is pretty much exactly what I need. The other 30% of my time is spent ssh'ing into a Linux machine to do software development. The <a href=\"https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?utm_source=chrome-ntp-launcher\">Secure Shell Chrome extension</a> provides a full-on terminal emulator within the browser. I pretty much only use the shell and vim when doing development, so this setup is fine for me.<br /><br />Since I left academia, I don't have much need for writing papers in LaTeX and doing fancy PowerPoint slides anymore. If those were still major uses of my time, I'd have to find another solution. Google Docs works perfectly well for the kind of writing and presentations I do these days; in fact, the sharing capabilities turn out to be more important than fancy formatting.<br /><br /><b>What about working offline!?!?!</b>&nbsp;Who the hell ever works offline anymore? I certainly don't. Even on airplanes, the majority of the time I have WiFi. I generally can't get any work done without an Internet connection, so optimizing for \"offline\" use seems silly to me. If I'm really offline, I'll read a book.<br /><br /><b>Music?&nbsp;</b>Google Play Music and the Amazon Cloud Player work great. I have a huge music library (some 1,200 albums) which I keep in both places.<br /><br /><b>Movies and TV shows?&nbsp;</b>It's true that iTunes has the best selection, but what's available on Google Play and Amazon Instant Video is pretty good. I mostly watch movies and TV on my actual TV (crazy, I know) but for \"on the road\" I think streaming content will work well enough. There's no real offline video playback on the Chromebook as far as I know; for that I can use my Android tablet though. Netflix apparently works fine on the Chromebook, although I unsubscribed from Netflix when they started screwing people over on their pricing.<br /><br />Of course, it's not all roses. A few pain points, so far:<br /><br /><b>Migrating my photo library</b>&nbsp;to the cloud was more painful than I had hoped. I have around 70 GB of pictures and videos taken over the years, and wanted to get it onto Google Drive so I'd have direct access to it from the Chromebook. This involved installing the Google Drive Mac app which allowed me to copy everything over, although the upload took a day or so, and it wasn't clear at first if everything was syncing correctly. (I also had to make sure not to sync the photo library on my other machines which had the Drive app installed.)<br /><br /><b>Managing photos</b>&nbsp;in the cloud still kind of sucks.&nbsp;I'm not happy with any of the cloud-based photo library management solutions that I've found. I have a Flickr Pro account which I use for sharing select pictures with family and friends, but I don't feel comfortable uploading all of my photos to Flickr. I could use Google+, however, it's more focused on sharing rather than large library management. I am not sure what is going on with Picasa these days. Dropbox is another option, which I use for general files, but its photo management is pretty rudimentary as well. For now I'm going to make do with the bare-bones photo support in Google Drive and think about a better way to manage this. What's cool is that I already take all of my photos on my phone which automatically syncs then to both Google Drive and Dropbox, so there's never a need to physically plug the phone in to anything.<br /><br /><b>Editing plain text files</b>&nbsp;is -- surprisingly -- kind of hard. About the only use I have for plain text files (apart from coding) anymore is writing paper reviews -- I read a PDF in one window; fill in the plain-ASCII review form for <a href=\"http://read.seas.harvard.edu/~kohler/hotcrp/\">HotCRP</a> in the other. There are a couple of Chrome extensions with bare-bones text editors, but it's a far cry from a full-fledged editor. I am experimenting with <a href=\"https://chrome.google.com/webstore/detail/neutron-drive/lanjfnanlbolmgmnchmhfnicfefjgnff?utm_source=chrome-ntp-launcher\">Neutron Drive</a>, which is a pretty cool editor/IDE Chrome Extension which uses Google Drive in the backend. Maybe I'll have to change my habits and just fill in my reviews in HotCRP directly (see above about not being able to get any work done offline).<br /><br /><b>Where to keep my really private stuff?</b>&nbsp;By which I mean porn, of course. Or tax returns. Or anything I don't want (or can't) store in any of the cloud services. <a href=\"http://venturebeat.com/2012/08/19/cloud-restrictions-porn-xxx/\">This article from VentureBeat</a> does a good job at summarizing the policies of the popular cloud storage providers, but the upshot is that all of them have some mechanism to either take down objectionable content or report it to law enforcement.<br /><br />What I'd really like is to set up a \"private cloud\", perhaps running a server at home which I could then access (securely) over the web. There are several solutions for private encrypted cloud storage out there (like <a href=\"http://www.haystacksoftware.com/arq/\">Arq</a> and <a href=\"http://www.duplicati.com/home\">Duplicati</a>), but most of them require some form of specialized client (which won't work on ChromeOS any time soon). I guess I could run a WebDAV server or something on a local box or even a machine in the cloud which I could access through the browser. Still, I'm not sure what to do about this yet. It seems insane to me that it's 2013 and we still don't know how to get file sync right.<br /><br /><i style=\"background-color: white; color: #333333; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 15px; line-height: 20px;\">Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer.</i><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5398246669487114845/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/moving-my-life-to-cloud.html#comment-form") (title . "33 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5398246669487114845"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5398246669487114845"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/03/moving-my-life-to-cloud.html") (title . "Moving my life to the cloud"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-zWGs5jYTHZg/UUlTSPKgEcI/AAAAAAABGk8/LdAADAyx2uw/s72-c/2250488434_57b8fe59bf_o.jpg") (height . "72") (width . "72"))) (thr:total nil "33"))) ("Grad students: Learn how to give a talk" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I've been to roughly a hundred academic conferences and listened to thousands of talks, mostly by grad students. Over the years, the quality of the speaking and presentations has not gotten any better -- if anything, it's gotten worse. A typical grad student talk is so horribly bad, and it's surprising how little effort is put into working on presentation and speaking skills, especially given how important this skill is for academics.<br /><br />Grad students need to learn how to give good, clear, compelling presentations. Especially those who think they want to be professors one day.<br /><br />It is difficult to overstate how important presentation skills are for academics. This is about much more than \"being a good teacher\" (which is a nice trait to have, but not actually that important for an academic's career in the long run). There is a <b>huge</b>&nbsp;division between the professors who are influential leaders, and those who are also-rans. In almost all cases that I can think of, the professors who are very successful are also good speakers, and good communicators overall. They can give good, clear, funny talks. They can engage in meaningful conversations at a technical level and at a personal level. They have a strong command of English and can use the language effectively to communicate complex ideas. So I claim that there is a strong correlation between good communication skills and overall research impact.<br /><br />In some sense, a <b>professor's job is to communicate the research ideas being done in their group</b>. Although grad students often give the conference talks, professors give countless other talks at other universities, companies, workshops, and elsewhere. The professors write the grant proposals, and often the papers (or good chunks of them) as well. Once you're a professor, it matters a lot less how good of a hacker you are -- your job is to be the PR rep.<br /><br />So it's surprising that grad students generally receive no formal training in presentation skills. A typical grad student might get three or four opportunities to give conference talks during their Ph.D., but this is hardly enough practice to hone their skills. Acting as a TA or giving \"practice talks\" isn't much help either. I honestly don't know how to fix this problem, short of running a course specifically on giving good presentations, which sounds like a drag -- but might be necessary.<br /><br />The language barrier is a big part of the problem. Students who do not have English as their first language are almost invariably worse at giving talks than those who are native speakers, and students from Asia tend to be worse than those from Europe. (In academic Computer Science, English is the only language that matters.) But it's more than just command of the language -- it's about being expressive, funny, charismatic. The grad student who stands frozen in place and reads off their slides might speak English perfectly well, but that doesn't make them a good speaker.<br /><br />It's also true that grad students are often \"sized up\" at conferences based on their speaking skills. If you can give a good talk at a conference, you'll get the attention of the professors who will be looking at your faculty job application later. Likewise, if your talk sucks, it's going to leave a bad impression (or, at best, you'll be forgettable).<br /><br />So, please, grad students: If you're serious about pursuing an academic career, hone your presentation skills. This stuff matters more than you know.</div>" "http://matt-welsh.blogspot.com/feeds/7911286016598587903/comments/default" (20782 6713) old 12 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7911286016598587903") (published nil "2013-02-27T06:37:00.003-08:00") (updated nil "2013-02-27T06:37:45.242-08:00") (title ((type . "text")) "Grad students: Learn how to give a talk") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I've been to roughly a hundred academic conferences and listened to thousands of talks, mostly by grad students. Over the years, the quality of the speaking and presentations has not gotten any better -- if anything, it's gotten worse. A typical grad student talk is so horribly bad, and it's surprising how little effort is put into working on presentation and speaking skills, especially given how important this skill is for academics.<br /><br />Grad students need to learn how to give good, clear, compelling presentations. Especially those who think they want to be professors one day.<br /><br />It is difficult to overstate how important presentation skills are for academics. This is about much more than \"being a good teacher\" (which is a nice trait to have, but not actually that important for an academic's career in the long run). There is a <b>huge</b>&nbsp;division between the professors who are influential leaders, and those who are also-rans. In almost all cases that I can think of, the professors who are very successful are also good speakers, and good communicators overall. They can give good, clear, funny talks. They can engage in meaningful conversations at a technical level and at a personal level. They have a strong command of English and can use the language effectively to communicate complex ideas. So I claim that there is a strong correlation between good communication skills and overall research impact.<br /><br />In some sense, a <b>professor's job is to communicate the research ideas being done in their group</b>. Although grad students often give the conference talks, professors give countless other talks at other universities, companies, workshops, and elsewhere. The professors write the grant proposals, and often the papers (or good chunks of them) as well. Once you're a professor, it matters a lot less how good of a hacker you are -- your job is to be the PR rep.<br /><br />So it's surprising that grad students generally receive no formal training in presentation skills. A typical grad student might get three or four opportunities to give conference talks during their Ph.D., but this is hardly enough practice to hone their skills. Acting as a TA or giving \"practice talks\" isn't much help either. I honestly don't know how to fix this problem, short of running a course specifically on giving good presentations, which sounds like a drag -- but might be necessary.<br /><br />The language barrier is a big part of the problem. Students who do not have English as their first language are almost invariably worse at giving talks than those who are native speakers, and students from Asia tend to be worse than those from Europe. (In academic Computer Science, English is the only language that matters.) But it's more than just command of the language -- it's about being expressive, funny, charismatic. The grad student who stands frozen in place and reads off their slides might speak English perfectly well, but that doesn't make them a good speaker.<br /><br />It's also true that grad students are often \"sized up\" at conferences based on their speaking skills. If you can give a good talk at a conference, you'll get the attention of the professors who will be looking at your faculty job application later. Likewise, if your talk sucks, it's going to leave a bad impression (or, at best, you'll be forgettable).<br /><br />So, please, grad students: If you're serious about pursuing an academic career, hone your presentation skills. This stuff matters more than you know.</div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7911286016598587903/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/02/grad-students-learn-how-to-give-talk.html#comment-form") (title . "15 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7911286016598587903"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7911286016598587903"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/02/grad-students-learn-how-to-give-talk.html") (title . "Grad students: Learn how to give a talk"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "15"))) ("My mobile systems research wish list" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Working on mobile systems at Google gives me some insight into what the hard open problems are in this space. Sometimes I am asked by academic researchers what I think these problems are and what they should be working on. I've got a growing list of projects I'd really like to see the academic community try to tackle. This is not to say that Google isn't working on some of these things, but academics have fewer constraints and might be able to come up with some radically new ideas.<br /><i><br /></i><i>Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer, or anyone else. In particular, sending a grant proposal to Google on any of the following topics will by no means guarantee it will be funded!</i><br /><i><br /></i>First, a few words on what I think academics <b>shouldn't</b>&nbsp;be working on. I help review proposals for Google's&nbsp;<a href=\"http://research.google.com/university/relations/research_awards.html\">Faculty Research Awards</a>&nbsp;program, and (in my opinion) we get too many proposals for things that Google can do (or is already doing) already -- such as energy measurements on mobile phones, tweaks to Android or the Dalvik VM to improve performance or energy efficiency, or building a new mobile app to support some specific domain science goal (such as a medical or environmental study). These aren't very good research proposal topics, in my opinion -- they aren't far-reaching enough, and aren't going to yield a dramatic change five to ten years down the line.<br /><br />I also see too many academics doing goofy things that make no sense. A common example these days is dusting off the whole peer-to-peer networking area from the late 1990s and trying to apply it in some way to smartphones. Most of these papers start off with the flawed premise that using P2P would help reduce congestion in the cellular network. A similar flawed argument is made for some of the \"cloud offload\" proposals that I have seen recently. What this fails to take into account is where cellular bandwidth is going: About half is video streaming, and the other half things like Web browsing and photo sharing. None of the proposed applications for smartphone P2P and cloud offload are going to make a dent in this traffic.<br /><br />So I think it would help academics to understand what the real -- rather than imagined -- problems are in mobile systems. Some of the things on my own wish list are below.<br /><br /><b>Understanding the interaction between mobile apps and the cellular network</b>. It's well known that cellular networks weren't designed for things like TCP/IP, Web browsing, and YouTube video streaming. And of course most mobile apps have no understanding of how cellular networks operate. I feel that there is a lot of low-hanging fruit in the space of understanding these interactions and tuning protocols and apps to perform better on cellular networks. Ever noticed how a video playback might stall a few seconds in when streaming over 3G? Or that occasionally surfing to a new web page might take a maddening few extra seconds for no apparent reason? Well, there's a lot of complexity there and the dynamics are not well understood.<br /><br />3G and 4G networks have very different properties from wired networks, or even WiFi, in terms of latency, the impact of packet loss, energy consumption, and overheads for transitioning between different radio states. Transport-layer loss is actually rare in cellular networks, since there are many layers of redundancy and HARQ that attempt to mask loss in lower layers of the network stack. This of course throws TCP's congestion control algorithms for a loop since it typically relies on packet loss to signal congestion. Likewise, the channel bandwidth can vary dramatically over short time windows. (By the way, any study that tries to understand this using simple benchmarks such as bulk downloads is going to get it wrong -- bulk downloads don't look anything like real-world mobile traffic, even video streaming, which is paced above the TCP level.)<br /><br />The lifetime of a cellular network connection is also fairly complex. Negotiating a dedicated cellular channel can take several <i>seconds</i>, and there are many variables that affect how the cell network decides which state the device should be in (and yes, it's usually up to the network). These parameters are often chosen to balance battery lifetime on the device; signaling overhead in the cell network; user-perceived delays; and overall network capacity. You can't expect to fix this just by hacking the device firmware.<br /><br />To make things even more hairy, mobile carriers often use different network tuning parameters in different markets, based on what kind of equipment they have deployed and how much (and what kinds) of traffic they see there. So there is no one-size-fits-all solution; you can't just solve the problem for one network on one carrier and assume you're done.<br /><br /><b>Understanding the impact of mobile handoffs on application performance</b>. This is an extension to the above, but I haven't seen much academic work in this space. Handoffs are a complex beast in cellular networks and nobody really understands what their impact is on what a user experiences, at least for TCP/IP-based apps. (Handoff mechanisms are often more concerned with not dropping voice calls.) Also, with the increased availability of both WiFi and cellular networks, there's a lot to be done to tune when and how handoffs across network types occur. I hate it when I'm trying to get driving directions when leaving my house, only to find that my phone is trying in vain to hang onto a weak WiFi connection that is about to go away. Lots of interesting problems there.<br /><br /><b>Why doesn't my phone last all day?</b>&nbsp;This is a hot topic right now but I think the research community's approach tends to be to change the mobile app SDK, which feels like a non-starter to me. Unfortunately, the genie is out of the bottle with respect to mobile app development, in the sense that any proposal that suggests we should just get all of the apps to use a new API for saving energy is probably not going to fly. In the battle between providing more power and flexibility to app developers versus constraining the API to make apps more efficient, the developer wins every time. A lot of the problems with apps causing battery drainage are simply bugs -- but app developers are going to continue to have plenty of rope to hang themselves (or their users) with. There needs to be a more fundamental approach to solving the energy management issue in mobile. This can be solved at many layers -- the OS, the virtual machine, the compiler -- and understanding how apps interact with the network would go a long way towards fixing things.<br /><br /><b>Where is my data and who has access to it?</b>&nbsp;Let's be frank: Many apps turn smartphones into tracking devices, by collecting lots of data on their users: location, network activity, and so forth. Some mobile researchers even (unethically) <a href=\"http://matt-welsh.blogspot.com/2013/01/the-ethics-of-mobile-data-collection.html\">collect this data for their own research studies</a>. Once this data is \"in the cloud\", who knows where it's going and who has access to it. Buggy and malicious apps can easily leak sensitive data, and currently there's no good way to keep tabs on what information is being collected, by whom, for what purpose. There's been some great research on this (including the unfortunately-named <a href=\"http://appanalysis.org/\">TaintDroid</a>) but I think there's lots more to be done here -- although we are sadly in an arms race with developers who are always finding new and better ways to track users.<br /><br /><b>What should a mobile web platform look like 10 years from now?</b>&nbsp;I think that the research community fails to appreciate the degree of complexity and innovation that goes into building a really good, fast web browser. Unfortunately, the intersection between the research and web dev communities is pretty low, and most computer scientists think that JavaScript is a joke. But make no mistake: The browser is basically an operating system in its own right, and is rapidly getting features that will make it possible to do everything that native apps can do (and more). On the other hand, I find the web development community to be pretty short-sighted, and unlikely to come up with really compelling new architectures for the web itself. Hell, the biggest breakthroughs in the web community right now are a <a href=\"http://www.w3.org/TR/css3-flexbox/\">sane layout model for CSS</a>&nbsp;and <a href=\"http://www.webrtc.org/\">using sockets from JavaScript</a>.&nbsp;In the mobile space, we are stuck in the stone ages in terms of exploiting the web's potential. So I think there is a lot the research community can offer here.<br /><br />In ten years, the number of mobile web users will outstrip desktop web users by an order of magnitude. So the web is going to be primarily a mobile platform, which suggests a bunch of new trends: ubiquitous geolocation; users carrying (and interacting with) several devices at a time; voice input replacing typing; using the camera and sensors as first-class input methods; enough compute power in your pocket to do things like real-time speech translation and machine learning to predict what you will do next. I think we take a too-narrow view of what \"the web\" is, and we still talk about silly things like \"pages\" and \"links\" when in reality the web is a full application development platform with some amazing features. We should be thinking now about how it will evolve over the next decade.<br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/1172852699003339156/comments/default" (20741 48084) old 13 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1172852699003339156") (published nil "2013-01-27T14:49:00.000-08:00") (updated nil "2013-01-27T15:44:20.216-08:00") (title ((type . "text")) "My mobile systems research wish list") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Working on mobile systems at Google gives me some insight into what the hard open problems are in this space. Sometimes I am asked by academic researchers what I think these problems are and what they should be working on. I've got a growing list of projects I'd really like to see the academic community try to tackle. This is not to say that Google isn't working on some of these things, but academics have fewer constraints and might be able to come up with some radically new ideas.<br /><i><br /></i><i>Disclaimer: Everything in this post is my personal opinion and does not represent the view of my employer, or anyone else. In particular, sending a grant proposal to Google on any of the following topics will by no means guarantee it will be funded!</i><br /><i><br /></i>First, a few words on what I think academics <b>shouldn't</b>&nbsp;be working on. I help review proposals for Google's&nbsp;<a href=\"http://research.google.com/university/relations/research_awards.html\">Faculty Research Awards</a>&nbsp;program, and (in my opinion) we get too many proposals for things that Google can do (or is already doing) already -- such as energy measurements on mobile phones, tweaks to Android or the Dalvik VM to improve performance or energy efficiency, or building a new mobile app to support some specific domain science goal (such as a medical or environmental study). These aren't very good research proposal topics, in my opinion -- they aren't far-reaching enough, and aren't going to yield a dramatic change five to ten years down the line.<br /><br />I also see too many academics doing goofy things that make no sense. A common example these days is dusting off the whole peer-to-peer networking area from the late 1990s and trying to apply it in some way to smartphones. Most of these papers start off with the flawed premise that using P2P would help reduce congestion in the cellular network. A similar flawed argument is made for some of the \"cloud offload\" proposals that I have seen recently. What this fails to take into account is where cellular bandwidth is going: About half is video streaming, and the other half things like Web browsing and photo sharing. None of the proposed applications for smartphone P2P and cloud offload are going to make a dent in this traffic.<br /><br />So I think it would help academics to understand what the real -- rather than imagined -- problems are in mobile systems. Some of the things on my own wish list are below.<br /><br /><b>Understanding the interaction between mobile apps and the cellular network</b>. It's well known that cellular networks weren't designed for things like TCP/IP, Web browsing, and YouTube video streaming. And of course most mobile apps have no understanding of how cellular networks operate. I feel that there is a lot of low-hanging fruit in the space of understanding these interactions and tuning protocols and apps to perform better on cellular networks. Ever noticed how a video playback might stall a few seconds in when streaming over 3G? Or that occasionally surfing to a new web page might take a maddening few extra seconds for no apparent reason? Well, there's a lot of complexity there and the dynamics are not well understood.<br /><br />3G and 4G networks have very different properties from wired networks, or even WiFi, in terms of latency, the impact of packet loss, energy consumption, and overheads for transitioning between different radio states. Transport-layer loss is actually rare in cellular networks, since there are many layers of redundancy and HARQ that attempt to mask loss in lower layers of the network stack. This of course throws TCP's congestion control algorithms for a loop since it typically relies on packet loss to signal congestion. Likewise, the channel bandwidth can vary dramatically over short time windows. (By the way, any study that tries to understand this using simple benchmarks such as bulk downloads is going to get it wrong -- bulk downloads don't look anything like real-world mobile traffic, even video streaming, which is paced above the TCP level.)<br /><br />The lifetime of a cellular network connection is also fairly complex. Negotiating a dedicated cellular channel can take several <i>seconds</i>, and there are many variables that affect how the cell network decides which state the device should be in (and yes, it's usually up to the network). These parameters are often chosen to balance battery lifetime on the device; signaling overhead in the cell network; user-perceived delays; and overall network capacity. You can't expect to fix this just by hacking the device firmware.<br /><br />To make things even more hairy, mobile carriers often use different network tuning parameters in different markets, based on what kind of equipment they have deployed and how much (and what kinds) of traffic they see there. So there is no one-size-fits-all solution; you can't just solve the problem for one network on one carrier and assume you're done.<br /><br /><b>Understanding the impact of mobile handoffs on application performance</b>. This is an extension to the above, but I haven't seen much academic work in this space. Handoffs are a complex beast in cellular networks and nobody really understands what their impact is on what a user experiences, at least for TCP/IP-based apps. (Handoff mechanisms are often more concerned with not dropping voice calls.) Also, with the increased availability of both WiFi and cellular networks, there's a lot to be done to tune when and how handoffs across network types occur. I hate it when I'm trying to get driving directions when leaving my house, only to find that my phone is trying in vain to hang onto a weak WiFi connection that is about to go away. Lots of interesting problems there.<br /><br /><b>Why doesn't my phone last all day?</b>&nbsp;This is a hot topic right now but I think the research community's approach tends to be to change the mobile app SDK, which feels like a non-starter to me. Unfortunately, the genie is out of the bottle with respect to mobile app development, in the sense that any proposal that suggests we should just get all of the apps to use a new API for saving energy is probably not going to fly. In the battle between providing more power and flexibility to app developers versus constraining the API to make apps more efficient, the developer wins every time. A lot of the problems with apps causing battery drainage are simply bugs -- but app developers are going to continue to have plenty of rope to hang themselves (or their users) with. There needs to be a more fundamental approach to solving the energy management issue in mobile. This can be solved at many layers -- the OS, the virtual machine, the compiler -- and understanding how apps interact with the network would go a long way towards fixing things.<br /><br /><b>Where is my data and who has access to it?</b>&nbsp;Let's be frank: Many apps turn smartphones into tracking devices, by collecting lots of data on their users: location, network activity, and so forth. Some mobile researchers even (unethically) <a href=\"http://matt-welsh.blogspot.com/2013/01/the-ethics-of-mobile-data-collection.html\">collect this data for their own research studies</a>. Once this data is \"in the cloud\", who knows where it's going and who has access to it. Buggy and malicious apps can easily leak sensitive data, and currently there's no good way to keep tabs on what information is being collected, by whom, for what purpose. There's been some great research on this (including the unfortunately-named <a href=\"http://appanalysis.org/\">TaintDroid</a>) but I think there's lots more to be done here -- although we are sadly in an arms race with developers who are always finding new and better ways to track users.<br /><br /><b>What should a mobile web platform look like 10 years from now?</b>&nbsp;I think that the research community fails to appreciate the degree of complexity and innovation that goes into building a really good, fast web browser. Unfortunately, the intersection between the research and web dev communities is pretty low, and most computer scientists think that JavaScript is a joke. But make no mistake: The browser is basically an operating system in its own right, and is rapidly getting features that will make it possible to do everything that native apps can do (and more). On the other hand, I find the web development community to be pretty short-sighted, and unlikely to come up with really compelling new architectures for the web itself. Hell, the biggest breakthroughs in the web community right now are a <a href=\"http://www.w3.org/TR/css3-flexbox/\">sane layout model for CSS</a>&nbsp;and <a href=\"http://www.webrtc.org/\">using sockets from JavaScript</a>.&nbsp;In the mobile space, we are stuck in the stone ages in terms of exploiting the web's potential. So I think there is a lot the research community can offer here.<br /><br />In ten years, the number of mobile web users will outstrip desktop web users by an order of magnitude. So the web is going to be primarily a mobile platform, which suggests a bunch of new trends: ubiquitous geolocation; users carrying (and interacting with) several devices at a time; voice input replacing typing; using the camera and sensors as first-class input methods; enough compute power in your pocket to do things like real-time speech translation and machine learning to predict what you will do next. I think we take a too-narrow view of what \"the web\" is, and we still talk about silly things like \"pages\" and \"links\" when in reality the web is a full application development platform with some amazing features. We should be thinking now about how it will evolve over the next decade.<br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1172852699003339156/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/my-mobile-systems-research-wish-list.html#comment-form") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1172852699003339156"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1172852699003339156"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/my-mobile-systems-research-wish-list.html") (title . "My mobile systems research wish list"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "5"))) ("The ethics of mobile data collection" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s1600/Screenshot_2013-01-22-21-50-22.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s320/Screenshot_2013-01-22-21-50-22.png\" width=\"192\" /></a></div>The mobile computing and networking research communities need to start paying closer attention to the data collection practices of researchers in our field. Now that it's easy to write mobile apps that collect data from real users, I'm going to argue that computer science publication venues should start requiring authors to <b>document whether they have IRB approval</b> for studies involving human subjects, and how the study participants were consented.&nbsp;This documentation requirement is standard in the medical and social science communities, and it makes sense for computer science conferences and journals to do the same. Otherwise I fear we run the risk of accepting papers that have collected data unethically, hence rewarding researchers for not adequately protecting the privacy of the study participants.<br /><br />I am often asked to review papers in which the authors have deployed a mobile phone app that collects data about the app's users. In some cases, these apps are <b>overtly used for data collection</b> and the users of the app are told how this data will be collected and used. But I have read a number of papers in which <b>data collection has been embedded into apps that have some other purpose</b> -- such as games or photo sharing. The goal, of course, is to get a lot of people to install the app, which is great for getting lots of \"real world\" data for a research paper. In some cases, I have downloaded the app in question and installed it, only to discover that the app never informs the user that it is collecting sensitive data in the background.<br /><br />The problem is, <b>such practices are unethical</b> (and possibly illegal) according to federal requirements for protecting the privacy for human subjects in a research study. Even if there is some fine print in the app the use of data for a research study, it's not clear to me that in all cases the researchers have actually gone through the federally-mandated Institutional Review Board approval process to collect this data.<br /><br />Unfortunately, not many computer scientists seem to be familiar with the IRB approval requirement for studies involving human subjects. Our field is pretty lax about this, but I think it's time we started taking human subjects approval more seriously.<br /><br />It is now dead simple to develop mobile apps that collect <b>all kinds of data about their users</b>. On the Android platform, an&nbsp;app can collect data such as the device's GPS location; which other apps are running and how much network traffic they use; what type of wireless network the device is using; the device manufacturer, model, and OS version; which cellular carrier the device uses; the device's battery level; and the current cell tower ID. Similar provisions exist on iOS and other mobile operating systems. With rooted devices, it's possible to collect even more information, such as a complete network packet trace and complete information on which websites and apps have been used.<br /><br />Put together, this data can yield a rich picture of the usage patterns, mobility, and network performance experienced by a mobile user. It is very tempting for researchers to exploit this capability, and it's easy to get thousands of people to install your app by releasing it on Google Play or the Apple App Store. However, I have very little confidence that most researchers are adhering to legal and ethical guidelines for collecting such data -- I bet the typical scenario is that the data ends up being logged to an unsecured computer under some grad student's desk.<br /><br />So,&nbsp;<b>what is an IRB?</b> In the US and many other countries, any institution that receives federal funding must ensure that research studies involving human subjects protect the rights and privacy of the participants in such studies. This is accomplished through Institutional Review Board review which much occur&nbsp;<b>prior to the study taking place</b>. The purpose of the IRB is to ensure that the study meets certain guidelines for protecting the privacy of the study participants. The <a href=\"http://humansubjects.stanford.edu/\">Stanford IRB Website</a> has some good background about the purpose of IRB approval and what the process is like. The principles underpinning IRB review were set forth in the <a href=\"http://www.wma.net/en/30publications/10policies/b3/\">Declaration of Helsinki</a>, which has been the basis for many countries' laws regarding protection of human subjects.<br /><br />Failing to get IRB approval for a research study is serious business. In the medical and social science communities, failing to get IRB approval is tantamount to faking data or plagiarism. The <a href=\"http://retractionwatch.wordpress.com/?s=irb\">Retraction Watch blog</a> has a long list of cases in which published articles have been retracted due to lack of IRB approval. In those fields, this kind of forced retraction can destroy an academic's career.<br /><br />Documenting IRB approval and informed consent for study participants is becoming standard practice in the medical and social science communities. For example, the submission guidelines to the <i>Annals of Internal Medicine</i> require an <a href=\"http://annals.org/public/authorsinfo.aspx#research-publication-ethics\">explicit statement from authors</a>&nbsp;regarding IRB approval:<br /><blockquote class=\"tr_bq\"><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">\"The authors must confirm review of the study by the appropriate institutional review board or affirm that the protocol is consistent with the principles of the Declaration of Helsinki (see&nbsp;</span><a href=\"http://annals.org/public/authorsinfo.aspx#worldmedicalassociation\" style=\"background-color: white; border: 0px; color: #006699; cursor: pointer; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; font: inherit; line-height: 17px; margin: 0px; padding: 0px; text-decoration: initial; vertical-align: baseline;\">World Medical Association</a><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">). If the authors did not obtain institutional review board approval before the start of the study, they should so state and explain the circumstances. If the study was exempt from review, the authors must state that such exemption complied with the policy of their local institutional review board. They should affirm that study participants gave their informed consent or state than an institutional review board approved conduct of the research without explicit consent from the participants. If patients are identifiable from illustrations, photographs, pedigrees, case reports, or other study data, the authors must submit the release form for each such individual (or copies of the figures with the appropriate release statement) giving permission for publication with the manuscript. Consult the Research section of the&nbsp;</span><a href=\"http://www.acponline.org/ethics/ethicman.htm\" style=\"background-color: white; border: 0px; color: #006699; cursor: pointer; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; font: inherit; line-height: 17px; margin: 0px; padding: 0px; text-decoration: initial; vertical-align: baseline;\">American College of Physicians Ethics Manual</a><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">&nbsp;for further information.\"</span></blockquote><br />But yet, in computer science, we tend not to take this process very seriously. I suspect most computer scientists have never heard of, or dealt with, their institution's IRB. I was surprised to see that CHI, the top conference in the area of human-computer interaction (in which user studies are commonplace), says nothing in its&nbsp;<a href=\"http://chi2013.acm.org/authors/call-for-participation/papers-notes/\">call for papers</a>&nbsp;about requiring IRB approval disclosure for human subjects studies -- perhaps the practice of obtaining IRB approval is already widespread in that community, though I doubt it.<br /><br />Why do I think we should require authors to document IRB approval? For two reasons. First, to <b>raise awareness</b> of this issue and ensure that authors are aware of their obligations before they submit a paper to such venues. Second, to <b>prevent paper reviewers from having to make a judgment call</b>&nbsp;when a paper is unclear on whether and how a study protects its participants. The whole point of an IRB is to front-load the approval process before the research study even begins, well before a paper gets submitted. The nature of a research project may well change depending on the IRB's requirements for protecting user privacy.<br /><br />To give an example of how this can be done properly, colleagues of mine at University of Michigan and University of Washington are developing a mobile app for collecting network performance data, called <a href=\"http://www.mobiperf.com/\">MobiPerf</a>. The PIs have IRB approval for this study and the app clearly informs the users that the data will be collected for a research study when the app first starts; clicking \"No thanks\" immediately exits the app. Furthermore, there is a <a href=\"http://www.mobiperf.com/privacy\">fairly detailed privacy statement</a>&nbsp;and EULA&nbsp;on the app's website, explaining exactly what data is collected. It's true that going through these steps required more effort on the part of the researchers, but it's not just a good idea -- it's the law.<br /><br /><i>This is my personal blog. The views expressed here are mine alone and not those of my employer.</i><br /><br /><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/8573558845084480835/comments/default" (20735 31617) old 14 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-8573558845084480835") (published nil "2013-01-22T21:56:00.001-08:00") (updated nil "2013-01-22T21:56:17.454-08:00") (title ((type . "text")) "The ethics of mobile data collection") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s1600/Screenshot_2013-01-22-21-50-22.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"320\" src=\"http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s320/Screenshot_2013-01-22-21-50-22.png\" width=\"192\" /></a></div>The mobile computing and networking research communities need to start paying closer attention to the data collection practices of researchers in our field. Now that it's easy to write mobile apps that collect data from real users, I'm going to argue that computer science publication venues should start requiring authors to <b>document whether they have IRB approval</b> for studies involving human subjects, and how the study participants were consented.&nbsp;This documentation requirement is standard in the medical and social science communities, and it makes sense for computer science conferences and journals to do the same. Otherwise I fear we run the risk of accepting papers that have collected data unethically, hence rewarding researchers for not adequately protecting the privacy of the study participants.<br /><br />I am often asked to review papers in which the authors have deployed a mobile phone app that collects data about the app's users. In some cases, these apps are <b>overtly used for data collection</b> and the users of the app are told how this data will be collected and used. But I have read a number of papers in which <b>data collection has been embedded into apps that have some other purpose</b> -- such as games or photo sharing. The goal, of course, is to get a lot of people to install the app, which is great for getting lots of \"real world\" data for a research paper. In some cases, I have downloaded the app in question and installed it, only to discover that the app never informs the user that it is collecting sensitive data in the background.<br /><br />The problem is, <b>such practices are unethical</b> (and possibly illegal) according to federal requirements for protecting the privacy for human subjects in a research study. Even if there is some fine print in the app the use of data for a research study, it's not clear to me that in all cases the researchers have actually gone through the federally-mandated Institutional Review Board approval process to collect this data.<br /><br />Unfortunately, not many computer scientists seem to be familiar with the IRB approval requirement for studies involving human subjects. Our field is pretty lax about this, but I think it's time we started taking human subjects approval more seriously.<br /><br />It is now dead simple to develop mobile apps that collect <b>all kinds of data about their users</b>. On the Android platform, an&nbsp;app can collect data such as the device's GPS location; which other apps are running and how much network traffic they use; what type of wireless network the device is using; the device manufacturer, model, and OS version; which cellular carrier the device uses; the device's battery level; and the current cell tower ID. Similar provisions exist on iOS and other mobile operating systems. With rooted devices, it's possible to collect even more information, such as a complete network packet trace and complete information on which websites and apps have been used.<br /><br />Put together, this data can yield a rich picture of the usage patterns, mobility, and network performance experienced by a mobile user. It is very tempting for researchers to exploit this capability, and it's easy to get thousands of people to install your app by releasing it on Google Play or the Apple App Store. However, I have very little confidence that most researchers are adhering to legal and ethical guidelines for collecting such data -- I bet the typical scenario is that the data ends up being logged to an unsecured computer under some grad student's desk.<br /><br />So,&nbsp;<b>what is an IRB?</b> In the US and many other countries, any institution that receives federal funding must ensure that research studies involving human subjects protect the rights and privacy of the participants in such studies. This is accomplished through Institutional Review Board review which much occur&nbsp;<b>prior to the study taking place</b>. The purpose of the IRB is to ensure that the study meets certain guidelines for protecting the privacy of the study participants. The <a href=\"http://humansubjects.stanford.edu/\">Stanford IRB Website</a> has some good background about the purpose of IRB approval and what the process is like. The principles underpinning IRB review were set forth in the <a href=\"http://www.wma.net/en/30publications/10policies/b3/\">Declaration of Helsinki</a>, which has been the basis for many countries' laws regarding protection of human subjects.<br /><br />Failing to get IRB approval for a research study is serious business. In the medical and social science communities, failing to get IRB approval is tantamount to faking data or plagiarism. The <a href=\"http://retractionwatch.wordpress.com/?s=irb\">Retraction Watch blog</a> has a long list of cases in which published articles have been retracted due to lack of IRB approval. In those fields, this kind of forced retraction can destroy an academic's career.<br /><br />Documenting IRB approval and informed consent for study participants is becoming standard practice in the medical and social science communities. For example, the submission guidelines to the <i>Annals of Internal Medicine</i> require an <a href=\"http://annals.org/public/authorsinfo.aspx#research-publication-ethics\">explicit statement from authors</a>&nbsp;regarding IRB approval:<br /><blockquote class=\"tr_bq\"><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">\"The authors must confirm review of the study by the appropriate institutional review board or affirm that the protocol is consistent with the principles of the Declaration of Helsinki (see&nbsp;</span><a href=\"http://annals.org/public/authorsinfo.aspx#worldmedicalassociation\" style=\"background-color: white; border: 0px; color: #006699; cursor: pointer; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; font: inherit; line-height: 17px; margin: 0px; padding: 0px; text-decoration: initial; vertical-align: baseline;\">World Medical Association</a><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">). If the authors did not obtain institutional review board approval before the start of the study, they should so state and explain the circumstances. If the study was exempt from review, the authors must state that such exemption complied with the policy of their local institutional review board. They should affirm that study participants gave their informed consent or state than an institutional review board approved conduct of the research without explicit consent from the participants. If patients are identifiable from illustrations, photographs, pedigrees, case reports, or other study data, the authors must submit the release form for each such individual (or copies of the figures with the appropriate release statement) giving permission for publication with the manuscript. Consult the Research section of the&nbsp;</span><a href=\"http://www.acponline.org/ethics/ethicman.htm\" style=\"background-color: white; border: 0px; color: #006699; cursor: pointer; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; font: inherit; line-height: 17px; margin: 0px; padding: 0px; text-decoration: initial; vertical-align: baseline;\">American College of Physicians Ethics Manual</a><span style=\"background-color: white; color: #333333; font-family: Helvetica, Arial, Verdana, sans-serif; font-size: 11px; line-height: 17px;\">&nbsp;for further information.\"</span></blockquote><br />But yet, in computer science, we tend not to take this process very seriously. I suspect most computer scientists have never heard of, or dealt with, their institution's IRB. I was surprised to see that CHI, the top conference in the area of human-computer interaction (in which user studies are commonplace), says nothing in its&nbsp;<a href=\"http://chi2013.acm.org/authors/call-for-participation/papers-notes/\">call for papers</a>&nbsp;about requiring IRB approval disclosure for human subjects studies -- perhaps the practice of obtaining IRB approval is already widespread in that community, though I doubt it.<br /><br />Why do I think we should require authors to document IRB approval? For two reasons. First, to <b>raise awareness</b> of this issue and ensure that authors are aware of their obligations before they submit a paper to such venues. Second, to <b>prevent paper reviewers from having to make a judgment call</b>&nbsp;when a paper is unclear on whether and how a study protects its participants. The whole point of an IRB is to front-load the approval process before the research study even begins, well before a paper gets submitted. The nature of a research project may well change depending on the IRB's requirements for protecting user privacy.<br /><br />To give an example of how this can be done properly, colleagues of mine at University of Michigan and University of Washington are developing a mobile app for collecting network performance data, called <a href=\"http://www.mobiperf.com/\">MobiPerf</a>. The PIs have IRB approval for this study and the app clearly informs the users that the data will be collected for a research study when the app first starts; clicking \"No thanks\" immediately exits the app. Furthermore, there is a <a href=\"http://www.mobiperf.com/privacy\">fairly detailed privacy statement</a>&nbsp;and EULA&nbsp;on the app's website, explaining exactly what data is collected. It's true that going through these steps required more effort on the part of the researchers, but it's not just a good idea -- it's the law.<br /><br /><i>This is my personal blog. The views expressed here are mine alone and not those of my employer.</i><br /><br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/8573558845084480835/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/the-ethics-of-mobile-data-collection.html#comment-form") (title . "13 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/8573558845084480835"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/8573558845084480835"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/the-ethics-of-mobile-data-collection.html") (title . "The ethics of mobile data collection"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/-zgCpDD74uys/UP97O0ixUWI/AAAAAAAAF-Y/2Stib3SX45A/s72-c/Screenshot_2013-01-22-21-50-22.png") (height . "72") (width . "72"))) (thr:total nil "13"))) ("How to get a faculty job, Part 3: Negotiating the offer" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is the third (actually fourth) part in this series on how to get a faculty job in Computer Science. <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1</a> and <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b</a> dealt with the application process, and <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html\">Part 2</a> was about interviewing. In this post, I'll talk about what happens when you get a job offer and how to negotiate when you have multiple offers.<br /><br />There is often a long and painful wait from the time you complete the interview until you hear back from the school about whether they will be making you an offer. This is generally because all (or most) of the candidates need to complete interviews before the final hiring decisions are made, and the actual offer needs to be approved by the department or school administration before the candidate can be given the good news. Depending on how early you interview, this wait can be on the order of a month or two. (Generally, candidates interview between February and April, and offers start getting made around April or May.)&nbsp;Sometimes a school won't contact you at all after the interview, and after a while you figure you're not getting an offer after all. Sometimes they contact you fairly quickly to deliver the <i>coup de grâce</i>, which is greatly appreciated since then you can at least stop holding out hope.<br /><br />As I pointed out in the previous post on interviewing, it is a very good idea&nbsp;to <b>keep in touch with schools you are really interested in</b> and let them know where you are in the process, and especially if you have offers from other schools. Usually this can be done via informal email to your host when you interviewed. The last thing a department wants is for their top candidate to take a job elsewhere before they have a chance to make an offer. So let people know what's happening and try to find out how your top choices are doing in terms of making offers.<br /><br />There are three kinds of offers: (1) Straight-up offers; (2) \"Offers for offers\", and (3) Second-choice offers. I'll explain each below.<br /><br /><b>Straight-up offers</b><br /><b><br /></b>The best possible outcome is that you get a call from your host or the hiring committee chair who says, \"I'm happy to let you know that we're going to be making you an offer.\" At this stage, you probably will not get into any of the details about salary, research funding, and the like -- that comes later.<br /><br />Most of the time, departments will offer to <b>fly you out for a second visit</b>, sometimes with your spouse or significant other, so you can spend time getting to know the department, university, and town. This is much more relaxed than the interview, and is a great way to get to know your potential future colleagues under less stressful conditions. A second visit can be <b>very</b>&nbsp;important for deciding where to kick off your career as a faculty member: you will learn many things that you might not have had time to get into when you interviewed. In particular, you are going to care much more about things like housing, schools for your kids, quality of life, and other factors that you didn't get a chance to judge during the interview. Definitely do a second visit if you are serious about a school.<br /><br /><b>Offers for offers</b><br /><b><br /></b>The dilemma faced by many departments is that they have several really good candidates but only one (or maybe two) open positions. If a department blindly makes an offer to its top candidate, but that person is not that serious about taking the job there, then their second- or third-choice candidates (who might be just as good!) might end up taking offers elsewhere while the first candidate sits on the offer in the hopes of using it as a point of negotiation with another school. Also keep in mind that schools generally <b>cannot</b>&nbsp;have multiple outstanding offers for a single position.<br /><br />So, sometimes a department won't make an outright job offer, but will instead feel you out to find out if you're really serious about taking a job there, a so-called \"offer for an offer\". The idea is that the department can (and will!) make a formal offer, but only after determining that you really want it.<br /><br />From a purely selfish perspective, it might seem that your best strategy is to amass as many offers as you can so you have the most leverage when negotiating salary and other aspects of the compensation. But this also puts the department in a real bind if you end up sitting on the offer without any real intention of taking it. I don't think pissing a bunch of people off (even at a place where you don't take a job) is a good strategy for anyone trying to jumpstart an academic career.<br /><br />Some schools do ridiculous things like <b>exploding offers</b>, which expire after a set time, to avoid the situation where someone sits on an offer for too long. Given that schools are rarely well-synchronized in their recruiting schedules, this can be disastrous: Say you get an offer that explodes after two weeks, but you haven't finished interviewing yet and still haven't heard from most of the schools. The last thing you want is to be forced into accepting a job at a school because the offer was going to time out.&nbsp;By no means should you be forced to make a decision on taking a faculty job before you have had a chance to evaluate all of your options. Personally, I think schools that do this are being idiotic and should think seriously about what kind of people they are going to be successful recruiting though such tactics.<br /><br />I once heard a case of a hiring committee which couldn't make up its mind, so they called their top five candidates and said, \"We have two offers available, the first two people who call us to claim the offer will get one, but it will explode in two weeks.\" I think this kind of strategy is a complete load of crap, and the hiring committee should be ashamed of itself for not being able to commit to their top one or two candidates and ride it through. But I digress.<br /><br /><b>Second-choice offers</b><br /><b><br /></b>It is often the case that you aren't the school's top choice, but you are their second (or third) choice for the position. Sometimes a school will tell you this outright: That they would love to make you an offer, assuming that their first-choice candidate declines them. This can sting, of course, and I question the wisdom of telling candidates this much information. Most people don't want to take a job somewhere where they feel as though they were the consolation prize. Sometimes, you find out through the grapevine that someone else already has an offer from that school, but later on you get a call with an offer of your own (and it just so happens that the other candidate recently accepted a job elsewhere). At some point you have to swallow your pride and appreciate that in a few months, nobody will remember (or care) that you weren't the first choice, and you got an awesome job at a good school, and that's all that matters. The point is that <b>an offer's an offer</b>, so don't worry too much if you weren't the department's original top choice.<br /><br />From sitting on the faculty hiring committee at Harvard, I can vouch for how hard it can be for a school to narrow its choices to one or two people in a field of really good candidates. Often the choice of who to make the first offer to is arbitrary, based on some general vibe that you think the person might be more or less inclined to accept the job. A department might have two or three candidates who are all more or less equal but they have to make a first choice somehow.<br /><br /><b>What's in an offer?</b><br /><b><br /></b>In most cases, the initial job offer is verbal and you won't get a formal, written job offer until much later, based on extensive discussions with the dean or department chair about what you expect the offer letter to say. There are several components to most faculty job offers that should be (eventually) spelled out in writing:<br /><ul style=\"text-align: left;\"><li><b>The salary</b> (of course). Usually salary is paid for 9 months of the academic year, with the expectation that you will pay the other 3 months out of a research grant. So if the offer is $100k for 9 months, that's really a 12-month salary of $133k.</li><li><b>Summer salary support</b>. Since most junior faculty come in with no research grants, usually a department will offer to pay one or two summers' worth of your salary until you get grants of your own.</li><li><b>Teaching relief.</b>&nbsp;At many schools, incoming junior faculty are given a semester of teaching relief which they can take at some point in the first couple of years. This gives you a little more free time to kick start your research and lessens the load of transitioning into the new job. My strong recommendation is to <b>wait until your second or third term</b>&nbsp;before taking teaching relief: Teaching a course (especially a graduate seminar) your first term on the job is a great way of recruiting students to your research group, and you're so screwed anyway the first semester as a new faculty member that teaching relief is hardly beneficial until you get your research group up to speed.</li><li><b>Graduate student support.</b>&nbsp;Many schools will provide funding to support one or two grad students for a couple of years, to help seed your research group. Of course, you still have to identify and recruit the students (a topic for a future blog post). Keep in mind that grad students aren't cheap. In addition to their paltry salary, the student's tuition and fringe benefits need to be paid for. Typically a PhD student will cost around $75K year all in, so support for a couple of students is a lot of money.</li><li><b>Research support.</b>&nbsp;This can take many forms depending on the school, but generally this is money (in some form) to help you get your research going in lieu of any grants. The best form of this is an outright <b>slush fund</b>&nbsp;which you can use to pay for anything related to your research: computers, equipment, students, summer salary, travel, conference registrations, pizza parties for the team, you name it. At Harvard, my \"startup package\" was in the six figures, but this is unusual; I think that most schools do something in the $20K range, sometimes less. (If the school is offering to pay for students or summer salary separately, you have to factor this in as well.) In many cases, a department will separately offer you some amount of <b>equipment</b>&nbsp;(such as a fund to buy a computers and laptop) in addition to, or in lieu of, a general slush fund. It depends very much on how the school manages its finances and chooses to account for things.&nbsp;Some schools without deep pockets may only offer you a hand-me-down workstation and a few hundred bucks to offset the cost of a laptop. It varies a lot.</li><li><b>Lab space. </b>I don't know how common it is for a job offer to include an explicit provision for lab space (that is, not including your own office). In many departments, grad student space is a shared resource and there is not usually a need for dedicated labs for specific faculty. However, depending on the nature of your research, you might need specialized lab space -- for example, if you are developing a <a href=\"http://www.youtube.com/watch?v=UQzuL60V9ng\">swarm of quad-copters</a>&nbsp;you probably need some dedicated space for that.</li><li><b>Other perks.</b>&nbsp;It is common for the department to pay for (or offset) your moving expenses, especially if you are moving from far away. An offer also might include things like temporary housing when you first move. Again, this varies a lot.</li></ul><div><b>How to negotiate</b></div><div><b><br /></b>Okay, so let's assume you're lucky enough to have a couple of faculty job offers in hand. What do you need to keep in mind?<br /><br />First things first. <b>Only negotiate with schools you are really serious about.</b>&nbsp;It is a waste of everyone's time (and patience) if you feign excitement about a school just to get them to bump up your offer and use that as leverage against another school. People will know if you are bullshitting them. And keep in mind that even if you don't take a job somewhere, those people you run the risk of pissing off will continue to be important academic colleagues. One day they might be called upon to write tenure review letters for you. The point is you want to avoid making enemies.<br /><br />Secondly, <b>you can't compare industry and academic offers.</b>&nbsp;At all. Compensation from industry is going to be <i>much</i>&nbsp;higher (especially over time) than any academic offer, when you factor in salary, bonuses, stock options, and the steeper increase year over year compared to a university job. So you can't expect to use an an industry offer as leverage to negotiate higher compensation at a university.<br /><br />At many universities, the <b>salary is non-negotiable</b>&nbsp;as it is based on a standard scale that (in most cases) can't be changed. You might be able to negotiate a small salary increase if another school is offering much more, but this seems unlikely to me. Keep in mind that the range of starting salaries for junior faculty across different schools (at least among top-ranked research institutions) is pretty tight, so there's not much wiggle room there anyway. You can ask but don't be surprised if you're told that the salary is fixed.<br /><br />If you can, try to <b>get your startup package to be all or mostly cash</b>. By \"cash\" I mean funding that can be used to pay for anything: students, equipment, travel, whatever. If your startup is segmented into X dollars for students, Y dollars for equipment, and so forth, that can constrain you down the line, if, for example, you end up wanting to hire more students than you expected or don't need as much travel funding. Fungibility is good.<br /><br />It's a good idea to have a <b>rough idea of how much you need</b>&nbsp;to get started before you start talking hard numbers. When I did my faculty job search, I had in mind a research agenda involving building out an experimental workstation cluster as well as some other equipment needs, travel to several conferences in my first couple of years, and support for two students. I made up a quick and dirty spreadsheet to estimate how much all of this would cost and used that as the starting point for talking about the size of the startup package. If you have no idea how much you expect to spend -- and what you might spend it on -- you will have a hard time making a convincing case that you need more than what's being offered.<br /><br />If you have a&nbsp;<b>two-body problem</b>&nbsp;(which is probably deserving of its own blog post), find out what, if anything, the university can do to help your partner land a job in the area. You may be surprised. When I was on the job market, my wife was finishing up medical school and we were going to make a decision about where to go in large part based on whether she would be able to get a good residency position. Although nobody could guarantee my wife a residency slot, the schools that were recruiting me helped set up meetings with a bunch of people to learn more about the programs in each area so we got a good sense of what her options were like. It is also not uncommon for universities to facilitate positions for spouses and partners of faculty they are trying to recruit -- many things are possible.<br /><br />If you have kids, you should by all means <b>try to negotiate for a spot in the university's day care center</b>. The waiting lists for day care can be years long, but special exceptions can often be made when a school is trying to recruit a new faculty member. This is not always possible but it's worth asking about.<br /><br />Finally, <b>don't be greedy.</b>&nbsp;This is not about maximizing your compensation and startup package and pissing everyone off in the process.&nbsp;Your goal in negotiating the offer is&nbsp;<b>not to squeeze every penny you can out of them</b>&nbsp;-- instead, it's to reach a point where you feel confident that the compensation and startup package will allow you to be happy and successful in your new job.</div><div><br /></div><div><b>So which offer should you take?</b><br /><b><br /></b>Although I'm sure it happens, I would hope that nobody would take a faculty job just because it paid the most or had the largest startup package. If your only goal in life is to maximize your compensation, trust me: You do not want to be a professor. There are many, many other factors that are <b>more important than the size of the offer</b>: The culture and quality of the department, the students, the physical location, the quality of life ... the list goes on and on. In steady state, you're going to be a (relatively) poor academic, and struggling to get research grants just like everyone else. The initial salary and startup package can give you a boost, but it mostly comes out in the wash -- the absolute numbers won't matter much beyond the first year or so. So focus on finding the job that will make you happiest, not just that which pays the most.</div></div>" "http://matt-welsh.blogspot.com/feeds/4963230955587673096/comments/default" (20711 7511) old 15 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-4963230955587673096") (published nil "2013-01-03T21:58:00.005-08:00") (updated nil "2013-01-04T10:20:07.939-08:00") (title ((type . "text")) "How to get a faculty job, Part 3: Negotiating the offer") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is the third (actually fourth) part in this series on how to get a faculty job in Computer Science. <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1</a> and <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b</a> dealt with the application process, and <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html\">Part 2</a> was about interviewing. In this post, I'll talk about what happens when you get a job offer and how to negotiate when you have multiple offers.<br /><br />There is often a long and painful wait from the time you complete the interview until you hear back from the school about whether they will be making you an offer. This is generally because all (or most) of the candidates need to complete interviews before the final hiring decisions are made, and the actual offer needs to be approved by the department or school administration before the candidate can be given the good news. Depending on how early you interview, this wait can be on the order of a month or two. (Generally, candidates interview between February and April, and offers start getting made around April or May.)&nbsp;Sometimes a school won't contact you at all after the interview, and after a while you figure you're not getting an offer after all. Sometimes they contact you fairly quickly to deliver the <i>coup de grâce</i>, which is greatly appreciated since then you can at least stop holding out hope.<br /><br />As I pointed out in the previous post on interviewing, it is a very good idea&nbsp;to <b>keep in touch with schools you are really interested in</b> and let them know where you are in the process, and especially if you have offers from other schools. Usually this can be done via informal email to your host when you interviewed. The last thing a department wants is for their top candidate to take a job elsewhere before they have a chance to make an offer. So let people know what's happening and try to find out how your top choices are doing in terms of making offers.<br /><br />There are three kinds of offers: (1) Straight-up offers; (2) \"Offers for offers\", and (3) Second-choice offers. I'll explain each below.<br /><br /><b>Straight-up offers</b><br /><b><br /></b>The best possible outcome is that you get a call from your host or the hiring committee chair who says, \"I'm happy to let you know that we're going to be making you an offer.\" At this stage, you probably will not get into any of the details about salary, research funding, and the like -- that comes later.<br /><br />Most of the time, departments will offer to <b>fly you out for a second visit</b>, sometimes with your spouse or significant other, so you can spend time getting to know the department, university, and town. This is much more relaxed than the interview, and is a great way to get to know your potential future colleagues under less stressful conditions. A second visit can be <b>very</b>&nbsp;important for deciding where to kick off your career as a faculty member: you will learn many things that you might not have had time to get into when you interviewed. In particular, you are going to care much more about things like housing, schools for your kids, quality of life, and other factors that you didn't get a chance to judge during the interview. Definitely do a second visit if you are serious about a school.<br /><br /><b>Offers for offers</b><br /><b><br /></b>The dilemma faced by many departments is that they have several really good candidates but only one (or maybe two) open positions. If a department blindly makes an offer to its top candidate, but that person is not that serious about taking the job there, then their second- or third-choice candidates (who might be just as good!) might end up taking offers elsewhere while the first candidate sits on the offer in the hopes of using it as a point of negotiation with another school. Also keep in mind that schools generally <b>cannot</b>&nbsp;have multiple outstanding offers for a single position.<br /><br />So, sometimes a department won't make an outright job offer, but will instead feel you out to find out if you're really serious about taking a job there, a so-called \"offer for an offer\". The idea is that the department can (and will!) make a formal offer, but only after determining that you really want it.<br /><br />From a purely selfish perspective, it might seem that your best strategy is to amass as many offers as you can so you have the most leverage when negotiating salary and other aspects of the compensation. But this also puts the department in a real bind if you end up sitting on the offer without any real intention of taking it. I don't think pissing a bunch of people off (even at a place where you don't take a job) is a good strategy for anyone trying to jumpstart an academic career.<br /><br />Some schools do ridiculous things like <b>exploding offers</b>, which expire after a set time, to avoid the situation where someone sits on an offer for too long. Given that schools are rarely well-synchronized in their recruiting schedules, this can be disastrous: Say you get an offer that explodes after two weeks, but you haven't finished interviewing yet and still haven't heard from most of the schools. The last thing you want is to be forced into accepting a job at a school because the offer was going to time out.&nbsp;By no means should you be forced to make a decision on taking a faculty job before you have had a chance to evaluate all of your options. Personally, I think schools that do this are being idiotic and should think seriously about what kind of people they are going to be successful recruiting though such tactics.<br /><br />I once heard a case of a hiring committee which couldn't make up its mind, so they called their top five candidates and said, \"We have two offers available, the first two people who call us to claim the offer will get one, but it will explode in two weeks.\" I think this kind of strategy is a complete load of crap, and the hiring committee should be ashamed of itself for not being able to commit to their top one or two candidates and ride it through. But I digress.<br /><br /><b>Second-choice offers</b><br /><b><br /></b>It is often the case that you aren't the school's top choice, but you are their second (or third) choice for the position. Sometimes a school will tell you this outright: That they would love to make you an offer, assuming that their first-choice candidate declines them. This can sting, of course, and I question the wisdom of telling candidates this much information. Most people don't want to take a job somewhere where they feel as though they were the consolation prize. Sometimes, you find out through the grapevine that someone else already has an offer from that school, but later on you get a call with an offer of your own (and it just so happens that the other candidate recently accepted a job elsewhere). At some point you have to swallow your pride and appreciate that in a few months, nobody will remember (or care) that you weren't the first choice, and you got an awesome job at a good school, and that's all that matters. The point is that <b>an offer's an offer</b>, so don't worry too much if you weren't the department's original top choice.<br /><br />From sitting on the faculty hiring committee at Harvard, I can vouch for how hard it can be for a school to narrow its choices to one or two people in a field of really good candidates. Often the choice of who to make the first offer to is arbitrary, based on some general vibe that you think the person might be more or less inclined to accept the job. A department might have two or three candidates who are all more or less equal but they have to make a first choice somehow.<br /><br /><b>What's in an offer?</b><br /><b><br /></b>In most cases, the initial job offer is verbal and you won't get a formal, written job offer until much later, based on extensive discussions with the dean or department chair about what you expect the offer letter to say. There are several components to most faculty job offers that should be (eventually) spelled out in writing:<br /><ul style=\"text-align: left;\"><li><b>The salary</b> (of course). Usually salary is paid for 9 months of the academic year, with the expectation that you will pay the other 3 months out of a research grant. So if the offer is $100k for 9 months, that's really a 12-month salary of $133k.</li><li><b>Summer salary support</b>. Since most junior faculty come in with no research grants, usually a department will offer to pay one or two summers' worth of your salary until you get grants of your own.</li><li><b>Teaching relief.</b>&nbsp;At many schools, incoming junior faculty are given a semester of teaching relief which they can take at some point in the first couple of years. This gives you a little more free time to kick start your research and lessens the load of transitioning into the new job. My strong recommendation is to <b>wait until your second or third term</b>&nbsp;before taking teaching relief: Teaching a course (especially a graduate seminar) your first term on the job is a great way of recruiting students to your research group, and you're so screwed anyway the first semester as a new faculty member that teaching relief is hardly beneficial until you get your research group up to speed.</li><li><b>Graduate student support.</b>&nbsp;Many schools will provide funding to support one or two grad students for a couple of years, to help seed your research group. Of course, you still have to identify and recruit the students (a topic for a future blog post). Keep in mind that grad students aren't cheap. In addition to their paltry salary, the student's tuition and fringe benefits need to be paid for. Typically a PhD student will cost around $75K year all in, so support for a couple of students is a lot of money.</li><li><b>Research support.</b>&nbsp;This can take many forms depending on the school, but generally this is money (in some form) to help you get your research going in lieu of any grants. The best form of this is an outright <b>slush fund</b>&nbsp;which you can use to pay for anything related to your research: computers, equipment, students, summer salary, travel, conference registrations, pizza parties for the team, you name it. At Harvard, my \"startup package\" was in the six figures, but this is unusual; I think that most schools do something in the $20K range, sometimes less. (If the school is offering to pay for students or summer salary separately, you have to factor this in as well.) In many cases, a department will separately offer you some amount of <b>equipment</b>&nbsp;(such as a fund to buy a computers and laptop) in addition to, or in lieu of, a general slush fund. It depends very much on how the school manages its finances and chooses to account for things.&nbsp;Some schools without deep pockets may only offer you a hand-me-down workstation and a few hundred bucks to offset the cost of a laptop. It varies a lot.</li><li><b>Lab space. </b>I don't know how common it is for a job offer to include an explicit provision for lab space (that is, not including your own office). In many departments, grad student space is a shared resource and there is not usually a need for dedicated labs for specific faculty. However, depending on the nature of your research, you might need specialized lab space -- for example, if you are developing a <a href=\"http://www.youtube.com/watch?v=UQzuL60V9ng\">swarm of quad-copters</a>&nbsp;you probably need some dedicated space for that.</li><li><b>Other perks.</b>&nbsp;It is common for the department to pay for (or offset) your moving expenses, especially if you are moving from far away. An offer also might include things like temporary housing when you first move. Again, this varies a lot.</li></ul><div><b>How to negotiate</b></div><div><b><br /></b>Okay, so let's assume you're lucky enough to have a couple of faculty job offers in hand. What do you need to keep in mind?<br /><br />First things first. <b>Only negotiate with schools you are really serious about.</b>&nbsp;It is a waste of everyone's time (and patience) if you feign excitement about a school just to get them to bump up your offer and use that as leverage against another school. People will know if you are bullshitting them. And keep in mind that even if you don't take a job somewhere, those people you run the risk of pissing off will continue to be important academic colleagues. One day they might be called upon to write tenure review letters for you. The point is you want to avoid making enemies.<br /><br />Secondly, <b>you can't compare industry and academic offers.</b>&nbsp;At all. Compensation from industry is going to be <i>much</i>&nbsp;higher (especially over time) than any academic offer, when you factor in salary, bonuses, stock options, and the steeper increase year over year compared to a university job. So you can't expect to use an an industry offer as leverage to negotiate higher compensation at a university.<br /><br />At many universities, the <b>salary is non-negotiable</b>&nbsp;as it is based on a standard scale that (in most cases) can't be changed. You might be able to negotiate a small salary increase if another school is offering much more, but this seems unlikely to me. Keep in mind that the range of starting salaries for junior faculty across different schools (at least among top-ranked research institutions) is pretty tight, so there's not much wiggle room there anyway. You can ask but don't be surprised if you're told that the salary is fixed.<br /><br />If you can, try to <b>get your startup package to be all or mostly cash</b>. By \"cash\" I mean funding that can be used to pay for anything: students, equipment, travel, whatever. If your startup is segmented into X dollars for students, Y dollars for equipment, and so forth, that can constrain you down the line, if, for example, you end up wanting to hire more students than you expected or don't need as much travel funding. Fungibility is good.<br /><br />It's a good idea to have a <b>rough idea of how much you need</b>&nbsp;to get started before you start talking hard numbers. When I did my faculty job search, I had in mind a research agenda involving building out an experimental workstation cluster as well as some other equipment needs, travel to several conferences in my first couple of years, and support for two students. I made up a quick and dirty spreadsheet to estimate how much all of this would cost and used that as the starting point for talking about the size of the startup package. If you have no idea how much you expect to spend -- and what you might spend it on -- you will have a hard time making a convincing case that you need more than what's being offered.<br /><br />If you have a&nbsp;<b>two-body problem</b>&nbsp;(which is probably deserving of its own blog post), find out what, if anything, the university can do to help your partner land a job in the area. You may be surprised. When I was on the job market, my wife was finishing up medical school and we were going to make a decision about where to go in large part based on whether she would be able to get a good residency position. Although nobody could guarantee my wife a residency slot, the schools that were recruiting me helped set up meetings with a bunch of people to learn more about the programs in each area so we got a good sense of what her options were like. It is also not uncommon for universities to facilitate positions for spouses and partners of faculty they are trying to recruit -- many things are possible.<br /><br />If you have kids, you should by all means <b>try to negotiate for a spot in the university's day care center</b>. The waiting lists for day care can be years long, but special exceptions can often be made when a school is trying to recruit a new faculty member. This is not always possible but it's worth asking about.<br /><br />Finally, <b>don't be greedy.</b>&nbsp;This is not about maximizing your compensation and startup package and pissing everyone off in the process.&nbsp;Your goal in negotiating the offer is&nbsp;<b>not to squeeze every penny you can out of them</b>&nbsp;-- instead, it's to reach a point where you feel confident that the compensation and startup package will allow you to be happy and successful in your new job.</div><div><br /></div><div><b>So which offer should you take?</b><br /><b><br /></b>Although I'm sure it happens, I would hope that nobody would take a faculty job just because it paid the most or had the largest startup package. If your only goal in life is to maximize your compensation, trust me: You do not want to be a professor. There are many, many other factors that are <b>more important than the size of the offer</b>: The culture and quality of the department, the students, the physical location, the quality of life ... the list goes on and on. In steady state, you're going to be a (relatively) poor academic, and struggling to get research grants just like everyone else. The initial salary and startup package can give you a boost, but it mostly comes out in the wash -- the absolute numbers won't matter much beyond the first year or so. So focus on finding the job that will make you happiest, not just that which pays the most.</div></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/4963230955587673096/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/how-to-get-faculty-job-part-3.html#comment-form") (title . "11 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4963230955587673096"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/4963230955587673096"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2013/01/how-to-get-faculty-job-part-3.html") (title . "How to get a faculty job, Part 3: Negotiating the offer"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "11"))) ("How to get a faculty job, Part 2: The interview" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is the second (actually, third!) part of a several-part series on getting a faculty job in Computer Science. In <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1</a>, I talked about the application process. In <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b</a>, I gave some details about how hiring committees decide whom to bring in for interviews. In this part I'll talk about what it takes to nail the interview itself.<br /><br />Faculty job interviews are generally one or two (long) days. The main components are the all-importan<b>t</b>&nbsp;job talk; meeting with countless faculty, deans, and students; and usually some kind of fancy dinner. All of these components are essential to getting a job offer.<br /><br />The process of interviewing is <b>exhausting</b>. Two full days of talking with people can really wear you out, especially since you need to be \"on\" all the time. As I'll explain below, any kind of dinner or social outing is not in fact a chance to take a break, since you're being evaluated during those times as well.<br /><br /><b>Planning travel:</b>&nbsp;Usually, schools will pay for your travel and hotel expenses for the interview, though more often than not they expect you to pay the costs up front and they will reimburse you later. Get a credit card with great rewards since you'll be racking up the points over the course of several faculty interviews. Be prepared to lay out several thousand dollars for each interview trip as reimbursements can take a couple of months to process.<br /><br />If you are interviewing at several schools, try to <b>avoid doing more than two interviews back to back.</b>&nbsp;Each of these trips takes a lot out of you and it's good to get home to recharge, even if just for a couple of days, in between trips. Also, <b>don't plan on getting any real work done</b>&nbsp;during the interview season. If your thesis committee is expecting a draft, try to get it off your plate before you start interviewing -- that way the pressure is off. By no means should you be trying to meet a paper deadline while interviewing. (Look at it this way: By the time you're interviewing, it's too late for any new publications on your resume to affect the outcome of the job search.)<br /><br /><b>What to bring and how to dress:</b>&nbsp;You'll be giving a job talk everywhere which almost always means using a laptop to present. Get a <b>lightweight</b>&nbsp;laptop since you'll be lugging it everywhere, and will rarely have a chance to dump it somewhere as you are whisked from meeting to meeting during the interview. Always have your slides -- preferably in a universal format, like PDF -- on a USB stick as a backup in case you can't get your laptop to work with the projector. Also, under no circumstances should you assume that your laptop will have Internet access during the talk -- too many schools have their WiFi locked down and getting guest access can be difficult.<br /><br />The <b>dress code</b>&nbsp;for job interviews is a topic of much discussion, and I know some people will disagree with me here: But dress formally. For guys, this means a suit <i>and</i>&nbsp;tie, with nice shoes and a nice belt. For women, this generally means a business suit as well, though there is a wider range of options for women who want to dress smart.<br /><br />Why should you dress formally for an interview? Well, duh, it's a job interview. You want to be seen by your future colleagues as a <b>professor</b>, not just another slacker grad student. You also want to show your potential employer that you are taking the process seriously. At many schools you may have the occasion to meet with a dean or other such muckety-muck who might be the person to sign off on a job offer to you. You want them to see you as a mature professional. I see <b>absolutely no disadvantages</b>&nbsp;to dressing up well for a job interview, and <b>many potential pitfalls</b>&nbsp;for under-dressing.<br /><br />Yes, you will feel silly at first, since (with rare exception) you will be the only person wearing a suit that you will meet during the interview. People will crack jokes, like \"wow! you're really dressed up!\" -- my typical response to that was \"er, but I always dress this way\" which would get a laugh.<br /><br />It is best to <b>bring two suits</b>&nbsp;and alternate them. You never know when you might spill something on one of your suits, so you need a backup. This also gives you a chance to drop one of the suits off with the hotel to get it dry-cleaned while you're interviewing. Also, <b>always bring your luggage with you on the plane: never check it</b>. You cannot risk your luggage getting lost and being forced to interview in a t-shirt and jeans. I used a nice tri-fold suit bag which was compact enough to hold both suits and fit in the overhead bin on any plane.<br /><br /><b>The job talk:</b>&nbsp;This is by far the most important part of the interview. If you give a bad talk there is no chance you will recover and end up with an offer, whereas a few botched one-on-one interviews might not sink you. The job talk serves the dual purpose of presenting your research contributions to the department, as well as showcasing your teaching ability. The talk needs to be extremely well-rehearsed, technically solid, clear, entertaining, engaging, and instructive. It is a tall order. If you can't do this well, then you <b>probably don't want to be a professor</b>, since giving talks and lectures is a huge part of the job.<br /><br />You need to practice your talk, and preferably with an <b>unfamiliar audience</b>&nbsp;-- i.e., not just with people from your research group who already know your work well. Giving a \"pre-job-talk\" talk at another school is ideal, but be careful: if you blow it there you won't get invited for an interview. Doing a dry run at a school where you don't plan to interview would be a good idea.<br /><br />It's important to remember that the job talk is <b>not a talk to people in your area</b>. The people in your area (say, systems or AI) already know your work -- which is why you're interviewing there in the first place. The talk needs to appeal broadly to the rest of the department -- to explain why your work is important, what the key contributions are, and to give them intuition for how to solve hard problems in an area other than their own. Don't worry if the job talk feels a little \"lighter\" than a typical talk you'd give at a conference: You will have plenty of time to get into the hairy details during the one-on-ones.<br /><br /><a href=\"http://www.eecs.harvard.edu/margo/\">Margo Seltzer</a> once suggested breaking the job talk into \"thirds\": The first third lays out the problem space and why it's important; the second third gets into the technical details of your solution (and it's OK to lose some people here, but try not to lose everyone); and the final third lifts back up a level to explain the implications of the work and chart out possible future directions.<br /><br />As an example,&nbsp;<a href=\"http://www.eecs.harvard.edu/~mdw/private/jobtalk.pdf\" style=\"font-weight: bold;\">my job talk slides from 2002 are here.</a>&nbsp;I don't want to suggest that it's the best job talk ever, but I think it's pretty good, and got me a few job offers. I always try to have a joke or funny point sometime early in the talk, which helps break the ice with the audience -- for example, around slide 3 of my talk slides I had a funny story about the poor sysadmin of the USGS website not being able to fix his web server for three hours following an earthquake.<br /><br />Sometimes an interview talk can result in unintended hilarity. When interviewing at MIT, I was asked by <a href=\"http://cseweb.ucsd.edu/~snoeren/\">Alex Snoeren</a> what impact my system design would have on the \"email experience\" of a typical user. I responded, \"I've never had a <i>mail experience</i>&nbsp;before...\"and then suddenly realized the double entendre of what I just said. It took me a few minutes to regain my composure although half the room was cracking up as well.<br /><br /><b>The one on ones:</b>&nbsp;The bulk of the interview consists of a series of one-on-one meetings with faculty, deans, and sometimes students. These range from half an hour to an hour in length each. You rarely get a break during the day, so if you need to use the bathroom or grab a cup of coffee, just ask (everyone is happy to accomodate). Many of the people on your \"loop\" will be on the faculty hiring committee, and <i>everyone</i>&nbsp;(regardless of role) will be asked to provide feedback to the committee on whether they think you should be given an offer. So you have to impress everyone. Yes, this is hard to do.<br /><br />The one on one can take many forms. Usually, you will be asked a bunch of questions about your research, your teaching plans, and future research ideas. You need to <b>spend some time thinking about what you would work on</b> and what kind of research agenda you might pursue as a new faculty member, so you can have a pithy response to these questions. Nobody is going to hold you to it, of course, but you should have at least some half-baked ideas about what would constitute a good research direction when you start the job.<br /><br />Some interviewers will be trying to assess whether you will <b>be able to get tenure</b>&nbsp;at their institution in a few years. Of course it's way too early to make that judgment during a job interview, but if you can't come up with any kind of coherent research plan or agenda that sounds like it will bear fruit, you're going to be in trouble. When I interviewed, I was doing a lot of thinking about how to apply control theory to the management of complex computer systems, which led in all kinds of interesting directions (few of which I ended up actually working on when I got to Harvard). But at least I had plenty to talk about in terms of possible research directions.<br /><br />You should also take the opportunity to learn as much as you can about the interviewer. After all, this is <b>not a one-sided process:</b>&nbsp;you should be evaluating the quality of the department and its faculty as well.&nbsp;When prompted, most professors can easily launch into a twenty-minute lecture on their research, so if you find you don't have a lot to talk about with someone, try to get them to do this. You will learn a&nbsp;<i>lot</i>&nbsp;this way and may realize amazing opportunities for collaboration. For example, while interviewing at Harvard, I was really excited by <a href=\"http://www.eecs.harvard.edu/~parkes/\">David Parkes' research on multi-agent systems</a> -- and he and I ended up collaborating on a couple of projects once I started there.<br /><br />The easiest of these meetings are with faculty in your area, since generally you have some common ground. The hardest are with people in completely different research areas. It is a <b>very good idea to cyberstalk your interviewers</b>&nbsp;before the interview, by Googling their names and learning as much as you can about their research beforehand. You might discover that there is some mutual interest or acquaintance this way, which will give you something to talk about. If you don't know who will be on your loop, ask your host and they can usually send you the schedule in advance. It's impressive when a candidate comes in having done their homework, knowing a bit about the interviewer's research and background. This is not creepy (although if you get into how cute their kids' pictures are on Facebook, you've probably crossed a line).<br /><br />You will invariably meet with someone who was unable to make your job talk, so <b>be prepared to give a 5-to-10 minute rundown</b>&nbsp;on your research, a \"mini job talk\", if you will. You need to have a punchy, clear way to answer the question, \"So, what do <i>you</i>&nbsp;work on?\" My opening line was something like, \"I work on making web servers really fast, and able to stand up to massive overloads.\" This was enough to get a conversation going on the topic and was a problem statement that pretty much everyone could relate to. If instead I had launched into, \"I work on a hybrid event-driven-threaded server architecture combining rate-limited queues and feedback-controlled thread pools\", I would have immediately put about half of my would-be interviewers to sleep.<br /><br />There are, of course, some tactical questions you should try to get answered while you interview. The standard questions that candidates ask revolve around the teaching load, size and growth trajectory of the faculty, what new areas or initiatives the department might be starting up, what class sizes are like, whether there is a big Master's program, what the department's relationship is with the rest of the school, and of course <a href=\"http://matt-welsh.blogspot.com/2010/06/how-to-get-tenure-at-harvard.html\">what the tenure process is like</a>. The interview is <i>not</i>&nbsp;the time to ask questions about compensation or benefits: Save that for once you have an offer (which will be the subject of the next part in this series).<br /><br />You also want to learn as much as you can about living and working in whatever city the school is in. If you're thinking about buying a house or having kids, you need to understand about the real estate market, schools, good neighborhoods, commute, and so forth. If you care about eating and drinking out, you need to learn about the nightlife. If you ask <i>no questions</i>&nbsp;about the city or area, your interviewers will pick up on this and assume you're not that serious about moving there. You can also save these questions for a <b>second visit</b>&nbsp;after you have a job offer in hand, but it's probably a good idea to start learning about your potential new home.<br /><br /><b>The dinner:</b>&nbsp;Most departments will take faculty candidates out to a fancy dinner somewhere. This might sound like a real perk, but believe me, after 8+ hours of interviewing, it's usually the last thing you really want to do. A nice glass of wine (or three) might sound like the perfect antidote, but it's probably a <b>bad idea to drink</b>&nbsp;-- you are still being evaluated over dinner, and if you're like me, you can get really uninhibited with the combination of interview exhaustion and alcohol. Of course, for the faculty dining with you, they are planning on expensing the dinner and wine, so by all means encourage them to order whatever they like (and maybe indulge yourself half a glass to help take the edge off).<br /><br />The best interview dinners I had were with folks that I was friendly with and worked in my area. <a href=\"http://www.cs.rice.edu/~dwallach/\">Dan Wallach</a>&nbsp;at Rice recognized that I was probably getting sick of fancy restaurants and took me out to eat crawdads with my hands (and a big old plastic bib to protect my suit). The worst interview dinners I had were when several senior faculty used the time to gossip amongst themselves and completely ignored me. On that topic, <b>don't gossip</b>&nbsp;about other schools while you are interviewing. It's bad form, and an easy trap to fall into -- and keep in mind that everybody talks to everybody, so what you say at UCSB will get back to those folks at Duke, somehow (not that I would ever do such a thing).<br /><br /><b>After the interview:</b>&nbsp;When you get home, or back to your hotel, be sure to send a nice <b>thank-you note</b>&nbsp;to your host, expressing your interest and enthusiasm for the school and department (assuming, of course, that you are enthusiastic and interested). Don't assume the school knows you really had a good time and would love to work there. Hiring committees are always trying to read subtle signals from the candidates about how seriously they would entertain an offer from their department, so if you're not explicit, the hiring committee might mistakenly assume you wouldn't be that keen on a position there. If you're <b>not that interested</b>, well, don't go out of your way to say that you are, but you probably don't want to let the school know right away. Having several offers -- even from schools you're not serious about -- can be a good bargaining chip when it comes time to negotiate the offer with the school you do want to join.<br /><br />Finally, I strongly recommend <b>taking detailed notes</b>&nbsp;on your interviews, when you get back to the hotel each day. I found my notes to be invaluable when considering the several job offers I had, since my memories of a place started to fade after ten or so interviews. Writing out my observations and gut feelings about a school also helped crystallize the many tradeoffs in my mind.<br /><br />After this it's mostly a waiting game to see if you'll get an offer. This can take a matter of weeks, depending on when during the interview cycle your visit happens to fall, so be patient! If you do end up with a time-limited offer from another school, it's perfectly acceptable to contact other schools you have not heard back from yet to let them know you are still very interested but are operating under time pressure. Stay tuned for the next part of this series where I'll talk about the process of negotiating offers.<br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/1171799036408860525/comments/default" (20700 53480) old 16 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1171799036408860525") (published nil "2012-12-27T14:42:00.002-08:00") (updated nil "2012-12-27T14:51:20.448-08:00") (title ((type . "text")) "How to get a faculty job, Part 2: The interview") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is the second (actually, third!) part of a several-part series on getting a faculty job in Computer Science. In <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1</a>, I talked about the application process. In <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b</a>, I gave some details about how hiring committees decide whom to bring in for interviews. In this part I'll talk about what it takes to nail the interview itself.<br /><br />Faculty job interviews are generally one or two (long) days. The main components are the all-importan<b>t</b>&nbsp;job talk; meeting with countless faculty, deans, and students; and usually some kind of fancy dinner. All of these components are essential to getting a job offer.<br /><br />The process of interviewing is <b>exhausting</b>. Two full days of talking with people can really wear you out, especially since you need to be \"on\" all the time. As I'll explain below, any kind of dinner or social outing is not in fact a chance to take a break, since you're being evaluated during those times as well.<br /><br /><b>Planning travel:</b>&nbsp;Usually, schools will pay for your travel and hotel expenses for the interview, though more often than not they expect you to pay the costs up front and they will reimburse you later. Get a credit card with great rewards since you'll be racking up the points over the course of several faculty interviews. Be prepared to lay out several thousand dollars for each interview trip as reimbursements can take a couple of months to process.<br /><br />If you are interviewing at several schools, try to <b>avoid doing more than two interviews back to back.</b>&nbsp;Each of these trips takes a lot out of you and it's good to get home to recharge, even if just for a couple of days, in between trips. Also, <b>don't plan on getting any real work done</b>&nbsp;during the interview season. If your thesis committee is expecting a draft, try to get it off your plate before you start interviewing -- that way the pressure is off. By no means should you be trying to meet a paper deadline while interviewing. (Look at it this way: By the time you're interviewing, it's too late for any new publications on your resume to affect the outcome of the job search.)<br /><br /><b>What to bring and how to dress:</b>&nbsp;You'll be giving a job talk everywhere which almost always means using a laptop to present. Get a <b>lightweight</b>&nbsp;laptop since you'll be lugging it everywhere, and will rarely have a chance to dump it somewhere as you are whisked from meeting to meeting during the interview. Always have your slides -- preferably in a universal format, like PDF -- on a USB stick as a backup in case you can't get your laptop to work with the projector. Also, under no circumstances should you assume that your laptop will have Internet access during the talk -- too many schools have their WiFi locked down and getting guest access can be difficult.<br /><br />The <b>dress code</b>&nbsp;for job interviews is a topic of much discussion, and I know some people will disagree with me here: But dress formally. For guys, this means a suit <i>and</i>&nbsp;tie, with nice shoes and a nice belt. For women, this generally means a business suit as well, though there is a wider range of options for women who want to dress smart.<br /><br />Why should you dress formally for an interview? Well, duh, it's a job interview. You want to be seen by your future colleagues as a <b>professor</b>, not just another slacker grad student. You also want to show your potential employer that you are taking the process seriously. At many schools you may have the occasion to meet with a dean or other such muckety-muck who might be the person to sign off on a job offer to you. You want them to see you as a mature professional. I see <b>absolutely no disadvantages</b>&nbsp;to dressing up well for a job interview, and <b>many potential pitfalls</b>&nbsp;for under-dressing.<br /><br />Yes, you will feel silly at first, since (with rare exception) you will be the only person wearing a suit that you will meet during the interview. People will crack jokes, like \"wow! you're really dressed up!\" -- my typical response to that was \"er, but I always dress this way\" which would get a laugh.<br /><br />It is best to <b>bring two suits</b>&nbsp;and alternate them. You never know when you might spill something on one of your suits, so you need a backup. This also gives you a chance to drop one of the suits off with the hotel to get it dry-cleaned while you're interviewing. Also, <b>always bring your luggage with you on the plane: never check it</b>. You cannot risk your luggage getting lost and being forced to interview in a t-shirt and jeans. I used a nice tri-fold suit bag which was compact enough to hold both suits and fit in the overhead bin on any plane.<br /><br /><b>The job talk:</b>&nbsp;This is by far the most important part of the interview. If you give a bad talk there is no chance you will recover and end up with an offer, whereas a few botched one-on-one interviews might not sink you. The job talk serves the dual purpose of presenting your research contributions to the department, as well as showcasing your teaching ability. The talk needs to be extremely well-rehearsed, technically solid, clear, entertaining, engaging, and instructive. It is a tall order. If you can't do this well, then you <b>probably don't want to be a professor</b>, since giving talks and lectures is a huge part of the job.<br /><br />You need to practice your talk, and preferably with an <b>unfamiliar audience</b>&nbsp;-- i.e., not just with people from your research group who already know your work well. Giving a \"pre-job-talk\" talk at another school is ideal, but be careful: if you blow it there you won't get invited for an interview. Doing a dry run at a school where you don't plan to interview would be a good idea.<br /><br />It's important to remember that the job talk is <b>not a talk to people in your area</b>. The people in your area (say, systems or AI) already know your work -- which is why you're interviewing there in the first place. The talk needs to appeal broadly to the rest of the department -- to explain why your work is important, what the key contributions are, and to give them intuition for how to solve hard problems in an area other than their own. Don't worry if the job talk feels a little \"lighter\" than a typical talk you'd give at a conference: You will have plenty of time to get into the hairy details during the one-on-ones.<br /><br /><a href=\"http://www.eecs.harvard.edu/margo/\">Margo Seltzer</a> once suggested breaking the job talk into \"thirds\": The first third lays out the problem space and why it's important; the second third gets into the technical details of your solution (and it's OK to lose some people here, but try not to lose everyone); and the final third lifts back up a level to explain the implications of the work and chart out possible future directions.<br /><br />As an example,&nbsp;<a href=\"http://www.eecs.harvard.edu/~mdw/private/jobtalk.pdf\" style=\"font-weight: bold;\">my job talk slides from 2002 are here.</a>&nbsp;I don't want to suggest that it's the best job talk ever, but I think it's pretty good, and got me a few job offers. I always try to have a joke or funny point sometime early in the talk, which helps break the ice with the audience -- for example, around slide 3 of my talk slides I had a funny story about the poor sysadmin of the USGS website not being able to fix his web server for three hours following an earthquake.<br /><br />Sometimes an interview talk can result in unintended hilarity. When interviewing at MIT, I was asked by <a href=\"http://cseweb.ucsd.edu/~snoeren/\">Alex Snoeren</a> what impact my system design would have on the \"email experience\" of a typical user. I responded, \"I've never had a <i>mail experience</i>&nbsp;before...\"and then suddenly realized the double entendre of what I just said. It took me a few minutes to regain my composure although half the room was cracking up as well.<br /><br /><b>The one on ones:</b>&nbsp;The bulk of the interview consists of a series of one-on-one meetings with faculty, deans, and sometimes students. These range from half an hour to an hour in length each. You rarely get a break during the day, so if you need to use the bathroom or grab a cup of coffee, just ask (everyone is happy to accomodate). Many of the people on your \"loop\" will be on the faculty hiring committee, and <i>everyone</i>&nbsp;(regardless of role) will be asked to provide feedback to the committee on whether they think you should be given an offer. So you have to impress everyone. Yes, this is hard to do.<br /><br />The one on one can take many forms. Usually, you will be asked a bunch of questions about your research, your teaching plans, and future research ideas. You need to <b>spend some time thinking about what you would work on</b> and what kind of research agenda you might pursue as a new faculty member, so you can have a pithy response to these questions. Nobody is going to hold you to it, of course, but you should have at least some half-baked ideas about what would constitute a good research direction when you start the job.<br /><br />Some interviewers will be trying to assess whether you will <b>be able to get tenure</b>&nbsp;at their institution in a few years. Of course it's way too early to make that judgment during a job interview, but if you can't come up with any kind of coherent research plan or agenda that sounds like it will bear fruit, you're going to be in trouble. When I interviewed, I was doing a lot of thinking about how to apply control theory to the management of complex computer systems, which led in all kinds of interesting directions (few of which I ended up actually working on when I got to Harvard). But at least I had plenty to talk about in terms of possible research directions.<br /><br />You should also take the opportunity to learn as much as you can about the interviewer. After all, this is <b>not a one-sided process:</b>&nbsp;you should be evaluating the quality of the department and its faculty as well.&nbsp;When prompted, most professors can easily launch into a twenty-minute lecture on their research, so if you find you don't have a lot to talk about with someone, try to get them to do this. You will learn a&nbsp;<i>lot</i>&nbsp;this way and may realize amazing opportunities for collaboration. For example, while interviewing at Harvard, I was really excited by <a href=\"http://www.eecs.harvard.edu/~parkes/\">David Parkes' research on multi-agent systems</a> -- and he and I ended up collaborating on a couple of projects once I started there.<br /><br />The easiest of these meetings are with faculty in your area, since generally you have some common ground. The hardest are with people in completely different research areas. It is a <b>very good idea to cyberstalk your interviewers</b>&nbsp;before the interview, by Googling their names and learning as much as you can about their research beforehand. You might discover that there is some mutual interest or acquaintance this way, which will give you something to talk about. If you don't know who will be on your loop, ask your host and they can usually send you the schedule in advance. It's impressive when a candidate comes in having done their homework, knowing a bit about the interviewer's research and background. This is not creepy (although if you get into how cute their kids' pictures are on Facebook, you've probably crossed a line).<br /><br />You will invariably meet with someone who was unable to make your job talk, so <b>be prepared to give a 5-to-10 minute rundown</b>&nbsp;on your research, a \"mini job talk\", if you will. You need to have a punchy, clear way to answer the question, \"So, what do <i>you</i>&nbsp;work on?\" My opening line was something like, \"I work on making web servers really fast, and able to stand up to massive overloads.\" This was enough to get a conversation going on the topic and was a problem statement that pretty much everyone could relate to. If instead I had launched into, \"I work on a hybrid event-driven-threaded server architecture combining rate-limited queues and feedback-controlled thread pools\", I would have immediately put about half of my would-be interviewers to sleep.<br /><br />There are, of course, some tactical questions you should try to get answered while you interview. The standard questions that candidates ask revolve around the teaching load, size and growth trajectory of the faculty, what new areas or initiatives the department might be starting up, what class sizes are like, whether there is a big Master's program, what the department's relationship is with the rest of the school, and of course <a href=\"http://matt-welsh.blogspot.com/2010/06/how-to-get-tenure-at-harvard.html\">what the tenure process is like</a>. The interview is <i>not</i>&nbsp;the time to ask questions about compensation or benefits: Save that for once you have an offer (which will be the subject of the next part in this series).<br /><br />You also want to learn as much as you can about living and working in whatever city the school is in. If you're thinking about buying a house or having kids, you need to understand about the real estate market, schools, good neighborhoods, commute, and so forth. If you care about eating and drinking out, you need to learn about the nightlife. If you ask <i>no questions</i>&nbsp;about the city or area, your interviewers will pick up on this and assume you're not that serious about moving there. You can also save these questions for a <b>second visit</b>&nbsp;after you have a job offer in hand, but it's probably a good idea to start learning about your potential new home.<br /><br /><b>The dinner:</b>&nbsp;Most departments will take faculty candidates out to a fancy dinner somewhere. This might sound like a real perk, but believe me, after 8+ hours of interviewing, it's usually the last thing you really want to do. A nice glass of wine (or three) might sound like the perfect antidote, but it's probably a <b>bad idea to drink</b>&nbsp;-- you are still being evaluated over dinner, and if you're like me, you can get really uninhibited with the combination of interview exhaustion and alcohol. Of course, for the faculty dining with you, they are planning on expensing the dinner and wine, so by all means encourage them to order whatever they like (and maybe indulge yourself half a glass to help take the edge off).<br /><br />The best interview dinners I had were with folks that I was friendly with and worked in my area. <a href=\"http://www.cs.rice.edu/~dwallach/\">Dan Wallach</a>&nbsp;at Rice recognized that I was probably getting sick of fancy restaurants and took me out to eat crawdads with my hands (and a big old plastic bib to protect my suit). The worst interview dinners I had were when several senior faculty used the time to gossip amongst themselves and completely ignored me. On that topic, <b>don't gossip</b>&nbsp;about other schools while you are interviewing. It's bad form, and an easy trap to fall into -- and keep in mind that everybody talks to everybody, so what you say at UCSB will get back to those folks at Duke, somehow (not that I would ever do such a thing).<br /><br /><b>After the interview:</b>&nbsp;When you get home, or back to your hotel, be sure to send a nice <b>thank-you note</b>&nbsp;to your host, expressing your interest and enthusiasm for the school and department (assuming, of course, that you are enthusiastic and interested). Don't assume the school knows you really had a good time and would love to work there. Hiring committees are always trying to read subtle signals from the candidates about how seriously they would entertain an offer from their department, so if you're not explicit, the hiring committee might mistakenly assume you wouldn't be that keen on a position there. If you're <b>not that interested</b>, well, don't go out of your way to say that you are, but you probably don't want to let the school know right away. Having several offers -- even from schools you're not serious about -- can be a good bargaining chip when it comes time to negotiate the offer with the school you do want to join.<br /><br />Finally, I strongly recommend <b>taking detailed notes</b>&nbsp;on your interviews, when you get back to the hotel each day. I found my notes to be invaluable when considering the several job offers I had, since my memories of a place started to fade after ten or so interviews. Writing out my observations and gut feelings about a school also helped crystallize the many tradeoffs in my mind.<br /><br />After this it's mostly a waiting game to see if you'll get an offer. This can take a matter of weeks, depending on when during the interview cycle your visit happens to fall, so be patient! If you do end up with a time-limited offer from another school, it's perfectly acceptable to contact other schools you have not heard back from yet to let them know you are still very interested but are operating under time pressure. Stay tuned for the next part of this series where I'll talk about the process of negotiating offers.<br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1171799036408860525/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html#comment-form") (title . "17 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171799036408860525"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171799036408860525"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html") (title . "How to get a faculty job, Part 2: The interview"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "17"))) ("How to get a faculty job, part 1b: How to get an interview" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Back in <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1 of this series on how to get a faculty job</a>, I said there would be three parts in total. Well, I lied. I realized it would also be helpful to shed light on the <b>process as seen by a faculty hiring committee</b>, so in this post I'll augment Part 1 with a little behind-the-scenes of how hiring committees read and rank applications, and how interviews are granted. The \"real\" Part 2 will be about the interview itself, and Part 3 about negotiating the offer.<br /><br />I served on the hiring committee at Harvard back in 2008 when we hired three great new Computer Science faculty: <a href=\"http://www.eecs.harvard.edu/~kgajos/\">Krzysztof Gajos</a>, <a href=\"http://people.seas.harvard.edu/~chong/\">Steve Chong</a>, and <a href=\"http://yiling.seas.harvard.edu/\">Yiling Chen</a>. It was an exhausting, months-long search with a dozen or so interviews for multiple openings (it had been a few years since we had any faculty openings and we really opened up the floodgates). So I have a little sense of how the sausage is made.<br /><br />It's a complex process and utterly opaque for the poor applicant, who will usually not hear anything for many months after submitting the application. Most of the time, the response is a polite email from the hiring committee chair that because of the large number of highly qualified applicants for the position, they are very sorry that they will be unable to interview you.&nbsp;That is, if they ever contact you at all. Most schools don't bother even declining your application explicitly. You just never hear anything. (As for me, I'm still holding out hope that Stanford wants to interview me. It's only been 10 years since I sent my application, I guess it's still under consideration.)<br /><br />Sometimes, though, you get lucky and are actually granted an interview. The most direct approach is an email saying that they are very interested in your application and would like to see if there are some dates you would be able to come for an interview. However, in some cases, a school doesn't want to \"blow\" one of its precious interview slots (more on that below) on an applicant who is not serious about their school. This will happen for a rock star candidate who is going to get interviews at MIT and Berkeley and only applied to your school to be polite, or as a backup. It would be a waste of time to interview such a candidate unless the department really feels it has a shot at landing this person. So, rather than directly offering an interview, the hiring committee might use side channels to find out if the applicant is serious about interviewing first -- for example, by getting in touch with the student's advisor and finding out more about what they're looking for in a school.<br /><br />It's important to keep in mind is that whenever there is a faculty opening at any halfway-decent academic department, they will usually get inundated with <b>hundreds or even thousands of applications</b> from all corners of the globe. I am not exaggerating. The vast majority of these applicants are from schools you've never heard of in random countries where English is not the official language, and these people will rarely if ever get interviews (at least at good schools in the US).<br /><br />The other thing is that most departments have only so much \"<b>interview bandwidth</b>.\" Interviewing more than, say, a dozen applicants for a single position is very difficult. An interview typically lasts one or two days, you only have so many slots during the week in which to schedule job talks, and the committee has to spend a lot of time processing and discussing each interview. If a school has multiple openings in a year, they might still only interview a dozen or so candidates in total.<br /><br />So, how do hiring committees decide who gets interviewed? There are about a million variables involved, but here are some of the most important:<br /><br /><b>Qualifications.</b>&nbsp;Obviously this is important, but who counts as \"qualified?\" Your <b>publication record</b>&nbsp;is probably the strongest indicator of your success. Publishing at least one major conference paper a year -- after your first year or so in grad school -- is par for the course. Two or three papers would be a good year for most applicants. These have to be in <b>good</b>&nbsp;venues: Top-ranked, highly-competitive conferences. Workshops don't count (OK, maybe a little, but a lot less than real conferences). Journals don't count either. (This varies by field. In Computer Science, journals don't matter very much. But an article in <i>Science</i>&nbsp;or <i>Nature</i>&nbsp;will get you interviewed just about anywhere.)<br /><br />Also, being <b>first author</b>&nbsp;on these papers is really important. Second author says, OK, maybe this student wasn't the most senior one on this piece of work, but they probably still contributed a lot. Third author on down conveys that you were not that involved and therefore get fewer points for the publication.<br /><br />So you should expect to have something like <b>five or six major conference publications</b> -- ideally as first author -- on your CV, at minimum, to be taken seriously by most departments.&nbsp;Best paper awards are a big plus too, so list them on your CV whenever you get one. It is not uncommon these days to see applicants with ten or more top papers. I think this is a little insane. If you do a postdoc, though, you're expected to publish a good chunk of papers during that time, at minimum two a year -- the bar is higher for postdocs.<br /><br />Your <b>academic credentials</b>&nbsp;matter a lot too. Your undergrad institution is not that much of a factor. I know plenty of famous faculty at top-10 schools who went to seemingly random undergrad institutions: <a href=\"http://www.eecs.harvard.edu/~greg/\">Greg Morrisett</a>, for example, apparently graduated from some place called the University of Richmond, which I'm sure is a very good school but is hardly a household name. What matters much more is <b>where you went to grad school</b>&nbsp;and (if you are doing a postdoc) <b>where you postdoc</b>. There is a reason that so many of the faculty at top-20 CS departments graduated from the likes of MIT, Berkeley, CMU, and Stanford -- graduates of these schools are highly sought after by CS departments and they tend to churn out enough graduates to fill the ranks of the top departments. So if you're coming from anything other than a top-20 school yourself, your chances of landing an interview at a higher-ranked institution are slim to none. (I know a bunch of people will argue with me here, and point out exceptions to the rule, but let's be honest. There is a strong preference for graduates of top-ranked departments when trying to pick 10 or so candidates to interview out of a pool of hundreds.)<br /><br />The same goes if you're doing a <b>postdoc</b>. Actually, a postdoc can be a great way to increase your station in life if you didn't graduate from a name-brand department but still want a decent faculty job. Postdocing at MIT is almost (but not quite) as good as graduating from there.<br /><br />The good news is that <b>none of this shit matters</b>&nbsp;if you do get an interview: No sane hiring committee is going to go back to your résumé and say, \"Well, I really loved her interview, but she graduated from a lower ranked school than the other guy, so let's hire him instead.\" All of this is just about getting the interview. After that you're on your own.<br /><br /><b>Being a woman or a minority helps too</b>. Hiring committees spend a lot of time trying to find anyone other than white men to interview, and most departments would love for their next hire to help increase the diversity of their faculty. This is a good thing, and is becoming more important as the diversity of the student population grows as well. If you happen to be one of these \"underrepresented\" candidates, more power to you -- given how competitive the academic job market is, you need every advantage you can get. (But see above about how this doesn't matter once you get the interview. That applies here too.)<br /><br /><b>Research area fit</b>. This is a <i>really</i>&nbsp;complicated, multivariate function, in which the department attempts to discern, based on your CV, research statement, teaching statement, and letters, how well you would \"mesh\" into the department, whether you do the \"kind of research\" they are looking for, whether you can teach the classes that require coverage, and if you are likely to find collaborators in the department. It sounds like a lot to worry about, but the answer for you, as an applicant, is simple: <b>It's too late for you to do anything about this.</b>&nbsp;If you're a sixth-year PhD student applying for faculty jobs, it's too late to \"rebrand\" yourself to try to optimize for some complex, black-box process that is going on within each of the departments you're applying to. The time to figure out what research problems are going to look sexy on a job application is when you're a first or second year grad student, but, by the time you graduate those problems are just as likely not to be sexy anymore -- so instead, just do the research you love and hope you find a department that is looking for someone like you.<br /><br />Sometimes you don't get an interview due to factors <b>totally beyond your control</b>. For example, I didn't get interviewed by a couple of departments because they had just recently (in the last year or so) hired graduates of my same research group at Berkeley. That poisoned the well for me -- there was no way I could pretend to not be doing research in the same area under the same set of professors. (There are still times I shake my fist at the night sky and scream \"<a href=\"http://www.eecs.berkeley.edu/Faculty/Homepages/fox.html\">Armandooooooooooooo!</a>\")<br /><br />Finally, your <b>recommendation letters are key</b>. I could write an entire blog post about what a good faculty recommendation letter should say, but you as a job applicant have little control over what your letters will look like. The letters touch on many things: Your technical and intellectual capacity, your research taste, your teaching style, your personality, your chances at getting tenure down the road. As an applicant, what you can do is make sure you <b>talk to your letter writers</b>&nbsp;before they write the letter. This is for several reasons. First, you want to address any questions or concerns they have about you up front. For example, there might be some lingering questions about how much you contributed to some project a few years back, and talking about it openly with your references gives you a chance to clear up any confusion. Also, your reference needs to understand what you're looking for in a faculty job. Say you are applying to a mix of top-ranked research universities and a few smaller teaching schools. This can lead to confusion: What kind of job are you after? Do you want to mostly teach? Or are the teaching schools a safety net? You need to give your references a chance to ask these questions directly rather than infer the wrong thing and write a blind letter.<br /><br /><b>What's the process like for the hiring committee?</b>&nbsp;Usually, the committee will meet several times, go through the applicants, rank them in various ways, and try to reach consensus on whom to invite for interviews. This can take a month or more. At first, a couple of interviews might be given out to the clear front-runner candidates that they really want to snag early (since good candidates' interview schedules fill up too). Then a few more weeks of deliberation happens while the rest of the interviews are sorted out. Keep this in mind: If you haven't heard from a school, but know they have started scheduling interviews (say, by looking at their online events calendar where it's usually pretty obvious who's giving a job talk), that <b>may not mean that all of the interviews have been decided yet:</b>&nbsp;it's usually a rolling process. Generally the first interviews start to get scheduled around February, but March and April is when things really get going.<br /><br /><a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html\">In the next part I'll talk about how to nail the interview.</a></div>" "http://matt-welsh.blogspot.com/feeds/3613082285627215416/comments/default" (20700 53574) old 17 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3613082285627215416") (published nil "2012-12-19T22:16:00.005-08:00") (updated nil "2012-12-27T14:52:54.599-08:00") (title ((type . "text")) "How to get a faculty job, part 1b: How to get an interview") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Back in <a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html\">Part 1 of this series on how to get a faculty job</a>, I said there would be three parts in total. Well, I lied. I realized it would also be helpful to shed light on the <b>process as seen by a faculty hiring committee</b>, so in this post I'll augment Part 1 with a little behind-the-scenes of how hiring committees read and rank applications, and how interviews are granted. The \"real\" Part 2 will be about the interview itself, and Part 3 about negotiating the offer.<br /><br />I served on the hiring committee at Harvard back in 2008 when we hired three great new Computer Science faculty: <a href=\"http://www.eecs.harvard.edu/~kgajos/\">Krzysztof Gajos</a>, <a href=\"http://people.seas.harvard.edu/~chong/\">Steve Chong</a>, and <a href=\"http://yiling.seas.harvard.edu/\">Yiling Chen</a>. It was an exhausting, months-long search with a dozen or so interviews for multiple openings (it had been a few years since we had any faculty openings and we really opened up the floodgates). So I have a little sense of how the sausage is made.<br /><br />It's a complex process and utterly opaque for the poor applicant, who will usually not hear anything for many months after submitting the application. Most of the time, the response is a polite email from the hiring committee chair that because of the large number of highly qualified applicants for the position, they are very sorry that they will be unable to interview you.&nbsp;That is, if they ever contact you at all. Most schools don't bother even declining your application explicitly. You just never hear anything. (As for me, I'm still holding out hope that Stanford wants to interview me. It's only been 10 years since I sent my application, I guess it's still under consideration.)<br /><br />Sometimes, though, you get lucky and are actually granted an interview. The most direct approach is an email saying that they are very interested in your application and would like to see if there are some dates you would be able to come for an interview. However, in some cases, a school doesn't want to \"blow\" one of its precious interview slots (more on that below) on an applicant who is not serious about their school. This will happen for a rock star candidate who is going to get interviews at MIT and Berkeley and only applied to your school to be polite, or as a backup. It would be a waste of time to interview such a candidate unless the department really feels it has a shot at landing this person. So, rather than directly offering an interview, the hiring committee might use side channels to find out if the applicant is serious about interviewing first -- for example, by getting in touch with the student's advisor and finding out more about what they're looking for in a school.<br /><br />It's important to keep in mind is that whenever there is a faculty opening at any halfway-decent academic department, they will usually get inundated with <b>hundreds or even thousands of applications</b> from all corners of the globe. I am not exaggerating. The vast majority of these applicants are from schools you've never heard of in random countries where English is not the official language, and these people will rarely if ever get interviews (at least at good schools in the US).<br /><br />The other thing is that most departments have only so much \"<b>interview bandwidth</b>.\" Interviewing more than, say, a dozen applicants for a single position is very difficult. An interview typically lasts one or two days, you only have so many slots during the week in which to schedule job talks, and the committee has to spend a lot of time processing and discussing each interview. If a school has multiple openings in a year, they might still only interview a dozen or so candidates in total.<br /><br />So, how do hiring committees decide who gets interviewed? There are about a million variables involved, but here are some of the most important:<br /><br /><b>Qualifications.</b>&nbsp;Obviously this is important, but who counts as \"qualified?\" Your <b>publication record</b>&nbsp;is probably the strongest indicator of your success. Publishing at least one major conference paper a year -- after your first year or so in grad school -- is par for the course. Two or three papers would be a good year for most applicants. These have to be in <b>good</b>&nbsp;venues: Top-ranked, highly-competitive conferences. Workshops don't count (OK, maybe a little, but a lot less than real conferences). Journals don't count either. (This varies by field. In Computer Science, journals don't matter very much. But an article in <i>Science</i>&nbsp;or <i>Nature</i>&nbsp;will get you interviewed just about anywhere.)<br /><br />Also, being <b>first author</b>&nbsp;on these papers is really important. Second author says, OK, maybe this student wasn't the most senior one on this piece of work, but they probably still contributed a lot. Third author on down conveys that you were not that involved and therefore get fewer points for the publication.<br /><br />So you should expect to have something like <b>five or six major conference publications</b> -- ideally as first author -- on your CV, at minimum, to be taken seriously by most departments.&nbsp;Best paper awards are a big plus too, so list them on your CV whenever you get one. It is not uncommon these days to see applicants with ten or more top papers. I think this is a little insane. If you do a postdoc, though, you're expected to publish a good chunk of papers during that time, at minimum two a year -- the bar is higher for postdocs.<br /><br />Your <b>academic credentials</b>&nbsp;matter a lot too. Your undergrad institution is not that much of a factor. I know plenty of famous faculty at top-10 schools who went to seemingly random undergrad institutions: <a href=\"http://www.eecs.harvard.edu/~greg/\">Greg Morrisett</a>, for example, apparently graduated from some place called the University of Richmond, which I'm sure is a very good school but is hardly a household name. What matters much more is <b>where you went to grad school</b>&nbsp;and (if you are doing a postdoc) <b>where you postdoc</b>. There is a reason that so many of the faculty at top-20 CS departments graduated from the likes of MIT, Berkeley, CMU, and Stanford -- graduates of these schools are highly sought after by CS departments and they tend to churn out enough graduates to fill the ranks of the top departments. So if you're coming from anything other than a top-20 school yourself, your chances of landing an interview at a higher-ranked institution are slim to none. (I know a bunch of people will argue with me here, and point out exceptions to the rule, but let's be honest. There is a strong preference for graduates of top-ranked departments when trying to pick 10 or so candidates to interview out of a pool of hundreds.)<br /><br />The same goes if you're doing a <b>postdoc</b>. Actually, a postdoc can be a great way to increase your station in life if you didn't graduate from a name-brand department but still want a decent faculty job. Postdocing at MIT is almost (but not quite) as good as graduating from there.<br /><br />The good news is that <b>none of this shit matters</b>&nbsp;if you do get an interview: No sane hiring committee is going to go back to your résumé and say, \"Well, I really loved her interview, but she graduated from a lower ranked school than the other guy, so let's hire him instead.\" All of this is just about getting the interview. After that you're on your own.<br /><br /><b>Being a woman or a minority helps too</b>. Hiring committees spend a lot of time trying to find anyone other than white men to interview, and most departments would love for their next hire to help increase the diversity of their faculty. This is a good thing, and is becoming more important as the diversity of the student population grows as well. If you happen to be one of these \"underrepresented\" candidates, more power to you -- given how competitive the academic job market is, you need every advantage you can get. (But see above about how this doesn't matter once you get the interview. That applies here too.)<br /><br /><b>Research area fit</b>. This is a <i>really</i>&nbsp;complicated, multivariate function, in which the department attempts to discern, based on your CV, research statement, teaching statement, and letters, how well you would \"mesh\" into the department, whether you do the \"kind of research\" they are looking for, whether you can teach the classes that require coverage, and if you are likely to find collaborators in the department. It sounds like a lot to worry about, but the answer for you, as an applicant, is simple: <b>It's too late for you to do anything about this.</b>&nbsp;If you're a sixth-year PhD student applying for faculty jobs, it's too late to \"rebrand\" yourself to try to optimize for some complex, black-box process that is going on within each of the departments you're applying to. The time to figure out what research problems are going to look sexy on a job application is when you're a first or second year grad student, but, by the time you graduate those problems are just as likely not to be sexy anymore -- so instead, just do the research you love and hope you find a department that is looking for someone like you.<br /><br />Sometimes you don't get an interview due to factors <b>totally beyond your control</b>. For example, I didn't get interviewed by a couple of departments because they had just recently (in the last year or so) hired graduates of my same research group at Berkeley. That poisoned the well for me -- there was no way I could pretend to not be doing research in the same area under the same set of professors. (There are still times I shake my fist at the night sky and scream \"<a href=\"http://www.eecs.berkeley.edu/Faculty/Homepages/fox.html\">Armandooooooooooooo!</a>\")<br /><br />Finally, your <b>recommendation letters are key</b>. I could write an entire blog post about what a good faculty recommendation letter should say, but you as a job applicant have little control over what your letters will look like. The letters touch on many things: Your technical and intellectual capacity, your research taste, your teaching style, your personality, your chances at getting tenure down the road. As an applicant, what you can do is make sure you <b>talk to your letter writers</b>&nbsp;before they write the letter. This is for several reasons. First, you want to address any questions or concerns they have about you up front. For example, there might be some lingering questions about how much you contributed to some project a few years back, and talking about it openly with your references gives you a chance to clear up any confusion. Also, your reference needs to understand what you're looking for in a faculty job. Say you are applying to a mix of top-ranked research universities and a few smaller teaching schools. This can lead to confusion: What kind of job are you after? Do you want to mostly teach? Or are the teaching schools a safety net? You need to give your references a chance to ask these questions directly rather than infer the wrong thing and write a blind letter.<br /><br /><b>What's the process like for the hiring committee?</b>&nbsp;Usually, the committee will meet several times, go through the applicants, rank them in various ways, and try to reach consensus on whom to invite for interviews. This can take a month or more. At first, a couple of interviews might be given out to the clear front-runner candidates that they really want to snag early (since good candidates' interview schedules fill up too). Then a few more weeks of deliberation happens while the rest of the interviews are sorted out. Keep this in mind: If you haven't heard from a school, but know they have started scheduling interviews (say, by looking at their online events calendar where it's usually pretty obvious who's giving a job talk), that <b>may not mean that all of the interviews have been decided yet:</b>&nbsp;it's usually a rolling process. Generally the first interviews start to get scheduled around February, but March and April is when things really get going.<br /><br /><a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-2-interview.html\">In the next part I'll talk about how to nail the interview.</a></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3613082285627215416/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html#comment-form") (title . "25 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3613082285627215416"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3613082285627215416"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html") (title . "How to get a faculty job, part 1b: How to get an interview"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "25"))) ("How to get a faculty job, Part 1: The application" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is going to be the first in a series of three blog posts on getting a faculty job in Computer Science. Part one is about applying for the job. Part two will be about doing interviews. And part three will be about negotiating the offer and making a decision.<br /><br />I did my faculty job search back in 2002 after finishing my PhD at UC Berkeley. Back then, academic Computer Science departments were hiring like crazy and the number of job openings far outstripped the number of highly-qualified applicants. I ended up with something like a dozen interviews, and also interviewed at IBM Research (both coasts), HP Labs, and a little search engine startup called Google. (I regret not having interviewed at Microsoft Research, but at the time I was dead-set on an academic position and had a hard time seeing myself working at MSR.) I got offers at all of the industry places and several of the universities; and ended up taking a faculty job at Harvard.<br /><br />The process of getting an academic job is tremendously painful and takes months of effort. Faculty job applications are usually due in December or January, interviews happen around March and April, and job offers made in April and May. Before summer break most job applicants will have their position sorted out and know where they will be heading in the fall.<br /><br />The job application itself usually consists of five components: Your CV, a cover letter, a research statement, a teaching statement, and letters of recommendation. I'll go through these in detail below.<br /><br />In case you're curious, I posted my original (2002) <a href=\"http://www.eecs.harvard.edu/~mdw/private/jobapp/\">faculty job application materials online here</a>.<br /><br />These days, most departments accept the job application online, either via a web form or email. When I applied, only about half of the departments accepted email and I had to send physical copies of my application to the other places.<br /><br />The first critical component of the job application is your <b>personal web page.</b>&nbsp;I am always amazed at how many faculty applicants fail to maintain an up-to-date web page with their publications, research interests, source code releases, and so forth. Never assume that hiring committees will have your \"official\" application materials at hand: These days it's much easier to Google someone's name and look at their projects and papers online. For that matter, <b>always post your job application materials prominently on your web page.</b>&nbsp;In case someone is reviewing a set of candidates and can't find your research statement, everything should be linked to your web page so people can find it easily.<br /><br />The <b>curriculum vitae</b> is probably the easiest part to get right. This should be a detailed summary of your research interests, publications, talks, service work, teaching credentials, and any other factoids that might be of interest to the hiring committee. Under no circumstances should it be a one-page \"resume\". My <a href=\"http://www.eecs.harvard.edu/~mdw/private/jobapp/cv-generic.pdf\">2002-era CV is here</a>&nbsp;as an example. Note how it provides a one-page summary of my research interests and a detailed breakdown of my job experience. The \"invited talks\" section is provided to give a sense of my experience giving keynotes and lectures at various conferences and universities.<br /><br />The <b>cover letter</b>&nbsp;is a point of great confusion. First off, it's not always obvious that it's needed, and even when you have a cover letter, not everyone knows what it should say. These days, the cover letter might take the form of the body of the email that you send when submitting your materials. In my experience, the cover letter is a \"school specific\" statement of why you are applying to this school <b>in particular</b>. It should call specific attention to any potential collaborators at the school you are applying to.<br /><br />For example, a good cover letter might say something like,<br /><blockquote class=\"tr_bq\">Dear Prof. Zuckerberg,</blockquote><blockquote class=\"tr_bq\">I am writing to apply for the position of Assistant Professor of Computer Science in your department. My research interests are in the area of computer systems and programming languages, and my thesis topic is \"Rooter: A Methodology for the Typical Unification of Access Points and Redundancy.\" My thesis advisor is Prof. David Culler.</blockquote><blockquote class=\"tr_bq\">I am excited by the opportunity to teach and do research at University of East Nunavut. My research interests are highly complementary to Profs. Jobs and Ballmer in your department, and I would be particularly interested in collaborating with the Center for Computational Phrenology.</blockquote><blockquote class=\"tr_bq\">Please find attached my CV, research and teaching statements, and list of references. I look forward to hearing from you.&nbsp;</blockquote>You get the idea. It need not be long but it's a good way to customize your application for the specific school, while keeping the rest of your application materials generic.<br /><br />The <b>research statement</b>&nbsp;is one of the hardest parts of the application to get right. It is intended to serve two purposes: To provide a narrative summary of your research contributions (and especially how they all tie together), and what areas you intend to work on in the future. It's usually about 3-4 pages long and needs to nail what your specific research \"angle\" is, why the area is important, what your track record is, and what your research vision is going forward. It is <b>not a personal essay</b>&nbsp;like you might have written applying to college or grad school -- If the expression \"when I was a child, computers always fascinated me\" appears anywhere in your research statement, you're doing it <i>very</i>&nbsp;wrong.<br /><br />Nobody is going to hold you to working on the specific things you say you want to do for future research directions, but you should <b>articulate a clear vision</b> of what kind of direction you would take when starting a faculty job. This is important. Hiring committees are not hiring you based only on your track record -- they are hiring you based on your potential to be a (potentially) life-long colleague. They want to see that you have an independent and compelling vision for at least the first few years of your faculty job. If the best you can come up with is a couple of papers' worth of extensions to your thesis, you're in trouble. Try to think of a three-to-five year agenda that would get people excited to have you part of the faculty.<br /><br />The <b>teaching statement</b>&nbsp;is like the research statement, but focuses on teaching. Most grad students have precious little teaching experience beyond a couple of semesters of TA work, so it's kind of hard to say much. Still, do your best. Keep in mind that teaching is a <b>huge</b>&nbsp;part of a faculty job and one of the most important criteria for extending an offer is whether you can teach well. If you have advised any undergraduate researchers or mentored junior grad students, include this in your teaching statement, as mentorship is important too. Finally, be clear on what kinds of courses you would be willing and able to teach. It's not always obvious based on your research background if you could take on, say, the OS or databases course -- make it explicit.<br /><br />As for <b>letters of recommendation</b>, you usually need three or four. Resist the urge to have more than four rec letters: More is not always better, in case anyone writes anything to give the hiring committee pause. In general it is best if all of your recommendation letters are from <b>well-known professors</b>. Obviously one should be from your thesis advisor. A letter from a top-flight researcher in an industry lab is fine, too, but you should have no more than one of these: It's commonly held that industry folks write fluffy letters and hiring committees care more about the opinion of dyed-in-the-wool academics. One piece of advise I got when applying for faculty jobs was to have one letter from someone <b>not at your home institution</b>, who could comment more broadly (and objectively) on the impact of your research. I was fortunate to get a letter from the great <a href=\"http://www.soic.indiana.edu/people/profiles/fox-geoffrey-charles.shtml\">Geoffrey Fox</a>, whom I had met a couple of times and my advisor suggested would be a good \"external\" letter writer for me. It was kind of strange asking &nbsp;a near-stranger for a letter like this, but he agreed and I guess it did the trick, since I got interviews pretty much everywhere I applied.<br /><br />Keep in mind that the job application only <b>gets you an interview</b>, it does not get you the job. The interview is far, far more important than the application materials. It's also important to understand that hiring committees at top schools get many, many hundreds of applications, from all over the world, for a single faculty job opening. So, make sure your packet stands out. A strong publication record is the main thing. Strong letters are second. The research and teaching statement matter much less, so don't stress over them too much. You can't make up for a weak publication record with a brilliant research statement.<br /><br />Finally, a note on <b>where to apply for jobs</b>. I often see students make the mistake of only applying to the top five or so universities, with the idea that they could only be happy at a place like MIT or Berkeley. This is a <b>huge mistake</b>. First of all, the probability that you're going to get a job at your \"top\" school is vanishingly small, considering the number of qualified applicants and scarcity of jobs. Second, you might find out (as I did) that schools that look great from a distance don't seem so hot when you're up close and interviewing there. This can cause you to seriously rethink your preferences for both what kind of school you want to be at, where you want to live, and where you see yourself building an academic career.<br /><br />The converse is also true: You might fall in love with a place you would have never considered seriously before. For example, I knew next to nothing about Harvard before I interviewed there, and never imagined I would end up there -- until I visited, and found that I loved the place and the people. So try to keep an open mind about where you might go. There are lots of great departments out there, lots of great places to live, and many, many factors that count towards your overall happiness and ability to be successful. Apply broadly, include a few \"safety schools\" in your application list, and then cull the list later if you end up with too many invitations to interview. Most people don't have this problem, so don't be too picky.<br /><br />Check out <b><a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b: How To Get an Interview</a>.</b><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/2441606469415189016/comments/default" (20690 44519) old 18 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-2441606469415189016") (published nil "2012-12-09T21:20:00.004-08:00") (updated nil "2012-12-19T22:19:19.564-08:00") (title ((type . "text")) "How to get a faculty job, Part 1: The application") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is going to be the first in a series of three blog posts on getting a faculty job in Computer Science. Part one is about applying for the job. Part two will be about doing interviews. And part three will be about negotiating the offer and making a decision.<br /><br />I did my faculty job search back in 2002 after finishing my PhD at UC Berkeley. Back then, academic Computer Science departments were hiring like crazy and the number of job openings far outstripped the number of highly-qualified applicants. I ended up with something like a dozen interviews, and also interviewed at IBM Research (both coasts), HP Labs, and a little search engine startup called Google. (I regret not having interviewed at Microsoft Research, but at the time I was dead-set on an academic position and had a hard time seeing myself working at MSR.) I got offers at all of the industry places and several of the universities; and ended up taking a faculty job at Harvard.<br /><br />The process of getting an academic job is tremendously painful and takes months of effort. Faculty job applications are usually due in December or January, interviews happen around March and April, and job offers made in April and May. Before summer break most job applicants will have their position sorted out and know where they will be heading in the fall.<br /><br />The job application itself usually consists of five components: Your CV, a cover letter, a research statement, a teaching statement, and letters of recommendation. I'll go through these in detail below.<br /><br />In case you're curious, I posted my original (2002) <a href=\"http://www.eecs.harvard.edu/~mdw/private/jobapp/\">faculty job application materials online here</a>.<br /><br />These days, most departments accept the job application online, either via a web form or email. When I applied, only about half of the departments accepted email and I had to send physical copies of my application to the other places.<br /><br />The first critical component of the job application is your <b>personal web page.</b>&nbsp;I am always amazed at how many faculty applicants fail to maintain an up-to-date web page with their publications, research interests, source code releases, and so forth. Never assume that hiring committees will have your \"official\" application materials at hand: These days it's much easier to Google someone's name and look at their projects and papers online. For that matter, <b>always post your job application materials prominently on your web page.</b>&nbsp;In case someone is reviewing a set of candidates and can't find your research statement, everything should be linked to your web page so people can find it easily.<br /><br />The <b>curriculum vitae</b> is probably the easiest part to get right. This should be a detailed summary of your research interests, publications, talks, service work, teaching credentials, and any other factoids that might be of interest to the hiring committee. Under no circumstances should it be a one-page \"resume\". My <a href=\"http://www.eecs.harvard.edu/~mdw/private/jobapp/cv-generic.pdf\">2002-era CV is here</a>&nbsp;as an example. Note how it provides a one-page summary of my research interests and a detailed breakdown of my job experience. The \"invited talks\" section is provided to give a sense of my experience giving keynotes and lectures at various conferences and universities.<br /><br />The <b>cover letter</b>&nbsp;is a point of great confusion. First off, it's not always obvious that it's needed, and even when you have a cover letter, not everyone knows what it should say. These days, the cover letter might take the form of the body of the email that you send when submitting your materials. In my experience, the cover letter is a \"school specific\" statement of why you are applying to this school <b>in particular</b>. It should call specific attention to any potential collaborators at the school you are applying to.<br /><br />For example, a good cover letter might say something like,<br /><blockquote class=\"tr_bq\">Dear Prof. Zuckerberg,</blockquote><blockquote class=\"tr_bq\">I am writing to apply for the position of Assistant Professor of Computer Science in your department. My research interests are in the area of computer systems and programming languages, and my thesis topic is \"Rooter: A Methodology for the Typical Unification of Access Points and Redundancy.\" My thesis advisor is Prof. David Culler.</blockquote><blockquote class=\"tr_bq\">I am excited by the opportunity to teach and do research at University of East Nunavut. My research interests are highly complementary to Profs. Jobs and Ballmer in your department, and I would be particularly interested in collaborating with the Center for Computational Phrenology.</blockquote><blockquote class=\"tr_bq\">Please find attached my CV, research and teaching statements, and list of references. I look forward to hearing from you.&nbsp;</blockquote>You get the idea. It need not be long but it's a good way to customize your application for the specific school, while keeping the rest of your application materials generic.<br /><br />The <b>research statement</b>&nbsp;is one of the hardest parts of the application to get right. It is intended to serve two purposes: To provide a narrative summary of your research contributions (and especially how they all tie together), and what areas you intend to work on in the future. It's usually about 3-4 pages long and needs to nail what your specific research \"angle\" is, why the area is important, what your track record is, and what your research vision is going forward. It is <b>not a personal essay</b>&nbsp;like you might have written applying to college or grad school -- If the expression \"when I was a child, computers always fascinated me\" appears anywhere in your research statement, you're doing it <i>very</i>&nbsp;wrong.<br /><br />Nobody is going to hold you to working on the specific things you say you want to do for future research directions, but you should <b>articulate a clear vision</b> of what kind of direction you would take when starting a faculty job. This is important. Hiring committees are not hiring you based only on your track record -- they are hiring you based on your potential to be a (potentially) life-long colleague. They want to see that you have an independent and compelling vision for at least the first few years of your faculty job. If the best you can come up with is a couple of papers' worth of extensions to your thesis, you're in trouble. Try to think of a three-to-five year agenda that would get people excited to have you part of the faculty.<br /><br />The <b>teaching statement</b>&nbsp;is like the research statement, but focuses on teaching. Most grad students have precious little teaching experience beyond a couple of semesters of TA work, so it's kind of hard to say much. Still, do your best. Keep in mind that teaching is a <b>huge</b>&nbsp;part of a faculty job and one of the most important criteria for extending an offer is whether you can teach well. If you have advised any undergraduate researchers or mentored junior grad students, include this in your teaching statement, as mentorship is important too. Finally, be clear on what kinds of courses you would be willing and able to teach. It's not always obvious based on your research background if you could take on, say, the OS or databases course -- make it explicit.<br /><br />As for <b>letters of recommendation</b>, you usually need three or four. Resist the urge to have more than four rec letters: More is not always better, in case anyone writes anything to give the hiring committee pause. In general it is best if all of your recommendation letters are from <b>well-known professors</b>. Obviously one should be from your thesis advisor. A letter from a top-flight researcher in an industry lab is fine, too, but you should have no more than one of these: It's commonly held that industry folks write fluffy letters and hiring committees care more about the opinion of dyed-in-the-wool academics. One piece of advise I got when applying for faculty jobs was to have one letter from someone <b>not at your home institution</b>, who could comment more broadly (and objectively) on the impact of your research. I was fortunate to get a letter from the great <a href=\"http://www.soic.indiana.edu/people/profiles/fox-geoffrey-charles.shtml\">Geoffrey Fox</a>, whom I had met a couple of times and my advisor suggested would be a good \"external\" letter writer for me. It was kind of strange asking &nbsp;a near-stranger for a letter like this, but he agreed and I guess it did the trick, since I got interviews pretty much everywhere I applied.<br /><br />Keep in mind that the job application only <b>gets you an interview</b>, it does not get you the job. The interview is far, far more important than the application materials. It's also important to understand that hiring committees at top schools get many, many hundreds of applications, from all over the world, for a single faculty job opening. So, make sure your packet stands out. A strong publication record is the main thing. Strong letters are second. The research and teaching statement matter much less, so don't stress over them too much. You can't make up for a weak publication record with a brilliant research statement.<br /><br />Finally, a note on <b>where to apply for jobs</b>. I often see students make the mistake of only applying to the top five or so universities, with the idea that they could only be happy at a place like MIT or Berkeley. This is a <b>huge mistake</b>. First of all, the probability that you're going to get a job at your \"top\" school is vanishingly small, considering the number of qualified applicants and scarcity of jobs. Second, you might find out (as I did) that schools that look great from a distance don't seem so hot when you're up close and interviewing there. This can cause you to seriously rethink your preferences for both what kind of school you want to be at, where you want to live, and where you see yourself building an academic career.<br /><br />The converse is also true: You might fall in love with a place you would have never considered seriously before. For example, I knew next to nothing about Harvard before I interviewed there, and never imagined I would end up there -- until I visited, and found that I loved the place and the people. So try to keep an open mind about where you might go. There are lots of great departments out there, lots of great places to live, and many, many factors that count towards your overall happiness and ability to be successful. Apply broadly, include a few \"safety schools\" in your application list, and then cull the list later if you end up with too many invitations to interview. Most people don't have this problem, so don't be too picky.<br /><br />Check out <b><a href=\"http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1b-how-to.html\">Part 1b: How To Get an Interview</a>.</b><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/2441606469415189016/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html#comment-form") (title . "15 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/2441606469415189016"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/2441606469415189016"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/12/how-to-get-faculty-job-part-1.html") (title . "How to get a faculty job, Part 1: The application"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "15"))) ("Startup vs. Big Company: What's \"Freedom\"?" "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I was talking with a talented young PhD student today about his career ambitions, and the conversation turned to whether it would be better to do a startup after finishing school rather than joining a big company, like Google, to get some \"real world\" experience first. I asked him what was so appealing about doing a startup, and he said that it would mean having tremendous freedom to choose what to work on and how you pursue problems. That is true, in a sense, but I question how much \"freedom\" you really have when starting a new company. Doing a startup is also highly constraining, there are real advantages to being at a larger company where you have more resources and a broader set of problems you can work on.<br /><br />(Caveat emptor: Note that the last time I tried to <a href=\"http://matt-welsh.blogspot.com/2009/02/how-i-almost-killed-facebook.html\">talk someone out of doing a startup</a>, it was Mark Zuckerberg, and we all know how that turned out -- so perhaps this post should be taken with a grain of salt.)<br /><br />It seems to me that many startups these days are working on low-hanging-fruit problems: Things that a few guys in a garage can put together with EC2, Ruby on Rails, and XCode. Yes, you can build amazing products this way, but you're not necessarily doing rocket science. There are limits to what one can build with a small team and limited resources, and this means that most startups are constrained in the set of problems they can reasonably tackle.<br /><br />Also, startups tend to focus on problems that one can build a standalone business around, something that can be monetized or build value in some direct way, in order to make investors happy. For example, it would be difficult to do a startup around a new programming language, since it's not clear how you sell it, although it might form a component of a larger product.<br /><br />My point is that not all interesting problems are good startup fodder. This is where larger companies come in. One of the reasons I personally like working at Google is because I can work on problems at a scale that most startups would never achieve. Running jobs on terabytes of data on many thousands of cores is routine. For me, this is where the really interesting problems lie: Not in designing another sepia-tone photo filter app, but in solving fundamental problems of computer science that only emerge at the scale and complexity that I can work on here.<br /><br />Being at a larger company means I am \"free\" to work on unsexy problems -- problems a venture capitalist wouldn't touch with a ten foot pole. Network protocol optimization, performance measurement, and infrastructure building may not be everyone's idea of fun,&nbsp;but I really enjoy doing this kind of core systems work that can have huge impact over the long run.<br /><br />This is not to say that all problems at Google are unsexy. I just tend to gravitate towards infrastructure and networking since that's my background. And damned if I can program JavaScript.<br /><br />The other side of being at a large company is that you have the freedom to fail. Money is not about to run out in a few weeks, and you don't have to make deals you wish you hadn't in order to keep the cash flowing. You can take your time to try different things, get it wrong, and make big bets that don't pan out. It's unlikely you'll lose your job for doing so, and there are always more cool problems to tackle just around the corner.<br /><br />On the flip side, doing a startup while you are young and untethered might be exactly the right career move. In some ways I wish I had not sat out the dot-com boom doing a PhD, but taken a risk to join PurpleYogi or one of the other dozen or so startups (including Google) that tried to recruit me back when I was 22, unmarried, childless, and already used to living in a small apartment and eating ramen noodles for dinner. Who knows, maybe I would have learned JavaScript after all.<br /><br /><br /><br /><br /><br /><br /><br /></div>" "http://matt-welsh.blogspot.com/feeds/7927533933618986179/comments/default" (20641 55542) old 19 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7927533933618986179") (published nil "2012-11-12T21:21:00.001-08:00") (updated nil "2012-11-12T21:21:58.562-08:00") (title ((type . "text")) "Startup vs. Big Company: What's \"Freedom\"?") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I was talking with a talented young PhD student today about his career ambitions, and the conversation turned to whether it would be better to do a startup after finishing school rather than joining a big company, like Google, to get some \"real world\" experience first. I asked him what was so appealing about doing a startup, and he said that it would mean having tremendous freedom to choose what to work on and how you pursue problems. That is true, in a sense, but I question how much \"freedom\" you really have when starting a new company. Doing a startup is also highly constraining, there are real advantages to being at a larger company where you have more resources and a broader set of problems you can work on.<br /><br />(Caveat emptor: Note that the last time I tried to <a href=\"http://matt-welsh.blogspot.com/2009/02/how-i-almost-killed-facebook.html\">talk someone out of doing a startup</a>, it was Mark Zuckerberg, and we all know how that turned out -- so perhaps this post should be taken with a grain of salt.)<br /><br />It seems to me that many startups these days are working on low-hanging-fruit problems: Things that a few guys in a garage can put together with EC2, Ruby on Rails, and XCode. Yes, you can build amazing products this way, but you're not necessarily doing rocket science. There are limits to what one can build with a small team and limited resources, and this means that most startups are constrained in the set of problems they can reasonably tackle.<br /><br />Also, startups tend to focus on problems that one can build a standalone business around, something that can be monetized or build value in some direct way, in order to make investors happy. For example, it would be difficult to do a startup around a new programming language, since it's not clear how you sell it, although it might form a component of a larger product.<br /><br />My point is that not all interesting problems are good startup fodder. This is where larger companies come in. One of the reasons I personally like working at Google is because I can work on problems at a scale that most startups would never achieve. Running jobs on terabytes of data on many thousands of cores is routine. For me, this is where the really interesting problems lie: Not in designing another sepia-tone photo filter app, but in solving fundamental problems of computer science that only emerge at the scale and complexity that I can work on here.<br /><br />Being at a larger company means I am \"free\" to work on unsexy problems -- problems a venture capitalist wouldn't touch with a ten foot pole. Network protocol optimization, performance measurement, and infrastructure building may not be everyone's idea of fun,&nbsp;but I really enjoy doing this kind of core systems work that can have huge impact over the long run.<br /><br />This is not to say that all problems at Google are unsexy. I just tend to gravitate towards infrastructure and networking since that's my background. And damned if I can program JavaScript.<br /><br />The other side of being at a large company is that you have the freedom to fail. Money is not about to run out in a few weeks, and you don't have to make deals you wish you hadn't in order to keep the cash flowing. You can take your time to try different things, get it wrong, and make big bets that don't pan out. It's unlikely you'll lose your job for doing so, and there are always more cool problems to tackle just around the corner.<br /><br />On the flip side, doing a startup while you are young and untethered might be exactly the right career move. In some ways I wish I had not sat out the dot-com boom doing a PhD, but taken a risk to join PurpleYogi or one of the other dozen or so startups (including Google) that tried to recruit me back when I was 22, unmarried, childless, and already used to living in a small apartment and eating ramen noodles for dinner. Who knows, maybe I would have learned JavaScript after all.<br /><br /><br /><br /><br /><br /><br /><br /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7927533933618986179/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/11/startup-vs-big-company-whats-freedom.html#comment-form") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7927533933618986179"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7927533933618986179"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/11/startup-vs-big-company-whats-freedom.html") (title . "Startup vs. Big Company: What's \"Freedom\"?"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "14"))) ("NCSSM and how it saved my life" "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s1600/ncssm-1.jpeg\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"220\" src=\"http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s320/ncssm-1.jpeg\" width=\"320\" /></a></div>I just got back from my 20th high school reunion and was reflecting on how much impact my high school had on my life and my career. You see, I was lucky enough to go to the <a href=\"http://www.ncssm.edu/\">North Carolina School of Science and Math</a>, also known as NCSSM, or as we lovingly called it back then, \"S&amp;M\". NCSSM is a public high school in Durham -- not far from Duke -- for juniors and seniors. Around 680 students live on campus, in dorms -- a lot like college, but with curfews, and students aren't allowed to have cars. To get in, you take the SAT and some other tests in 10th grade, and if you're accepted, it's completely free of charge -- no tuition, no housing fees, even the food is paid for. (The food was not, by the way, one of the highlights of the place.)<br /><br />NCSSM is an utterly amazing place. Everyone I know who has been there has had their lives deeply touched by the experience. Although it has a well-deserved reputation as a school for, well, nerds, it is also full of some of the most interesting and creative people I have ever met. Twenty years later, it is amazing to see what my classmates are doing today: Doing <a href=\"http://www.dzignlight.com/\">high-end CGI for Hollywood movies</a>; numerous professors and research scientists in areas as diverse as <a href=\"http://web.ics.purdue.edu/~daldrich/\">political science</a>, <a href=\"http://www.uni-muenster.de/Planetology/en/people/carolyn_van_der_bogert/cv.html\">planetology</a>,&nbsp;<a href=\"http://nicoleradziwill.com/\">integrated science and technology</a>, and <a href=\"http://www.smu.edu/Dedman/Academics/Departments/Sociology/~/link.aspx?_id=BB5B23D111C941B4BAFB413722B2FBEF&amp;_z=z\">sociology</a>; working for the Department of Health and Human Services while doing <a href=\"http://www.varietyisthespice.com/\">regular club and radio DJ gigs</a>; even serving as an <a href=\"http://twitter.com/revjoehensley\">Episcopalian minister</a>. Many of my classmates are not doing \"science\" or \"math\" in the conventional sense.<br /><br />Prior to NCSSM, I lived in a small town called Wilson, about an hour east of Raleigh. (If you're from North Carolina, the correct pronunciation is \"WILT-sun\".) It would be understatement to say that I did not fit in in Wilson, which is surrounded by a rural tobacco-growing community. There were not a lot of people there like me, and my horizons were severely limited. The main pastime of high-school kids in Wilson those days was driving in circles around the mall parking lot. There were a few great teachers in the schools, but I really needed more than Wilson had to offer.<br /><br />Coming to NCSSM I found a community of people&nbsp;<i>like me</i>&nbsp;-- a school full of outcasts, geeks, free spirits, lost souls. Not everyone was socially maladjusted, of course, but there were plenty of people there all pushing the boundaries of their humble (often rural and low-middle income) backgrounds.&nbsp;The faculty at NCSSM were (and still are) stellar. I could take Russian, quantum physics, photography, t'ai chi. It was like opening a vista on vast opportunities that I had scant awareness of when I was in Wilson, and I mean it seriously when I say that NCSSM saved my life: there's no way I'd be where I am today without that experience.<br /><br />For one thing, my exposure to computing was greatly expanded at NCSSM. Along with some other students, I ran the school's <a href=\"http://en.wikipedia.org/wiki/VAX-11/780\">VAX minicomputer</a> which powered the school's \"intranet\" (although it was really a bunch of VT-100 terminals scattered around campus, tied to the single computer). The students and faculty all had primitive email and chat accounts on the VAX -- this was the days before the Internet was widespread. We also had an <a href=\"http://en.wikipedia.org/wiki/IBM_6150_RT\">IBM RT</a>, a high end (at the time) UNIX workstation with 3D (!!) graphics support. A few of us managed to get this machine on the Internet, over a slow ISDN connection, so we could use FTP and email, and the IBM RT was my first UNIX \"root\" account. At one point, I dusted off an old, unused <a href=\"http://en.wikipedia.org/wiki/Data_General_Eclipse\">Data General mainframe</a> sitting in the corner, figured out how to boot it <i>from tape</i>, and set up a series of terminals in the adjacent computer lab, giving any student who asked for it an account, with the provisio that they have no password -- <a href=\"http://www.bostonmagazine.com/articles/2008/04/the-shaggy-god/\">a tribute to RMS' similar practice</a> at the MIT AI Lab. I got to do an internship at nearby Data General, and a volunteer from NC State taught a C programming class after hours. It was incredible.<br /><br />Outside of conventional academics, NCSSM has tremendous resources for exploring music and the arts. It&nbsp;has the most unbelievable art studio, where we would spend countless hours: in the darkroom, screen printing, making stained glass, paintings, sculptures, ceramics. My major creative outlet there was the electronic music studio. Back then it was a somewhat modest affair: A couple of synthesizers, a drum machine, 8-track reel-to-reel, effects units, MIDI sequencer -- more than enough for me to produce and record two full-length albums (and no, I will not be posting MP3s). I spent hours in that studio every weekend, all thanks to the dear late <a href=\"http://ncssmstrings.blogspot.com/2011/02/honoring-good-man.html\">Ray Church</a>, the music teacher who let me and others run roughshod over \"his\" gear. The best aspect of this was that the studios were open all the time, and the students were trusted, and encouraged, to make it their own space and use the resources to explore their own projects.<br /><br />It's important to keep in mind that NCSSM is a public school. It's paid for by the taxpayers of North Carolina, and can only exist because of a state legislature, and state university system, that recognizes the importance of having a high school like this.&nbsp;I can't imagine what my life would be like had I not had the opportunity to go there, and I know a lot of my classmates agree.<br /><br /><br />" "http://matt-welsh.blogspot.com/feeds/1171942405656750622/comments/default" (20600 37420) old 20 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-1171942405656750622") (published nil "2012-10-08T20:14:00.000-07:00") (updated nil "2012-10-12T14:57:00.742-07:00") (title ((type . "text")) "NCSSM and how it saved my life") (content ((type . "html")) "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s1600/ncssm-1.jpeg\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"220\" src=\"http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s320/ncssm-1.jpeg\" width=\"320\" /></a></div>I just got back from my 20th high school reunion and was reflecting on how much impact my high school had on my life and my career. You see, I was lucky enough to go to the <a href=\"http://www.ncssm.edu/\">North Carolina School of Science and Math</a>, also known as NCSSM, or as we lovingly called it back then, \"S&amp;M\". NCSSM is a public high school in Durham -- not far from Duke -- for juniors and seniors. Around 680 students live on campus, in dorms -- a lot like college, but with curfews, and students aren't allowed to have cars. To get in, you take the SAT and some other tests in 10th grade, and if you're accepted, it's completely free of charge -- no tuition, no housing fees, even the food is paid for. (The food was not, by the way, one of the highlights of the place.)<br /><br />NCSSM is an utterly amazing place. Everyone I know who has been there has had their lives deeply touched by the experience. Although it has a well-deserved reputation as a school for, well, nerds, it is also full of some of the most interesting and creative people I have ever met. Twenty years later, it is amazing to see what my classmates are doing today: Doing <a href=\"http://www.dzignlight.com/\">high-end CGI for Hollywood movies</a>; numerous professors and research scientists in areas as diverse as <a href=\"http://web.ics.purdue.edu/~daldrich/\">political science</a>, <a href=\"http://www.uni-muenster.de/Planetology/en/people/carolyn_van_der_bogert/cv.html\">planetology</a>,&nbsp;<a href=\"http://nicoleradziwill.com/\">integrated science and technology</a>, and <a href=\"http://www.smu.edu/Dedman/Academics/Departments/Sociology/~/link.aspx?_id=BB5B23D111C941B4BAFB413722B2FBEF&amp;_z=z\">sociology</a>; working for the Department of Health and Human Services while doing <a href=\"http://www.varietyisthespice.com/\">regular club and radio DJ gigs</a>; even serving as an <a href=\"http://twitter.com/revjoehensley\">Episcopalian minister</a>. Many of my classmates are not doing \"science\" or \"math\" in the conventional sense.<br /><br />Prior to NCSSM, I lived in a small town called Wilson, about an hour east of Raleigh. (If you're from North Carolina, the correct pronunciation is \"WILT-sun\".) It would be understatement to say that I did not fit in in Wilson, which is surrounded by a rural tobacco-growing community. There were not a lot of people there like me, and my horizons were severely limited. The main pastime of high-school kids in Wilson those days was driving in circles around the mall parking lot. There were a few great teachers in the schools, but I really needed more than Wilson had to offer.<br /><br />Coming to NCSSM I found a community of people&nbsp;<i>like me</i>&nbsp;-- a school full of outcasts, geeks, free spirits, lost souls. Not everyone was socially maladjusted, of course, but there were plenty of people there all pushing the boundaries of their humble (often rural and low-middle income) backgrounds.&nbsp;The faculty at NCSSM were (and still are) stellar. I could take Russian, quantum physics, photography, t'ai chi. It was like opening a vista on vast opportunities that I had scant awareness of when I was in Wilson, and I mean it seriously when I say that NCSSM saved my life: there's no way I'd be where I am today without that experience.<br /><br />For one thing, my exposure to computing was greatly expanded at NCSSM. Along with some other students, I ran the school's <a href=\"http://en.wikipedia.org/wiki/VAX-11/780\">VAX minicomputer</a> which powered the school's \"intranet\" (although it was really a bunch of VT-100 terminals scattered around campus, tied to the single computer). The students and faculty all had primitive email and chat accounts on the VAX -- this was the days before the Internet was widespread. We also had an <a href=\"http://en.wikipedia.org/wiki/IBM_6150_RT\">IBM RT</a>, a high end (at the time) UNIX workstation with 3D (!!) graphics support. A few of us managed to get this machine on the Internet, over a slow ISDN connection, so we could use FTP and email, and the IBM RT was my first UNIX \"root\" account. At one point, I dusted off an old, unused <a href=\"http://en.wikipedia.org/wiki/Data_General_Eclipse\">Data General mainframe</a> sitting in the corner, figured out how to boot it <i>from tape</i>, and set up a series of terminals in the adjacent computer lab, giving any student who asked for it an account, with the provisio that they have no password -- <a href=\"http://www.bostonmagazine.com/articles/2008/04/the-shaggy-god/\">a tribute to RMS' similar practice</a> at the MIT AI Lab. I got to do an internship at nearby Data General, and a volunteer from NC State taught a C programming class after hours. It was incredible.<br /><br />Outside of conventional academics, NCSSM has tremendous resources for exploring music and the arts. It&nbsp;has the most unbelievable art studio, where we would spend countless hours: in the darkroom, screen printing, making stained glass, paintings, sculptures, ceramics. My major creative outlet there was the electronic music studio. Back then it was a somewhat modest affair: A couple of synthesizers, a drum machine, 8-track reel-to-reel, effects units, MIDI sequencer -- more than enough for me to produce and record two full-length albums (and no, I will not be posting MP3s). I spent hours in that studio every weekend, all thanks to the dear late <a href=\"http://ncssmstrings.blogspot.com/2011/02/honoring-good-man.html\">Ray Church</a>, the music teacher who let me and others run roughshod over \"his\" gear. The best aspect of this was that the studios were open all the time, and the students were trusted, and encouraged, to make it their own space and use the resources to explore their own projects.<br /><br />It's important to keep in mind that NCSSM is a public school. It's paid for by the taxpayers of North Carolina, and can only exist because of a state legislature, and state university system, that recognizes the importance of having a high school like this.&nbsp;I can't imagine what my life would be like had I not had the opportunity to go there, and I know a lot of my classmates agree.<br /><br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/1171942405656750622/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/10/ncssm-and-how-it-saved-my-life.html#comment-form") (title . "45 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171942405656750622"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/1171942405656750622"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/10/ncssm-and-how-it-saved-my-life.html") (title . "NCSSM and how it saved my life"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://3.bp.blogspot.com/-idOOmawKehA/UHOSX0z2q5I/AAAAAAAAFw8/MDUUiVYpYZY/s72-c/ncssm-1.jpeg") (height . "72") (width . "72"))) (thr:total nil "45"))) ("In Defense of the Scientific Paper" "<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s1600/5428831_365342f43b_o.jpeg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"276\" src=\"http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s320/5428831_365342f43b_o.jpeg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">http://www.flickr.com/photos/openeye/5428831/</td></tr></tbody></table>Since leaving academia, I still find the time to serve on scientific program committees (recently NSDI, MobiSys, and SOCC) and have plenty of opportunity to read both good and bad scientific papers in various states of preparation. And although I am not required to publish papers in my current job, I certainly hope to do so -- a lot of the work we are doing at Google is imminently publishable -- it's just a matter of finding the time to sit down and write them!<br /><br />Although I've <a href=\"http://matt-welsh.blogspot.com/2011/09/do-we-need-to-reboot-cs-publications.html\">blogged about how the scientific publication process needs fixing</a>, I still feel that the process of <i><b>writing</b></i>&nbsp;a scientific paper is a hugely rewarding experience. Arguably, the primary value of scientific papers isn't in reading them, but writing them. You learn so much in the process.<br /><br />Writing a paper sharpens your mental focus like nothing else. Like Japanese <i>bonsai</i>&nbsp;art or building a ship in a bottle, paper writing forces you to obsess over every meticulous detail -- word choice, overall tone, readability of graphs -- and of course <a href=\"http://matt-welsh.blogspot.com/2010/01/paper-formatting-gestapo.html\">more mundane details</a> like font size and line spacing. This microscopic attention to every aspect of your work brings out a wonderful, if somewhat exhausting, intellectual rapture.&nbsp;<span style=\"background-color: white;\">I have never thought so clearly about a piece of research than when I'm in the throes of putting together a paper against a deadline.</span><br /><br /><span style=\"background-color: white;\">You start with nothing, a blank editor window and some LaTeX boilerplate, some half-baked ideas, a few axes to grind and a tremendous apprehension at how much your life is going to suck between now and the deadline. Y</span><span style=\"background-color: white;\">ou throw in all of the raw ingredients, the rough ideas, the broken implementation, the confusing data, the missing citations. Over a period of days or weeks you grind it and refine it and throw it out and start over and eventually hone the paper to a razor-sharp, articulate, polished fourteen pages of scientific beauty, and then just hope like hell that you didn't screw up the margins or forget to cite some important piece of related work.</span><br /><br />I used to think that writing a paper was something you did after the research was over, but now I realize you should sit down to write the paper <i>as early as possible</i>&nbsp;-- sometimes before even starting the \"research work\" itself. On a few occasions, it wasn't until I started writing a paper that I knew what the hell the research project was really about.&nbsp;<span style=\"background-color: white;\">Case in point: Our <a href=\"http://fiji.eecs.harvard.edu/node/182\">SenSys 2009 paper on the Mercury wearable sensor platform</a> came out of a project that had been running for nearly two years without a clear set of goals or any real insight into what the interesting research problems were. We had built a prototype and had some stuff working, but we didn't know what was publishable about it, and most of the problems we had to solve seemed mundane.</span><br /><span style=\"background-color: white;\"><br /></span><br /><span style=\"background-color: white;\">In a last-ditch measure to revive the project, I got the students together and said, fuck it, let's write a SenSys paper on this. As we started piecing together the story that we wanted to tell in the paper, we realized that none of our work to that point tackled the most important problem: how to ensure that the sensors produced good, and useful, data when there was a hard limit on battery lifetime. With the deadline just weeks away, the students pulled together and reimplemented the system from scratch and cranked out a ton of new measurements. The process of writing the paper resulted in a flood of new ideas, many of which bled over into my other projects, ultimately resulting in a half dozen papers and three PhD theses. It was awesome.</span><br /><span style=\"background-color: white;\"><br /></span><br />And even if a paper does not get accepted, crystallizing the ideas through the process of putting together the submission can be really energizing. I never assumed any paper I wrote would actually get accepted, so submitting the paper was often the start of a new line of work, riding on that clarity of thought that would emerge post-deadline (and a much-needed break of course)." "http://matt-welsh.blogspot.com/feeds/3449028800434101092/comments/default" (20475 48339) old 21 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3449028800434101092") (published nil "2012-07-09T22:21:00.001-07:00") (updated nil "2012-07-09T22:25:39.964-07:00") (title ((type . "text")) "In Defense of the Scientific Paper") (content ((type . "html")) "<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s1600/5428831_365342f43b_o.jpeg\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"276\" src=\"http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s320/5428831_365342f43b_o.jpeg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">http://www.flickr.com/photos/openeye/5428831/</td></tr></tbody></table>Since leaving academia, I still find the time to serve on scientific program committees (recently NSDI, MobiSys, and SOCC) and have plenty of opportunity to read both good and bad scientific papers in various states of preparation. And although I am not required to publish papers in my current job, I certainly hope to do so -- a lot of the work we are doing at Google is imminently publishable -- it's just a matter of finding the time to sit down and write them!<br /><br />Although I've <a href=\"http://matt-welsh.blogspot.com/2011/09/do-we-need-to-reboot-cs-publications.html\">blogged about how the scientific publication process needs fixing</a>, I still feel that the process of <i><b>writing</b></i>&nbsp;a scientific paper is a hugely rewarding experience. Arguably, the primary value of scientific papers isn't in reading them, but writing them. You learn so much in the process.<br /><br />Writing a paper sharpens your mental focus like nothing else. Like Japanese <i>bonsai</i>&nbsp;art or building a ship in a bottle, paper writing forces you to obsess over every meticulous detail -- word choice, overall tone, readability of graphs -- and of course <a href=\"http://matt-welsh.blogspot.com/2010/01/paper-formatting-gestapo.html\">more mundane details</a> like font size and line spacing. This microscopic attention to every aspect of your work brings out a wonderful, if somewhat exhausting, intellectual rapture.&nbsp;<span style=\"background-color: white;\">I have never thought so clearly about a piece of research than when I'm in the throes of putting together a paper against a deadline.</span><br /><br /><span style=\"background-color: white;\">You start with nothing, a blank editor window and some LaTeX boilerplate, some half-baked ideas, a few axes to grind and a tremendous apprehension at how much your life is going to suck between now and the deadline. Y</span><span style=\"background-color: white;\">ou throw in all of the raw ingredients, the rough ideas, the broken implementation, the confusing data, the missing citations. Over a period of days or weeks you grind it and refine it and throw it out and start over and eventually hone the paper to a razor-sharp, articulate, polished fourteen pages of scientific beauty, and then just hope like hell that you didn't screw up the margins or forget to cite some important piece of related work.</span><br /><br />I used to think that writing a paper was something you did after the research was over, but now I realize you should sit down to write the paper <i>as early as possible</i>&nbsp;-- sometimes before even starting the \"research work\" itself. On a few occasions, it wasn't until I started writing a paper that I knew what the hell the research project was really about.&nbsp;<span style=\"background-color: white;\">Case in point: Our <a href=\"http://fiji.eecs.harvard.edu/node/182\">SenSys 2009 paper on the Mercury wearable sensor platform</a> came out of a project that had been running for nearly two years without a clear set of goals or any real insight into what the interesting research problems were. We had built a prototype and had some stuff working, but we didn't know what was publishable about it, and most of the problems we had to solve seemed mundane.</span><br /><span style=\"background-color: white;\"><br /></span><br /><span style=\"background-color: white;\">In a last-ditch measure to revive the project, I got the students together and said, fuck it, let's write a SenSys paper on this. As we started piecing together the story that we wanted to tell in the paper, we realized that none of our work to that point tackled the most important problem: how to ensure that the sensors produced good, and useful, data when there was a hard limit on battery lifetime. With the deadline just weeks away, the students pulled together and reimplemented the system from scratch and cranked out a ton of new measurements. The process of writing the paper resulted in a flood of new ideas, many of which bled over into my other projects, ultimately resulting in a half dozen papers and three PhD theses. It was awesome.</span><br /><span style=\"background-color: white;\"><br /></span><br />And even if a paper does not get accepted, crystallizing the ideas through the process of putting together the submission can be really energizing. I never assumed any paper I wrote would actually get accepted, so submitting the paper was often the start of a new line of work, riding on that clarity of thought that would emerge post-deadline (and a much-needed break of course).") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3449028800434101092/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/07/in-defense-of-scientific-paper.html#comment-form") (title . "20 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3449028800434101092"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3449028800434101092"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/07/in-defense-of-scientific-paper.html") (title . "In Defense of the Scientific Paper"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/-3jdQJ7F0Uhg/T_u8rryzyHI/AAAAAAAADYs/5DLEhwbohkg/s72-c/5428831_365342f43b_o.jpeg") (height . "72") (width . "72"))) (thr:total nil "20"))) ("Google's Hybrid Approach to Research" "This month's <i><a href=\"http://cacm.acm.org/\">Communications of the ACM</a></i>&nbsp;features an article on <b><a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">Google's Hybrid Approach to Research</a></b>&nbsp;by Alfred Spector, Peter Norvig, and Slav Petrov. Since <a href=\"http://matt-welsh.blogspot.com/2011/01/does-google-do-research.html\">this is a topic I've blogged about here before</a>, I thought I'd provide a quick pointer to the article:<br /><br /><a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext</a><br /><br />Overall I think the article does a nice job of summarizing Google's approach. The key takeaway is that Google doesn't separate its research and engineering activities: most \"research\" at Google happens during the day-to-day work of building products.<br /><br />The benefit of this model is that it's easy to have real world impact, and&nbsp;the pace of innovation is fairly rapid, meaning research results get translated into products quickly. The possible downside is that you don't always get a chance to fork off &nbsp;long-term (multi-year) projects that will take a long time to translate into a product. However, there are exceptions to this rule -- things like <a href=\"https://plus.google.com/111626127367496192147\">Google Glass</a>, for example -- and plenty of things I can't talk about publicly. It is true that Google tends not to do \"pure academic\" research just for the purpose of publishing papers. We could have a healthy debate about whether this is good or bad, but I'll leave that for the comments...<br /><br />" "http://matt-welsh.blogspot.com/feeds/7129143338386044296/comments/default" (20456 62248) old 22 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-7129143338386044296") (published nil "2012-06-21T20:03:00.000-07:00") (updated nil "2012-06-25T16:24:24.936-07:00") (title ((type . "text")) "Google's Hybrid Approach to Research") (content ((type . "html")) "This month's <i><a href=\"http://cacm.acm.org/\">Communications of the ACM</a></i>&nbsp;features an article on <b><a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">Google's Hybrid Approach to Research</a></b>&nbsp;by Alfred Spector, Peter Norvig, and Slav Petrov. Since <a href=\"http://matt-welsh.blogspot.com/2011/01/does-google-do-research.html\">this is a topic I've blogged about here before</a>, I thought I'd provide a quick pointer to the article:<br /><br /><a href=\"http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext\">http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext</a><br /><br />Overall I think the article does a nice job of summarizing Google's approach. The key takeaway is that Google doesn't separate its research and engineering activities: most \"research\" at Google happens during the day-to-day work of building products.<br /><br />The benefit of this model is that it's easy to have real world impact, and&nbsp;the pace of innovation is fairly rapid, meaning research results get translated into products quickly. The possible downside is that you don't always get a chance to fork off &nbsp;long-term (multi-year) projects that will take a long time to translate into a product. However, there are exceptions to this rule -- things like <a href=\"https://plus.google.com/111626127367496192147\">Google Glass</a>, for example -- and plenty of things I can't talk about publicly. It is true that Google tends not to do \"pure academic\" research just for the purpose of publishing papers. We could have a healthy debate about whether this is good or bad, but I'll leave that for the comments...<br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/7129143338386044296/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/googles-hybrid-approach-to-research.html#comment-form") (title . "19 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7129143338386044296"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/7129143338386044296"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/googles-hybrid-approach-to-research.html") (title . "Google's Hybrid Approach to Research"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "19"))) ("Startup University" "<span style=\"background-color: white;\">The academic research process is incredibly inefficient when it comes to producing real products that shape the world. It can take decades for a good research idea to turn into a product - and of course most research never reaches this phase. However, I don't think it has to be that way: We could greatly accelerate the research-to-product pipeline if we could fix the academic value system and funding model.</span><br /><br />Here's the problem: Some of the smartest people in the world have spent their entire careers building throwaway prototypes. I sure never built anything real until I moved to Google, after nearly ten years of college and grad school, and seven years as a faculty member. And by \"real,\" I don't just mean a prototype that we developed for a couple of years and then threw away as soon as the papers got published. In effect, I \"wasted\" millions of dollars in funding, and countless man-years of development effort by my students and lab staff -- apart from a bunch of papers, nothing of practical value came out of my entire academic research career. (Maybe I'm being a little hard on myself, but let's take this as a given for sake of argument.) And I don't think my lack of real-world impact is at all unusual in a university setting.<br /><br />What would the world be like if all of this hard work had actually translated into real, shipping products that people could use? How could we change the structure of academic research to close the gap between playing in the sandbox and making things real?<br /><br />The plight of the academic is that there is often no direct way to translate ideas into reality -- you don't have the resources to do it at the university, and the academic process forces you to bounce between ideas every few years, rather than sticking it out to turn something into a product. In theory, academics are&nbsp;<i>supposed</i> to be patenting their ideas, and companies are <i>supposed</i> to come along and license the patents and turn them into real products. However, I am not aware of a single project from a computer science department that ever been commercialized through this route. This approach is more commonplace in fields like biotech, but in computer science it is rarely done.<br /><br />A far more common (and successful) approach is for academics to spin out their own startups. However, this involves a high degree of risk (potentially career-ending for pre-tenure faculty), and many universities do not structure their sabbatical and leave policies to make this easy to do. Most universities also make starting a company painfully difficult when it comes to questions of IP ownership, licensing, and forcing the academic's research to be dissociated with their commercial activities.&nbsp;<span style=\"background-color: white;\">As a result, you get a bunch of super smart academics who play it safe and stay within their tenured faculty jobs, subsisting on grants and rarely commercializing their work. This means that a lot of great ideas never get beyond the prototype phase.</span><br /><br />What I'd like to see is a university with a startup incubator attached to it, taking all of the best ideas and turning them into companies, with a large chunk of the money from successful companies feeding back into the university to fund the next round of great ideas. This could be a perpetual motion machine to drive research.&nbsp;<span style=\"background-color: white;\">Some universities have experimented with an incubator model, but I'm not aware of any cases where this resulted in a string of successful startups that funded the next round of research projects at that university.</span><br /><br />Typically, when a startup spins off, the university gets a tiny slice of the pie, and the venture capitalists -- who fill the much-needed funding gap -- reap most of the benefits. But why not close the air gap between the research lab and the startup? Allow the faculty to stay involved in their offspring companies while keeping their research day job? Leverage the tremendous resources of a university to streamline the commercialization process -- e.g., use of space, equipment, IT infrastructure, etc.? Allow students to work at the startups for course credit or work-study without having to quit school? Maintain a regular staff of \"serial entrepreneurs\" who help get new startups off the ground? Connect the course curriculum to the fledgling startups, rather than teaching based on artificial problems? One might joke that some universities, like Stanford, effectively already operate in this way, but this is the exception rather than the rule.<br /><br />It seems to me that bringing together the university model with the startup incubator would be a great benefit both for spinning out products and doing better research." "http://matt-welsh.blogspot.com/feeds/5059801314513052292/comments/default" (20446 44127) old 23 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5059801314513052292") (published nil "2012-06-17T21:12:00.001-07:00") (updated nil "2012-06-17T21:19:43.747-07:00") (title ((type . "text")) "Startup University") (content ((type . "html")) "<span style=\"background-color: white;\">The academic research process is incredibly inefficient when it comes to producing real products that shape the world. It can take decades for a good research idea to turn into a product - and of course most research never reaches this phase. However, I don't think it has to be that way: We could greatly accelerate the research-to-product pipeline if we could fix the academic value system and funding model.</span><br /><br />Here's the problem: Some of the smartest people in the world have spent their entire careers building throwaway prototypes. I sure never built anything real until I moved to Google, after nearly ten years of college and grad school, and seven years as a faculty member. And by \"real,\" I don't just mean a prototype that we developed for a couple of years and then threw away as soon as the papers got published. In effect, I \"wasted\" millions of dollars in funding, and countless man-years of development effort by my students and lab staff -- apart from a bunch of papers, nothing of practical value came out of my entire academic research career. (Maybe I'm being a little hard on myself, but let's take this as a given for sake of argument.) And I don't think my lack of real-world impact is at all unusual in a university setting.<br /><br />What would the world be like if all of this hard work had actually translated into real, shipping products that people could use? How could we change the structure of academic research to close the gap between playing in the sandbox and making things real?<br /><br />The plight of the academic is that there is often no direct way to translate ideas into reality -- you don't have the resources to do it at the university, and the academic process forces you to bounce between ideas every few years, rather than sticking it out to turn something into a product. In theory, academics are&nbsp;<i>supposed</i> to be patenting their ideas, and companies are <i>supposed</i> to come along and license the patents and turn them into real products. However, I am not aware of a single project from a computer science department that ever been commercialized through this route. This approach is more commonplace in fields like biotech, but in computer science it is rarely done.<br /><br />A far more common (and successful) approach is for academics to spin out their own startups. However, this involves a high degree of risk (potentially career-ending for pre-tenure faculty), and many universities do not structure their sabbatical and leave policies to make this easy to do. Most universities also make starting a company painfully difficult when it comes to questions of IP ownership, licensing, and forcing the academic's research to be dissociated with their commercial activities.&nbsp;<span style=\"background-color: white;\">As a result, you get a bunch of super smart academics who play it safe and stay within their tenured faculty jobs, subsisting on grants and rarely commercializing their work. This means that a lot of great ideas never get beyond the prototype phase.</span><br /><br />What I'd like to see is a university with a startup incubator attached to it, taking all of the best ideas and turning them into companies, with a large chunk of the money from successful companies feeding back into the university to fund the next round of great ideas. This could be a perpetual motion machine to drive research.&nbsp;<span style=\"background-color: white;\">Some universities have experimented with an incubator model, but I'm not aware of any cases where this resulted in a string of successful startups that funded the next round of research projects at that university.</span><br /><br />Typically, when a startup spins off, the university gets a tiny slice of the pie, and the venture capitalists -- who fill the much-needed funding gap -- reap most of the benefits. But why not close the air gap between the research lab and the startup? Allow the faculty to stay involved in their offspring companies while keeping their research day job? Leverage the tremendous resources of a university to streamline the commercialization process -- e.g., use of space, equipment, IT infrastructure, etc.? Allow students to work at the startups for course credit or work-study without having to quit school? Maintain a regular staff of \"serial entrepreneurs\" who help get new startups off the ground? Connect the course curriculum to the fledgling startups, rather than teaching based on artificial problems? One might joke that some universities, like Stanford, effectively already operate in this way, but this is the exception rather than the rule.<br /><br />It seems to me that bringing together the university model with the startup incubator would be a great benefit both for spinning out products and doing better research.") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5059801314513052292/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/startup-university.html#comment-form") (title . "51 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5059801314513052292"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5059801314513052292"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/06/startup-university.html") (title . "Startup University"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "51"))) ("Do you need a PhD?" "Since I decamped from the academic world to industry, I am often asked (usually by first or second year graduate students) whether it's \"worth it\" to get a PhD in Computer Science if you're not planning a research career. After all, you certainly don't <i>need</i> a PhD to get a job at a place like Google (though it helps). Hell, many successful companies (Microsoft and Facebook among them) have been founded by people who never got their undergraduate degrees, let alone a PhD. So why go through the 5-to-10 year, grueling and painful process of getting a PhD when you can just get a job straight out of college (degree or not) and get on with your life, making the big bucks and working on stuff that matters?<br /><br />Doing a PhD is certainly not for everybody, and I <a href=\"http://matt-welsh.blogspot.com/2010/09/so-you-want-to-go-to-grad-school.html\">do not recommend it for most people</a>. However, I am really glad I got my PhD rather than just getting a job after finishing my Bachelor's. The number one reason is that I <b>learned a hell of a lot doing the PhD</b>, and most of the things I learned I would never get exposed to in a typical software engineering job. The process of doing a PhD trains you to do research: to read research papers, to run experiments, to write papers, to give talks. It also teaches you how to <i>figure out what problem needs to be solved</i>. You gain a very sophisticated technical background doing the PhD, and having your work subject to the intense scrutiny of the academic peer-review process -- not to mention your thesis committee.<br /><br />I think of the PhD a little like the <a href=\"http://en.wikipedia.org/wiki/Grand_Tour\">Grand Tour</a>, a tradition in the 16th and 17th centuries where youths would travel around Europe, getting a rich exposure to high society in France, Italy, and Germany, learning about art, architecture, language, literature, fencing, riding -- all of the essential liberal arts that a gentleman was expected to have experience with to be an influential member of society. Doing a PhD is similar: You get an intense exposure to every subfield of Computer Science, and have to become <i>the leading world's expert</i>&nbsp;in the area of your dissertation work. The top PhD programs set an incredibly high bar: a lot of coursework, teaching experience, qualifying exams, a thesis defense, and of course making a groundbreaking research contribution in your area. Having to go through this process gives you a tremendous amount of technical breadth and depth.<br /><br />I do think that doing a PhD is useful for software engineers, especially those that are inclined to be technical leaders. There are many things you can only learn \"on the job,\" but doing a PhD, and having to build your own compiler, or design a new operating system, or prove a complex distributed algorithm from scratch is going to give you a much deeper understanding of complex Computer Science topics than following coding examples on StackOverflow.<br /><br />Some important stuff I learned doing a PhD:<br /><br /><b>How to read and critique research papers.</b>&nbsp;As a grad student (and a prof) you have to read thousands of research papers, extract their main ideas, critique the methods and presentation, and synthesize their contributions with your own research. As a result you are exposed to a wide range of CS topics, approaches for solving problems, sophisticated algorithms, and system designs.&nbsp;This is not just about gaining the knowledge in those papers (which is pretty important), but also about becoming conversant in the scientific literature.<br /><br /><b>How to write papers and give talks.</b>&nbsp;Being fluent in technical communications is a really important skill for engineers. I've noticed a big gap between the software engineers I've worked with who have PhDs and those who don't in this regard. PhD-trained folks tend to give clear, well-organized talks and know how to write up their work and visualize the result of experiments. As a result they can be much more influential.<br /><br /><b>How to run experiments and interpret the results:</b>&nbsp;I can't overstate how important this is. A systems-oriented PhD requires that you run a zillion measurements and present the results in a way that is both bullet-proof to peer-review criticism (in order to publish) and visually compelling. Every aspect of your methodology will be critiqued (by your advisor, your co-authors, your paper reviewers) and you will quickly learn how to run the right experiments, and do it right.<br /><br /><b>How to figure out what problem to work on:</b>&nbsp;This is probably the most important aspect of PhD training. Doing a PhD will force you to cast away from shore and explore the boundary of human knowledge. (<a href=\"http://matt.might.net/articles/phd-school-in-pictures/\">Matt Might's cartoon</a> on this is a great visualization of this.) I think that at least 80% of making a scientific contribution is figuring out what problem to tackle: a problem that is at once interesting, open, and going to have impact if you solve it. There are lots of open problems that the research community is not interested in (c.f., writing an operating system kernel in Haskell). There are many interesting problems that have been solved over and over and over (c.f., filesystem block layout optimization; wireless multihop routing). There's a real trick to picking good problems, and developing a taste for it is a key skill if you want to become a technical leader.<br /><br />So I think it's worth having a PhD, especially if you want to work on the hardest and most interesting problems. This is true whether you want a career in academia, a research lab, or a more traditional engineering role. But as <a href=\"http://www.cs.berkeley.edu/~culler/\">my PhD advisor</a> was fond of saying, \"doing a PhD costs you a house.\" (In terms of the lost salary during the PhD years - these days it's probably more like several houses.)<br /><br /><br />" "http://matt-welsh.blogspot.com/feeds/5916156754481973891/comments/default" (20318 22990) old 24 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-5916156754481973891") (published nil "2012-03-12T13:17:00.001-07:00") (updated nil "2012-03-12T13:17:18.875-07:00") (title ((type . "text")) "Do you need a PhD?") (content ((type . "html")) "Since I decamped from the academic world to industry, I am often asked (usually by first or second year graduate students) whether it's \"worth it\" to get a PhD in Computer Science if you're not planning a research career. After all, you certainly don't <i>need</i> a PhD to get a job at a place like Google (though it helps). Hell, many successful companies (Microsoft and Facebook among them) have been founded by people who never got their undergraduate degrees, let alone a PhD. So why go through the 5-to-10 year, grueling and painful process of getting a PhD when you can just get a job straight out of college (degree or not) and get on with your life, making the big bucks and working on stuff that matters?<br /><br />Doing a PhD is certainly not for everybody, and I <a href=\"http://matt-welsh.blogspot.com/2010/09/so-you-want-to-go-to-grad-school.html\">do not recommend it for most people</a>. However, I am really glad I got my PhD rather than just getting a job after finishing my Bachelor's. The number one reason is that I <b>learned a hell of a lot doing the PhD</b>, and most of the things I learned I would never get exposed to in a typical software engineering job. The process of doing a PhD trains you to do research: to read research papers, to run experiments, to write papers, to give talks. It also teaches you how to <i>figure out what problem needs to be solved</i>. You gain a very sophisticated technical background doing the PhD, and having your work subject to the intense scrutiny of the academic peer-review process -- not to mention your thesis committee.<br /><br />I think of the PhD a little like the <a href=\"http://en.wikipedia.org/wiki/Grand_Tour\">Grand Tour</a>, a tradition in the 16th and 17th centuries where youths would travel around Europe, getting a rich exposure to high society in France, Italy, and Germany, learning about art, architecture, language, literature, fencing, riding -- all of the essential liberal arts that a gentleman was expected to have experience with to be an influential member of society. Doing a PhD is similar: You get an intense exposure to every subfield of Computer Science, and have to become <i>the leading world's expert</i>&nbsp;in the area of your dissertation work. The top PhD programs set an incredibly high bar: a lot of coursework, teaching experience, qualifying exams, a thesis defense, and of course making a groundbreaking research contribution in your area. Having to go through this process gives you a tremendous amount of technical breadth and depth.<br /><br />I do think that doing a PhD is useful for software engineers, especially those that are inclined to be technical leaders. There are many things you can only learn \"on the job,\" but doing a PhD, and having to build your own compiler, or design a new operating system, or prove a complex distributed algorithm from scratch is going to give you a much deeper understanding of complex Computer Science topics than following coding examples on StackOverflow.<br /><br />Some important stuff I learned doing a PhD:<br /><br /><b>How to read and critique research papers.</b>&nbsp;As a grad student (and a prof) you have to read thousands of research papers, extract their main ideas, critique the methods and presentation, and synthesize their contributions with your own research. As a result you are exposed to a wide range of CS topics, approaches for solving problems, sophisticated algorithms, and system designs.&nbsp;This is not just about gaining the knowledge in those papers (which is pretty important), but also about becoming conversant in the scientific literature.<br /><br /><b>How to write papers and give talks.</b>&nbsp;Being fluent in technical communications is a really important skill for engineers. I've noticed a big gap between the software engineers I've worked with who have PhDs and those who don't in this regard. PhD-trained folks tend to give clear, well-organized talks and know how to write up their work and visualize the result of experiments. As a result they can be much more influential.<br /><br /><b>How to run experiments and interpret the results:</b>&nbsp;I can't overstate how important this is. A systems-oriented PhD requires that you run a zillion measurements and present the results in a way that is both bullet-proof to peer-review criticism (in order to publish) and visually compelling. Every aspect of your methodology will be critiqued (by your advisor, your co-authors, your paper reviewers) and you will quickly learn how to run the right experiments, and do it right.<br /><br /><b>How to figure out what problem to work on:</b>&nbsp;This is probably the most important aspect of PhD training. Doing a PhD will force you to cast away from shore and explore the boundary of human knowledge. (<a href=\"http://matt.might.net/articles/phd-school-in-pictures/\">Matt Might's cartoon</a> on this is a great visualization of this.) I think that at least 80% of making a scientific contribution is figuring out what problem to tackle: a problem that is at once interesting, open, and going to have impact if you solve it. There are lots of open problems that the research community is not interested in (c.f., writing an operating system kernel in Haskell). There are many interesting problems that have been solved over and over and over (c.f., filesystem block layout optimization; wireless multihop routing). There's a real trick to picking good problems, and developing a taste for it is a key skill if you want to become a technical leader.<br /><br />So I think it's worth having a PhD, especially if you want to work on the hardest and most interesting problems. This is true whether you want a career in academia, a research lab, or a more traditional engineering role. But as <a href=\"http://www.cs.berkeley.edu/~culler/\">my PhD advisor</a> was fond of saying, \"doing a PhD costs you a house.\" (In terms of the lost salary during the PhD years - these days it's probably more like several houses.)<br /><br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/5916156754481973891/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/03/do-you-need-phd.html#comment-form") (title . "16 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5916156754481973891"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/5916156754481973891"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/03/do-you-need-phd.html") (title . "Do you need a PhD?"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "16"))) ("My love affair with code reviews" "One of the most life-altering events in my move from academia to industry was the discovery of code reviews. This is pretty standard fare for developers in the \"real world\", but I have never heard of an academic research group using them, and had never done code reviews myself before joining Google.<br /><br />In short: Code reviews are awesome. Everyone should use them. Heck, my dog should use them. You should too.<br /><br />For those of you not in the academic research community, you have to understand that academics are <i>terrible programmers.</i><span style=\"font-weight: bold;\">&nbsp;(</span>I count myself among this group.) Academics write sloppy code, with no unit tests, no style guidelines, and no documentation. Code is slapped together by grad students, generally under pressure of a paper deadline, mainly to get some graphs to look pretty without regard for whether anyone is ever going to run the code ever again. Before I came to Google, that was what \"programming\" meant to me: kind of a necessary side effect of doing research, but the result was hardly anything I would be proud to show my mother. (Or my dog, for that matter.) Oh, sure, I released some open source code as an academic, but now I shudder to think of anyone at a place like Google or Microsoft or Facebook actually <i>reading</i>&nbsp;that code (please don't, I'm begging you).<br /><br />Then I came to Google. Lesson #1: You don't check anything in until it has been reviewed by someone else. This took some getting used to. Even an innocent four-line change to some \"throw away\" Python script is subject to scrutiny. And of course, most of the people reviewing my code were young enough to be my students -- having considered myself to be an \"expert programmer\" (ha!), it is a humbling experience for a 23-year-old one year out of college to show you how to take your 40 lines of crap and turn them into one beautiful, tight function -- and how to generalize it and make it testable and document the damn thing for chrissakes.<br /><br />So there's a bunch of reasons to love code reviews:<br /><br /><b>Maintain standards.</b>&nbsp;This is pretty obvious but matters tremendously. The way I think of it, imagine you get hit by a truck one day, and 100 years from now somebody who has never heard of your code gets paged at 3 a.m. because something you wrote was suddenly raising exceptions. Not only does your code have to <i>work</i>, but it also needs to <i>make sense</i>. Code reviews force you to write code that fits together, that adheres to the style guide, that is testable.<br /><br /><b>Catch bugs before you check in.</b>&nbsp;God, I can't count the number of times someone has pointed out an obvious (or extremely subtle) bug in my code during the code review process. Having another pair of eyes (or often several pairs of eyes) looking at your code is the best way to catch flaws early.<br /><br /><b>Learn from your peers.</b>&nbsp;I have learned more programming techniques and tricks from doing code reviews than I ever did reading O'Reilly books or even other people's code. A couple of guys on my team are friggin' coding ninjas and suggest all kinds of ways of improving my clunky excuse for software. You learn better design patterns, better approaches for testing, better algorithms by getting direct feedback on your code from other developers.<br /><br /><b>Stay on top of what's going on.</b>&nbsp;Doing code reviews for other people is the best way to understand what's happening in complex codebase. You get exposed to a lot of different code, different approaches for solving problems, and can chart the evolution of the software over time -- a very different experience than just reading the final product.<br /><br />I think academic research groups would gain a lot by using code reviews, and of course the things that go with them: good coding practices, a consistent style guide, insistence on unit tests. I'll admit that code quality matters less in a research setting, but it is probably worth the investment to use some kind of process.<br /><br /><br />The thing to keep in mind is that there is a social aspect to code reviews as well. At Google, you need an LGTM from another developer before you're allowed to submit a patch. It also takes a lot of time to do a good code review, so it's standard practice to break large changes into smaller, more review-friendly pieces. And of course the expectation is you've done your due diligence by testing your code thoroughly before sending it for review.<br /><br /><b>Don't code reviews slow you down?</b> Somewhat. But if you think of code development as a pipeline, with multiple code reviews in the flight at a time you can still sustain a high issue rate, even if each individual patch has higher latency.&nbsp;Generally developers all understand that being a hardass on you during the review process will come back to bite them some day -- and they understand the tradeoff between the need to move quickly and the need to do things right. I think code reviews can also serve to build stronger teams, since everyone is responsible for doing reviews and ensuring the quality of the shared codebase. So if done right, it's worth it.<br /><div><br /></div><br /><b>Okay, Matt. I'm convinced. How can I too join the code review bandwagon?</b>&nbsp;Glad you asked. The tool we use internally at Google was developed by none other than <a href=\"http://www.python.org/~guido/\">Guido van Rossum</a>, who has graciously released a similar system called <b><a href=\"http://code.google.com/p/rietveld/\">Rietveld</a></b>&nbsp;as open source. Basically, you install Rietveld on AppEngine, and each developer uses a little Python script to upload patches for review. Reviews are done on the website, and when the review is complete, the developer can submit the patch. Rietveld doesn't care which source control system you use, or where the repository is located -- it just deals with patches. It's pretty slick and I've used it for a couple of projects with success.<br /><br />Another popular approach is to use <a href=\"https://github.com/\">GitHub</a>'s \"pull request\" and commenting platform as a code review mechanism. Individual developers clone a master repository, and submit pull requests to the owner of that repository for inclusion. GitHub has a nice commenting system allowing for code reviews to be used with pull requests.<br /><br />I was floored the other day when I met an engineer from a fairly well-known Internet site who said they&nbsp;<i>didn't</i>&nbsp;use code reviews internally -- and complained about how messy the code was and how poorly designed some pieces were. No kidding! Code reviews aren't the ultimate solution to a broken design process, but they are an incredibly useful tool.<br /><br />" "http://matt-welsh.blogspot.com/feeds/3976700473159420409/comments/default" (20274 3816) old 25 nil nil ((id nil "tag:blogger.com,1999:blog-9186457242428335144.post-3976700473159420409") (published nil "2012-02-07T21:58:00.000-08:00") (updated nil "2012-02-07T21:58:00.162-08:00") (title ((type . "text")) "My love affair with code reviews") (content ((type . "html")) "One of the most life-altering events in my move from academia to industry was the discovery of code reviews. This is pretty standard fare for developers in the \"real world\", but I have never heard of an academic research group using them, and had never done code reviews myself before joining Google.<br /><br />In short: Code reviews are awesome. Everyone should use them. Heck, my dog should use them. You should too.<br /><br />For those of you not in the academic research community, you have to understand that academics are <i>terrible programmers.</i><span style=\"font-weight: bold;\">&nbsp;(</span>I count myself among this group.) Academics write sloppy code, with no unit tests, no style guidelines, and no documentation. Code is slapped together by grad students, generally under pressure of a paper deadline, mainly to get some graphs to look pretty without regard for whether anyone is ever going to run the code ever again. Before I came to Google, that was what \"programming\" meant to me: kind of a necessary side effect of doing research, but the result was hardly anything I would be proud to show my mother. (Or my dog, for that matter.) Oh, sure, I released some open source code as an academic, but now I shudder to think of anyone at a place like Google or Microsoft or Facebook actually <i>reading</i>&nbsp;that code (please don't, I'm begging you).<br /><br />Then I came to Google. Lesson #1: You don't check anything in until it has been reviewed by someone else. This took some getting used to. Even an innocent four-line change to some \"throw away\" Python script is subject to scrutiny. And of course, most of the people reviewing my code were young enough to be my students -- having considered myself to be an \"expert programmer\" (ha!), it is a humbling experience for a 23-year-old one year out of college to show you how to take your 40 lines of crap and turn them into one beautiful, tight function -- and how to generalize it and make it testable and document the damn thing for chrissakes.<br /><br />So there's a bunch of reasons to love code reviews:<br /><br /><b>Maintain standards.</b>&nbsp;This is pretty obvious but matters tremendously. The way I think of it, imagine you get hit by a truck one day, and 100 years from now somebody who has never heard of your code gets paged at 3 a.m. because something you wrote was suddenly raising exceptions. Not only does your code have to <i>work</i>, but it also needs to <i>make sense</i>. Code reviews force you to write code that fits together, that adheres to the style guide, that is testable.<br /><br /><b>Catch bugs before you check in.</b>&nbsp;God, I can't count the number of times someone has pointed out an obvious (or extremely subtle) bug in my code during the code review process. Having another pair of eyes (or often several pairs of eyes) looking at your code is the best way to catch flaws early.<br /><br /><b>Learn from your peers.</b>&nbsp;I have learned more programming techniques and tricks from doing code reviews than I ever did reading O'Reilly books or even other people's code. A couple of guys on my team are friggin' coding ninjas and suggest all kinds of ways of improving my clunky excuse for software. You learn better design patterns, better approaches for testing, better algorithms by getting direct feedback on your code from other developers.<br /><br /><b>Stay on top of what's going on.</b>&nbsp;Doing code reviews for other people is the best way to understand what's happening in complex codebase. You get exposed to a lot of different code, different approaches for solving problems, and can chart the evolution of the software over time -- a very different experience than just reading the final product.<br /><br />I think academic research groups would gain a lot by using code reviews, and of course the things that go with them: good coding practices, a consistent style guide, insistence on unit tests. I'll admit that code quality matters less in a research setting, but it is probably worth the investment to use some kind of process.<br /><br /><br />The thing to keep in mind is that there is a social aspect to code reviews as well. At Google, you need an LGTM from another developer before you're allowed to submit a patch. It also takes a lot of time to do a good code review, so it's standard practice to break large changes into smaller, more review-friendly pieces. And of course the expectation is you've done your due diligence by testing your code thoroughly before sending it for review.<br /><br /><b>Don't code reviews slow you down?</b> Somewhat. But if you think of code development as a pipeline, with multiple code reviews in the flight at a time you can still sustain a high issue rate, even if each individual patch has higher latency.&nbsp;Generally developers all understand that being a hardass on you during the review process will come back to bite them some day -- and they understand the tradeoff between the need to move quickly and the need to do things right. I think code reviews can also serve to build stronger teams, since everyone is responsible for doing reviews and ensuring the quality of the shared codebase. So if done right, it's worth it.<br /><div><br /></div><br /><b>Okay, Matt. I'm convinced. How can I too join the code review bandwagon?</b>&nbsp;Glad you asked. The tool we use internally at Google was developed by none other than <a href=\"http://www.python.org/~guido/\">Guido van Rossum</a>, who has graciously released a similar system called <b><a href=\"http://code.google.com/p/rietveld/\">Rietveld</a></b>&nbsp;as open source. Basically, you install Rietveld on AppEngine, and each developer uses a little Python script to upload patches for review. Reviews are done on the website, and when the review is complete, the developer can submit the patch. Rietveld doesn't care which source control system you use, or where the repository is located -- it just deals with patches. It's pretty slick and I've used it for a couple of projects with success.<br /><br />Another popular approach is to use <a href=\"https://github.com/\">GitHub</a>'s \"pull request\" and commenting platform as a code review mechanism. Individual developers clone a master repository, and submit pull requests to the owner of that repository for inclusion. GitHub has a nice commenting system allowing for code reviews to be used with pull requests.<br /><br />I was floored the other day when I met an engineer from a fairly well-known Internet site who said they&nbsp;<i>didn't</i>&nbsp;use code reviews internally -- and complained about how messy the code was and how poorly designed some pieces were. No kidding! Code reviews aren't the ultimate solution to a broken design process, but they are an incredibly useful tool.<br /><br />") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://matt-welsh.blogspot.com/feeds/3976700473159420409/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/02/my-love-affair-with-code-reviews.html#comment-form") (title . "16 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3976700473159420409"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/9186457242428335144/posts/default/3976700473159420409"))) (link ((rel . "alternate") (type . "text/html") (href . "http://matt-welsh.blogspot.com/2012/02/my-love-affair-with-code-reviews.html") (title . "My love affair with code reviews"))) (author nil (name nil "Matt Welsh") (uri nil "http://www.blogger.com/profile/07077674014671176946") (email nil "noreply@blogger.com") (gd:image ((rel . "http://schemas.google.com/g/2005#thumbnail") (width . "28") (height . "32") (src . "http://1.bp.blogspot.com/-31y_drK97kU/UuCndPsGHqI/AAAAAAABfTU/ixwEqDQrOvU/s1600/*")))) (thr:total nil "16"))))